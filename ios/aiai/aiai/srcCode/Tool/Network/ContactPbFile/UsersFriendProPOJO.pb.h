// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UsersFriendProPOJO.proto

#ifndef PROTOBUF_UsersFriendProPOJO_2eproto__INCLUDED
#define PROTOBUF_UsersFriendProPOJO_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace mm {
namespace pb {
namespace po {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UsersFriendProPOJO_2eproto();
void protobuf_AssignDesc_UsersFriendProPOJO_2eproto();
void protobuf_ShutdownFile_UsersFriendProPOJO_2eproto();

class UsersFriendProPOJO;
class UsersFriendsPOJO;

// ===================================================================

class UsersFriendProPOJO : public ::google::protobuf::Message {
 public:
  UsersFriendProPOJO();
  virtual ~UsersFriendProPOJO();

  UsersFriendProPOJO(const UsersFriendProPOJO& from);

  inline UsersFriendProPOJO& operator=(const UsersFriendProPOJO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UsersFriendProPOJO& default_instance();

  void Swap(UsersFriendProPOJO* other);

  // implements Message ----------------------------------------------

  UsersFriendProPOJO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UsersFriendProPOJO& from);
  void MergeFrom(const UsersFriendProPOJO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // repeated .com.mm.pb.po.UsersFriendsPOJO list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::com::mm::pb::po::UsersFriendsPOJO& list(int index) const;
  inline ::com::mm::pb::po::UsersFriendsPOJO* mutable_list(int index);
  inline ::com::mm::pb::po::UsersFriendsPOJO* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::com::mm::pb::po::UsersFriendsPOJO >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::mm::pb::po::UsersFriendsPOJO >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:com.mm.pb.po.UsersFriendProPOJO)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::com::mm::pb::po::UsersFriendsPOJO > list_;
  ::google::protobuf::int32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_UsersFriendProPOJO_2eproto();
  friend void protobuf_AssignDesc_UsersFriendProPOJO_2eproto();
  friend void protobuf_ShutdownFile_UsersFriendProPOJO_2eproto();

  void InitAsDefaultInstance();
  static UsersFriendProPOJO* default_instance_;
};
// -------------------------------------------------------------------

class UsersFriendsPOJO : public ::google::protobuf::Message {
 public:
  UsersFriendsPOJO();
  virtual ~UsersFriendsPOJO();

  UsersFriendsPOJO(const UsersFriendsPOJO& from);

  inline UsersFriendsPOJO& operator=(const UsersFriendsPOJO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UsersFriendsPOJO& default_instance();

  void Swap(UsersFriendsPOJO* other);

  // implements Message ----------------------------------------------

  UsersFriendsPOJO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UsersFriendsPOJO& from);
  void MergeFrom(const UsersFriendsPOJO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string friendId = 1;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendIdFieldNumber = 1;
  inline const ::std::string& friendid() const;
  inline void set_friendid(const ::std::string& value);
  inline void set_friendid(const char* value);
  inline void set_friendid(const char* value, size_t size);
  inline ::std::string* mutable_friendid();
  inline ::std::string* release_friendid();
  inline void set_allocated_friendid(::std::string* friendid);

  // optional string subname = 2;
  inline bool has_subname() const;
  inline void clear_subname();
  static const int kSubnameFieldNumber = 2;
  inline const ::std::string& subname() const;
  inline void set_subname(const ::std::string& value);
  inline void set_subname(const char* value);
  inline void set_subname(const char* value, size_t size);
  inline ::std::string* mutable_subname();
  inline ::std::string* release_subname();
  inline void set_allocated_subname(::std::string* subname);

  // optional int32 isshare = 3;
  inline bool has_isshare() const;
  inline void clear_isshare();
  static const int kIsshareFieldNumber = 3;
  inline ::google::protobuf::int32 isshare() const;
  inline void set_isshare(::google::protobuf::int32 value);

  // optional int32 issave = 4;
  inline bool has_issave() const;
  inline void clear_issave();
  static const int kIssaveFieldNumber = 4;
  inline ::google::protobuf::int32 issave() const;
  inline void set_issave(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.mm.pb.po.UsersFriendsPOJO)
 private:
  inline void set_has_friendid();
  inline void clear_has_friendid();
  inline void set_has_subname();
  inline void clear_has_subname();
  inline void set_has_isshare();
  inline void clear_has_isshare();
  inline void set_has_issave();
  inline void clear_has_issave();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* friendid_;
  ::std::string* subname_;
  ::google::protobuf::int32 isshare_;
  ::google::protobuf::int32 issave_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_UsersFriendProPOJO_2eproto();
  friend void protobuf_AssignDesc_UsersFriendProPOJO_2eproto();
  friend void protobuf_ShutdownFile_UsersFriendProPOJO_2eproto();

  void InitAsDefaultInstance();
  static UsersFriendsPOJO* default_instance_;
};
// ===================================================================


// ===================================================================

// UsersFriendProPOJO

// optional int32 uid = 1;
inline bool UsersFriendProPOJO::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UsersFriendProPOJO::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UsersFriendProPOJO::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UsersFriendProPOJO::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 UsersFriendProPOJO::uid() const {
  return uid_;
}
inline void UsersFriendProPOJO::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// repeated .com.mm.pb.po.UsersFriendsPOJO list = 2;
inline int UsersFriendProPOJO::list_size() const {
  return list_.size();
}
inline void UsersFriendProPOJO::clear_list() {
  list_.Clear();
}
inline const ::com::mm::pb::po::UsersFriendsPOJO& UsersFriendProPOJO::list(int index) const {
  return list_.Get(index);
}
inline ::com::mm::pb::po::UsersFriendsPOJO* UsersFriendProPOJO::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::com::mm::pb::po::UsersFriendsPOJO* UsersFriendProPOJO::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::mm::pb::po::UsersFriendsPOJO >&
UsersFriendProPOJO::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::mm::pb::po::UsersFriendsPOJO >*
UsersFriendProPOJO::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// UsersFriendsPOJO

// optional string friendId = 1;
inline bool UsersFriendsPOJO::has_friendid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UsersFriendsPOJO::set_has_friendid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UsersFriendsPOJO::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UsersFriendsPOJO::clear_friendid() {
  if (friendid_ != &::google::protobuf::internal::kEmptyString) {
    friendid_->clear();
  }
  clear_has_friendid();
}
inline const ::std::string& UsersFriendsPOJO::friendid() const {
  return *friendid_;
}
inline void UsersFriendsPOJO::set_friendid(const ::std::string& value) {
  set_has_friendid();
  if (friendid_ == &::google::protobuf::internal::kEmptyString) {
    friendid_ = new ::std::string;
  }
  friendid_->assign(value);
}
inline void UsersFriendsPOJO::set_friendid(const char* value) {
  set_has_friendid();
  if (friendid_ == &::google::protobuf::internal::kEmptyString) {
    friendid_ = new ::std::string;
  }
  friendid_->assign(value);
}
inline void UsersFriendsPOJO::set_friendid(const char* value, size_t size) {
  set_has_friendid();
  if (friendid_ == &::google::protobuf::internal::kEmptyString) {
    friendid_ = new ::std::string;
  }
  friendid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UsersFriendsPOJO::mutable_friendid() {
  set_has_friendid();
  if (friendid_ == &::google::protobuf::internal::kEmptyString) {
    friendid_ = new ::std::string;
  }
  return friendid_;
}
inline ::std::string* UsersFriendsPOJO::release_friendid() {
  clear_has_friendid();
  if (friendid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = friendid_;
    friendid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UsersFriendsPOJO::set_allocated_friendid(::std::string* friendid) {
  if (friendid_ != &::google::protobuf::internal::kEmptyString) {
    delete friendid_;
  }
  if (friendid) {
    set_has_friendid();
    friendid_ = friendid;
  } else {
    clear_has_friendid();
    friendid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string subname = 2;
inline bool UsersFriendsPOJO::has_subname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UsersFriendsPOJO::set_has_subname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UsersFriendsPOJO::clear_has_subname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UsersFriendsPOJO::clear_subname() {
  if (subname_ != &::google::protobuf::internal::kEmptyString) {
    subname_->clear();
  }
  clear_has_subname();
}
inline const ::std::string& UsersFriendsPOJO::subname() const {
  return *subname_;
}
inline void UsersFriendsPOJO::set_subname(const ::std::string& value) {
  set_has_subname();
  if (subname_ == &::google::protobuf::internal::kEmptyString) {
    subname_ = new ::std::string;
  }
  subname_->assign(value);
}
inline void UsersFriendsPOJO::set_subname(const char* value) {
  set_has_subname();
  if (subname_ == &::google::protobuf::internal::kEmptyString) {
    subname_ = new ::std::string;
  }
  subname_->assign(value);
}
inline void UsersFriendsPOJO::set_subname(const char* value, size_t size) {
  set_has_subname();
  if (subname_ == &::google::protobuf::internal::kEmptyString) {
    subname_ = new ::std::string;
  }
  subname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UsersFriendsPOJO::mutable_subname() {
  set_has_subname();
  if (subname_ == &::google::protobuf::internal::kEmptyString) {
    subname_ = new ::std::string;
  }
  return subname_;
}
inline ::std::string* UsersFriendsPOJO::release_subname() {
  clear_has_subname();
  if (subname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subname_;
    subname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UsersFriendsPOJO::set_allocated_subname(::std::string* subname) {
  if (subname_ != &::google::protobuf::internal::kEmptyString) {
    delete subname_;
  }
  if (subname) {
    set_has_subname();
    subname_ = subname;
  } else {
    clear_has_subname();
    subname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 isshare = 3;
inline bool UsersFriendsPOJO::has_isshare() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UsersFriendsPOJO::set_has_isshare() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UsersFriendsPOJO::clear_has_isshare() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UsersFriendsPOJO::clear_isshare() {
  isshare_ = 0;
  clear_has_isshare();
}
inline ::google::protobuf::int32 UsersFriendsPOJO::isshare() const {
  return isshare_;
}
inline void UsersFriendsPOJO::set_isshare(::google::protobuf::int32 value) {
  set_has_isshare();
  isshare_ = value;
}

// optional int32 issave = 4;
inline bool UsersFriendsPOJO::has_issave() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UsersFriendsPOJO::set_has_issave() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UsersFriendsPOJO::clear_has_issave() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UsersFriendsPOJO::clear_issave() {
  issave_ = 0;
  clear_has_issave();
}
inline ::google::protobuf::int32 UsersFriendsPOJO::issave() const {
  return issave_;
}
inline void UsersFriendsPOJO::set_issave(::google::protobuf::int32 value) {
  set_has_issave();
  issave_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace po
}  // namespace pb
}  // namespace mm
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UsersFriendProPOJO_2eproto__INCLUDED
