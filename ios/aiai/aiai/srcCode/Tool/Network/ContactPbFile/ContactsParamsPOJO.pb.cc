// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ContactsParamsPOJO.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ContactsParamsPOJO.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace mm {
namespace pb {
namespace po {

namespace {

const ::google::protobuf::Descriptor* ContactsParamsPOJO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactsParamsPOJO_reflection_ = NULL;
const ::google::protobuf::Descriptor* Contacts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Contacts_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConName_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConPhone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConPhone_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultContacts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultContacts_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyVCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyVCard_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ContactsParamsPOJO_2eproto() {
  protobuf_AddDesc_ContactsParamsPOJO_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ContactsParamsPOJO.proto");
  GOOGLE_CHECK(file != NULL);
  ContactsParamsPOJO_descriptor_ = file->message_type(0);
  static const int ContactsParamsPOJO_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactsParamsPOJO, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactsParamsPOJO, myvcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactsParamsPOJO, contactslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactsParamsPOJO, resultcontacts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactsParamsPOJO, resultcode_),
  };
  ContactsParamsPOJO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactsParamsPOJO_descriptor_,
      ContactsParamsPOJO::default_instance_,
      ContactsParamsPOJO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactsParamsPOJO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactsParamsPOJO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactsParamsPOJO));
  Contacts_descriptor_ = file->message_type(1);
  static const int Contacts_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contacts, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contacts, phone_),
  };
  Contacts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Contacts_descriptor_,
      Contacts::default_instance_,
      Contacts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contacts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Contacts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Contacts));
  ConName_descriptor_ = file->message_type(2);
  static const int ConName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConName, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConName, lastname_),
  };
  ConName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConName_descriptor_,
      ConName::default_instance_,
      ConName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConName));
  ConPhone_descriptor_ = file->message_type(3);
  static const int ConPhone_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConPhone, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConPhone, value_),
  };
  ConPhone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConPhone_descriptor_,
      ConPhone::default_instance_,
      ConPhone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConPhone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConPhone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConPhone));
  ResultContacts_descriptor_ = file->message_type(4);
  static const int ResultContacts_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultContacts, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultContacts, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultContacts, face_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultContacts, otherid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultContacts, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultContacts, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultContacts, name_),
  };
  ResultContacts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultContacts_descriptor_,
      ResultContacts::default_instance_,
      ResultContacts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultContacts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultContacts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultContacts));
  MyVCard_descriptor_ = file->message_type(5);
  static const int MyVCard_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyVCard, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyVCard, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyVCard, email_),
  };
  MyVCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyVCard_descriptor_,
      MyVCard::default_instance_,
      MyVCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyVCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyVCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyVCard));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ContactsParamsPOJO_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactsParamsPOJO_descriptor_, &ContactsParamsPOJO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Contacts_descriptor_, &Contacts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConName_descriptor_, &ConName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConPhone_descriptor_, &ConPhone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultContacts_descriptor_, &ResultContacts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyVCard_descriptor_, &MyVCard::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ContactsParamsPOJO_2eproto() {
  delete ContactsParamsPOJO::default_instance_;
  delete ContactsParamsPOJO_reflection_;
  delete Contacts::default_instance_;
  delete Contacts_reflection_;
  delete ConName::default_instance_;
  delete ConName_reflection_;
  delete ConPhone::default_instance_;
  delete ConPhone_reflection_;
  delete ResultContacts::default_instance_;
  delete ResultContacts_reflection_;
  delete MyVCard::default_instance_;
  delete MyVCard_reflection_;
}

void protobuf_AddDesc_ContactsParamsPOJO_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030ContactsParamsPOJO.proto\022\014com.mm.pb.po"
    "\"\301\001\n\022ContactsParamsPOJO\022\013\n\003uid\030\001 \001(\005\022&\n\007"
    "myVCard\030\002 \001(\0132\025.com.mm.pb.po.MyVCard\022,\n\014"
    "contactsList\030\003 \003(\0132\026.com.mm.pb.po.Contac"
    "ts\0224\n\016resultContacts\030\004 \003(\0132\034.com.mm.pb.p"
    "o.ResultContacts\022\022\n\nresultCode\030\005 \001(\005\"V\n\010"
    "Contacts\022#\n\004name\030\001 \001(\0132\025.com.mm.pb.po.Co"
    "nName\022%\n\005phone\030\002 \003(\0132\026.com.mm.pb.po.ConP"
    "hone\".\n\007ConName\022\021\n\tfirstName\030\001 \001(\t\022\020\n\010la"
    "stName\030\002 \001(\t\"\'\n\010ConPhone\022\014\n\004type\030\001 \001(\t\022\r"
    "\n\005value\030\002 \001(\t\"\233\001\n\016ResultContacts\022\020\n\010nick"
    "name\030\001 \001(\t\022\r\n\005phone\030\002 \001(\t\022\020\n\010face_url\030\003 "
    "\001(\t\022\017\n\007otherId\030\004 \001(\005\022\020\n\010userName\030\005 \001(\t\022\016"
    "\n\006status\030\006 \001(\005\022#\n\004name\030\007 \001(\0132\025.com.mm.pb"
    ".po.ConName\"9\n\007MyVCard\022\020\n\010username\030\001 \001(\t"
    "\022\r\n\005phone\030\002 \001(\t\022\r\n\005email\030\003 \001(\tB\024B\022Contac"
    "tsParamsPOJO", 652);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ContactsParamsPOJO.proto", &protobuf_RegisterTypes);
  ContactsParamsPOJO::default_instance_ = new ContactsParamsPOJO();
  Contacts::default_instance_ = new Contacts();
  ConName::default_instance_ = new ConName();
  ConPhone::default_instance_ = new ConPhone();
  ResultContacts::default_instance_ = new ResultContacts();
  MyVCard::default_instance_ = new MyVCard();
  ContactsParamsPOJO::default_instance_->InitAsDefaultInstance();
  Contacts::default_instance_->InitAsDefaultInstance();
  ConName::default_instance_->InitAsDefaultInstance();
  ConPhone::default_instance_->InitAsDefaultInstance();
  ResultContacts::default_instance_->InitAsDefaultInstance();
  MyVCard::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ContactsParamsPOJO_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ContactsParamsPOJO_2eproto {
  StaticDescriptorInitializer_ContactsParamsPOJO_2eproto() {
    protobuf_AddDesc_ContactsParamsPOJO_2eproto();
  }
} static_descriptor_initializer_ContactsParamsPOJO_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ContactsParamsPOJO::kUidFieldNumber;
const int ContactsParamsPOJO::kMyVCardFieldNumber;
const int ContactsParamsPOJO::kContactsListFieldNumber;
const int ContactsParamsPOJO::kResultContactsFieldNumber;
const int ContactsParamsPOJO::kResultCodeFieldNumber;
#endif  // !_MSC_VER

ContactsParamsPOJO::ContactsParamsPOJO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactsParamsPOJO::InitAsDefaultInstance() {
  myvcard_ = const_cast< ::com::mm::pb::po::MyVCard*>(&::com::mm::pb::po::MyVCard::default_instance());
}

ContactsParamsPOJO::ContactsParamsPOJO(const ContactsParamsPOJO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactsParamsPOJO::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  myvcard_ = NULL;
  resultcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactsParamsPOJO::~ContactsParamsPOJO() {
  SharedDtor();
}

void ContactsParamsPOJO::SharedDtor() {
  if (this != default_instance_) {
    delete myvcard_;
  }
}

void ContactsParamsPOJO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactsParamsPOJO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactsParamsPOJO_descriptor_;
}

const ContactsParamsPOJO& ContactsParamsPOJO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactsParamsPOJO_2eproto();
  return *default_instance_;
}

ContactsParamsPOJO* ContactsParamsPOJO::default_instance_ = NULL;

ContactsParamsPOJO* ContactsParamsPOJO::New() const {
  return new ContactsParamsPOJO;
}

void ContactsParamsPOJO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    if (has_myvcard()) {
      if (myvcard_ != NULL) myvcard_->::com::mm::pb::po::MyVCard::Clear();
    }
    resultcode_ = 0;
  }
  contactslist_.Clear();
  resultcontacts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactsParamsPOJO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_myVCard;
        break;
      }

      // optional .com.mm.pb.po.MyVCard myVCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myVCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myvcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_contactsList;
        break;
      }

      // repeated .com.mm.pb.po.Contacts contactsList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contactsList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contactslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_contactsList;
        if (input->ExpectTag(34)) goto parse_resultContacts;
        break;
      }

      // repeated .com.mm.pb.po.ResultContacts resultContacts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resultContacts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resultcontacts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resultContacts;
        if (input->ExpectTag(40)) goto parse_resultCode;
        break;
      }

      // optional int32 resultCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resultCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultcode_)));
          set_has_resultcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactsParamsPOJO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional .com.mm.pb.po.MyVCard myVCard = 2;
  if (has_myvcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->myvcard(), output);
  }

  // repeated .com.mm.pb.po.Contacts contactsList = 3;
  for (int i = 0; i < this->contactslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->contactslist(i), output);
  }

  // repeated .com.mm.pb.po.ResultContacts resultContacts = 4;
  for (int i = 0; i < this->resultcontacts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->resultcontacts(i), output);
  }

  // optional int32 resultCode = 5;
  if (has_resultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->resultcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactsParamsPOJO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional .com.mm.pb.po.MyVCard myVCard = 2;
  if (has_myvcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->myvcard(), target);
  }

  // repeated .com.mm.pb.po.Contacts contactsList = 3;
  for (int i = 0; i < this->contactslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->contactslist(i), target);
  }

  // repeated .com.mm.pb.po.ResultContacts resultContacts = 4;
  for (int i = 0; i < this->resultcontacts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->resultcontacts(i), target);
  }

  // optional int32 resultCode = 5;
  if (has_resultcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->resultcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactsParamsPOJO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional .com.mm.pb.po.MyVCard myVCard = 2;
    if (has_myvcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myvcard());
    }

    // optional int32 resultCode = 5;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resultcode());
    }

  }
  // repeated .com.mm.pb.po.Contacts contactsList = 3;
  total_size += 1 * this->contactslist_size();
  for (int i = 0; i < this->contactslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contactslist(i));
  }

  // repeated .com.mm.pb.po.ResultContacts resultContacts = 4;
  total_size += 1 * this->resultcontacts_size();
  for (int i = 0; i < this->resultcontacts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resultcontacts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactsParamsPOJO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactsParamsPOJO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactsParamsPOJO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactsParamsPOJO::MergeFrom(const ContactsParamsPOJO& from) {
  GOOGLE_CHECK_NE(&from, this);
  contactslist_.MergeFrom(from.contactslist_);
  resultcontacts_.MergeFrom(from.resultcontacts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_myvcard()) {
      mutable_myvcard()->::com::mm::pb::po::MyVCard::MergeFrom(from.myvcard());
    }
    if (from.has_resultcode()) {
      set_resultcode(from.resultcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactsParamsPOJO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactsParamsPOJO::CopyFrom(const ContactsParamsPOJO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactsParamsPOJO::IsInitialized() const {

  return true;
}

void ContactsParamsPOJO::Swap(ContactsParamsPOJO* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(myvcard_, other->myvcard_);
    contactslist_.Swap(&other->contactslist_);
    resultcontacts_.Swap(&other->resultcontacts_);
    std::swap(resultcode_, other->resultcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactsParamsPOJO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactsParamsPOJO_descriptor_;
  metadata.reflection = ContactsParamsPOJO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Contacts::kNameFieldNumber;
const int Contacts::kPhoneFieldNumber;
#endif  // !_MSC_VER

Contacts::Contacts()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Contacts::InitAsDefaultInstance() {
  name_ = const_cast< ::com::mm::pb::po::ConName*>(&::com::mm::pb::po::ConName::default_instance());
}

Contacts::Contacts(const Contacts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Contacts::SharedCtor() {
  _cached_size_ = 0;
  name_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Contacts::~Contacts() {
  SharedDtor();
}

void Contacts::SharedDtor() {
  if (this != default_instance_) {
    delete name_;
  }
}

void Contacts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Contacts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Contacts_descriptor_;
}

const Contacts& Contacts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactsParamsPOJO_2eproto();
  return *default_instance_;
}

Contacts* Contacts::default_instance_ = NULL;

Contacts* Contacts::New() const {
  return new Contacts;
}

void Contacts::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != NULL) name_->::com::mm::pb::po::ConName::Clear();
    }
  }
  phone_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Contacts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.mm.pb.po.ConName name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_phone;
        break;
      }

      // repeated .com.mm.pb.po.ConPhone phone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_phone()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_phone;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Contacts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.mm.pb.po.ConName name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->name(), output);
  }

  // repeated .com.mm.pb.po.ConPhone phone = 2;
  for (int i = 0; i < this->phone_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->phone(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Contacts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.mm.pb.po.ConName name = 1;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->name(), target);
  }

  // repeated .com.mm.pb.po.ConPhone phone = 2;
  for (int i = 0; i < this->phone_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->phone(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Contacts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.mm.pb.po.ConName name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->name());
    }

  }
  // repeated .com.mm.pb.po.ConPhone phone = 2;
  total_size += 1 * this->phone_size();
  for (int i = 0; i < this->phone_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->phone(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Contacts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Contacts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Contacts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Contacts::MergeFrom(const Contacts& from) {
  GOOGLE_CHECK_NE(&from, this);
  phone_.MergeFrom(from.phone_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      mutable_name()->::com::mm::pb::po::ConName::MergeFrom(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Contacts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contacts::CopyFrom(const Contacts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contacts::IsInitialized() const {

  return true;
}

void Contacts::Swap(Contacts* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    phone_.Swap(&other->phone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Contacts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Contacts_descriptor_;
  metadata.reflection = Contacts_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConName::kFirstNameFieldNumber;
const int ConName::kLastNameFieldNumber;
#endif  // !_MSC_VER

ConName::ConName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConName::InitAsDefaultInstance() {
}

ConName::ConName(const ConName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConName::SharedCtor() {
  _cached_size_ = 0;
  firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConName::~ConName() {
  SharedDtor();
}

void ConName::SharedDtor() {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    delete firstname_;
  }
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    delete lastname_;
  }
  if (this != default_instance_) {
  }
}

void ConName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConName_descriptor_;
}

const ConName& ConName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactsParamsPOJO_2eproto();
  return *default_instance_;
}

ConName* ConName::default_instance_ = NULL;

ConName* ConName::New() const {
  return new ConName;
}

void ConName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_firstname()) {
      if (firstname_ != &::google::protobuf::internal::kEmptyString) {
        firstname_->clear();
      }
    }
    if (has_lastname()) {
      if (lastname_ != &::google::protobuf::internal::kEmptyString) {
        lastname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string firstName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->firstname().data(), this->firstname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lastName;
        break;
      }

      // optional string lastName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastname().data(), this->lastname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string firstName = 1;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->firstname(), output);
  }

  // optional string lastName = 2;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lastname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string firstName = 1;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->firstname().data(), this->firstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->firstname(), target);
  }

  // optional string lastName = 2;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lastname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string firstName = 1;
    if (has_firstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstname());
    }

    // optional string lastName = 2;
    if (has_lastname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConName::MergeFrom(const ConName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstname()) {
      set_firstname(from.firstname());
    }
    if (from.has_lastname()) {
      set_lastname(from.lastname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConName::CopyFrom(const ConName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConName::IsInitialized() const {

  return true;
}

void ConName::Swap(ConName* other) {
  if (other != this) {
    std::swap(firstname_, other->firstname_);
    std::swap(lastname_, other->lastname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConName_descriptor_;
  metadata.reflection = ConName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConPhone::kTypeFieldNumber;
const int ConPhone::kValueFieldNumber;
#endif  // !_MSC_VER

ConPhone::ConPhone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConPhone::InitAsDefaultInstance() {
}

ConPhone::ConPhone(const ConPhone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConPhone::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConPhone::~ConPhone() {
  SharedDtor();
}

void ConPhone::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ConPhone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConPhone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConPhone_descriptor_;
}

const ConPhone& ConPhone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactsParamsPOJO_2eproto();
  return *default_instance_;
}

ConPhone* ConPhone::default_instance_ = NULL;

ConPhone* ConPhone::New() const {
  return new ConPhone;
}

void ConPhone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConPhone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConPhone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConPhone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConPhone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConPhone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConPhone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConPhone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConPhone::MergeFrom(const ConPhone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConPhone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConPhone::CopyFrom(const ConPhone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConPhone::IsInitialized() const {

  return true;
}

void ConPhone::Swap(ConPhone* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConPhone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConPhone_descriptor_;
  metadata.reflection = ConPhone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResultContacts::kNicknameFieldNumber;
const int ResultContacts::kPhoneFieldNumber;
const int ResultContacts::kFaceUrlFieldNumber;
const int ResultContacts::kOtherIdFieldNumber;
const int ResultContacts::kUserNameFieldNumber;
const int ResultContacts::kStatusFieldNumber;
const int ResultContacts::kNameFieldNumber;
#endif  // !_MSC_VER

ResultContacts::ResultContacts()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultContacts::InitAsDefaultInstance() {
  name_ = const_cast< ::com::mm::pb::po::ConName*>(&::com::mm::pb::po::ConName::default_instance());
}

ResultContacts::ResultContacts(const ResultContacts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultContacts::SharedCtor() {
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  face_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  otherid_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  name_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultContacts::~ResultContacts() {
  SharedDtor();
}

void ResultContacts::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (face_url_ != &::google::protobuf::internal::kEmptyString) {
    delete face_url_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
    delete name_;
  }
}

void ResultContacts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultContacts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultContacts_descriptor_;
}

const ResultContacts& ResultContacts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactsParamsPOJO_2eproto();
  return *default_instance_;
}

ResultContacts* ResultContacts::default_instance_ = NULL;

ResultContacts* ResultContacts::New() const {
  return new ResultContacts;
}

void ResultContacts::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_face_url()) {
      if (face_url_ != &::google::protobuf::internal::kEmptyString) {
        face_url_->clear();
      }
    }
    otherid_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    status_ = 0;
    if (has_name()) {
      if (name_ != NULL) name_->::com::mm::pb::po::ConName::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultContacts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nickname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_phone;
        break;
      }

      // optional string phone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_face_url;
        break;
      }

      // optional string face_url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_face_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_face_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->face_url().data(), this->face_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_otherId;
        break;
      }

      // optional int32 otherId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otherId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &otherid_)));
          set_has_otherid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_userName;
        break;
      }

      // optional string userName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional int32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional .com.mm.pb.po.ConName name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultContacts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nickname(), output);
  }

  // optional string phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->phone(), output);
  }

  // optional string face_url = 3;
  if (has_face_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face_url().data(), this->face_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->face_url(), output);
  }

  // optional int32 otherId = 4;
  if (has_otherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->otherid(), output);
  }

  // optional string userName = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->username(), output);
  }

  // optional int32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->status(), output);
  }

  // optional .com.mm.pb.po.ConName name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultContacts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nickname(), target);
  }

  // optional string phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phone(), target);
  }

  // optional string face_url = 3;
  if (has_face_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face_url().data(), this->face_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->face_url(), target);
  }

  // optional int32 otherId = 4;
  if (has_otherid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->otherid(), target);
  }

  // optional string userName = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->username(), target);
  }

  // optional int32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->status(), target);
  }

  // optional .com.mm.pb.po.ConName name = 7;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultContacts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string phone = 2;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string face_url = 3;
    if (has_face_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->face_url());
    }

    // optional int32 otherId = 4;
    if (has_otherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->otherid());
    }

    // optional string userName = 5;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional int32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional .com.mm.pb.po.ConName name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultContacts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultContacts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultContacts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultContacts::MergeFrom(const ResultContacts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_face_url()) {
      set_face_url(from.face_url());
    }
    if (from.has_otherid()) {
      set_otherid(from.otherid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_name()) {
      mutable_name()->::com::mm::pb::po::ConName::MergeFrom(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultContacts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultContacts::CopyFrom(const ResultContacts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultContacts::IsInitialized() const {

  return true;
}

void ResultContacts::Swap(ResultContacts* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(phone_, other->phone_);
    std::swap(face_url_, other->face_url_);
    std::swap(otherid_, other->otherid_);
    std::swap(username_, other->username_);
    std::swap(status_, other->status_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultContacts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultContacts_descriptor_;
  metadata.reflection = ResultContacts_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MyVCard::kUsernameFieldNumber;
const int MyVCard::kPhoneFieldNumber;
const int MyVCard::kEmailFieldNumber;
#endif  // !_MSC_VER

MyVCard::MyVCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MyVCard::InitAsDefaultInstance() {
}

MyVCard::MyVCard(const MyVCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MyVCard::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyVCard::~MyVCard() {
  SharedDtor();
}

void MyVCard::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (this != default_instance_) {
  }
}

void MyVCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyVCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyVCard_descriptor_;
}

const MyVCard& MyVCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ContactsParamsPOJO_2eproto();
  return *default_instance_;
}

MyVCard* MyVCard::default_instance_ = NULL;

MyVCard* MyVCard::New() const {
  return new MyVCard;
}

void MyVCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyVCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_phone;
        break;
      }

      // optional string phone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_email;
        break;
      }

      // optional string email = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MyVCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // optional string phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->phone(), output);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->email(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MyVCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phone(), target);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MyVCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string phone = 2;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional string email = 3;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyVCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyVCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyVCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyVCard::MergeFrom(const MyVCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyVCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyVCard::CopyFrom(const MyVCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyVCard::IsInitialized() const {

  return true;
}

void MyVCard::Swap(MyVCard* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(phone_, other->phone_);
    std::swap(email_, other->email_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyVCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyVCard_descriptor_;
  metadata.reflection = MyVCard_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace po
}  // namespace pb
}  // namespace mm
}  // namespace com

// @@protoc_insertion_point(global_scope)
