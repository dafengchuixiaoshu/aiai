// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UsersFriendProPOJO.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UsersFriendProPOJO.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace mm {
namespace pb {
namespace po {

namespace {

const ::google::protobuf::Descriptor* UsersFriendProPOJO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UsersFriendProPOJO_reflection_ = NULL;
const ::google::protobuf::Descriptor* UsersFriendsPOJO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UsersFriendsPOJO_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UsersFriendProPOJO_2eproto() {
  protobuf_AddDesc_UsersFriendProPOJO_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UsersFriendProPOJO.proto");
  GOOGLE_CHECK(file != NULL);
  UsersFriendProPOJO_descriptor_ = file->message_type(0);
  static const int UsersFriendProPOJO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsersFriendProPOJO, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsersFriendProPOJO, list_),
  };
  UsersFriendProPOJO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UsersFriendProPOJO_descriptor_,
      UsersFriendProPOJO::default_instance_,
      UsersFriendProPOJO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsersFriendProPOJO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsersFriendProPOJO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UsersFriendProPOJO));
  UsersFriendsPOJO_descriptor_ = file->message_type(1);
  static const int UsersFriendsPOJO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsersFriendsPOJO, friendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsersFriendsPOJO, subname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsersFriendsPOJO, isshare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsersFriendsPOJO, issave_),
  };
  UsersFriendsPOJO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UsersFriendsPOJO_descriptor_,
      UsersFriendsPOJO::default_instance_,
      UsersFriendsPOJO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsersFriendsPOJO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsersFriendsPOJO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UsersFriendsPOJO));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UsersFriendProPOJO_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UsersFriendProPOJO_descriptor_, &UsersFriendProPOJO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UsersFriendsPOJO_descriptor_, &UsersFriendsPOJO::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UsersFriendProPOJO_2eproto() {
  delete UsersFriendProPOJO::default_instance_;
  delete UsersFriendProPOJO_reflection_;
  delete UsersFriendsPOJO::default_instance_;
  delete UsersFriendsPOJO_reflection_;
}

void protobuf_AddDesc_UsersFriendProPOJO_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030UsersFriendProPOJO.proto\022\014com.mm.pb.po"
    "\"O\n\022UsersFriendProPOJO\022\013\n\003uid\030\001 \001(\005\022,\n\004l"
    "ist\030\002 \003(\0132\036.com.mm.pb.po.UsersFriendsPOJ"
    "O\"V\n\020UsersFriendsPOJO\022\020\n\010friendId\030\001 \001(\t\022"
    "\017\n\007subname\030\002 \001(\t\022\017\n\007isshare\030\003 \001(\005\022\016\n\006iss"
    "ave\030\004 \001(\005B\024B\022UsersFriendProPOJO", 231);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UsersFriendProPOJO.proto", &protobuf_RegisterTypes);
  UsersFriendProPOJO::default_instance_ = new UsersFriendProPOJO();
  UsersFriendsPOJO::default_instance_ = new UsersFriendsPOJO();
  UsersFriendProPOJO::default_instance_->InitAsDefaultInstance();
  UsersFriendsPOJO::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UsersFriendProPOJO_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UsersFriendProPOJO_2eproto {
  StaticDescriptorInitializer_UsersFriendProPOJO_2eproto() {
    protobuf_AddDesc_UsersFriendProPOJO_2eproto();
  }
} static_descriptor_initializer_UsersFriendProPOJO_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UsersFriendProPOJO::kUidFieldNumber;
const int UsersFriendProPOJO::kListFieldNumber;
#endif  // !_MSC_VER

UsersFriendProPOJO::UsersFriendProPOJO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UsersFriendProPOJO::InitAsDefaultInstance() {
}

UsersFriendProPOJO::UsersFriendProPOJO(const UsersFriendProPOJO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UsersFriendProPOJO::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UsersFriendProPOJO::~UsersFriendProPOJO() {
  SharedDtor();
}

void UsersFriendProPOJO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UsersFriendProPOJO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UsersFriendProPOJO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UsersFriendProPOJO_descriptor_;
}

const UsersFriendProPOJO& UsersFriendProPOJO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsersFriendProPOJO_2eproto();
  return *default_instance_;
}

UsersFriendProPOJO* UsersFriendProPOJO::default_instance_ = NULL;

UsersFriendProPOJO* UsersFriendProPOJO::New() const {
  return new UsersFriendProPOJO;
}

void UsersFriendProPOJO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UsersFriendProPOJO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .com.mm.pb.po.UsersFriendsPOJO list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UsersFriendProPOJO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // repeated .com.mm.pb.po.UsersFriendsPOJO list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UsersFriendProPOJO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // repeated .com.mm.pb.po.UsersFriendsPOJO list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UsersFriendProPOJO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  // repeated .com.mm.pb.po.UsersFriendsPOJO list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UsersFriendProPOJO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UsersFriendProPOJO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UsersFriendProPOJO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UsersFriendProPOJO::MergeFrom(const UsersFriendProPOJO& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UsersFriendProPOJO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsersFriendProPOJO::CopyFrom(const UsersFriendProPOJO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsersFriendProPOJO::IsInitialized() const {

  return true;
}

void UsersFriendProPOJO::Swap(UsersFriendProPOJO* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UsersFriendProPOJO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UsersFriendProPOJO_descriptor_;
  metadata.reflection = UsersFriendProPOJO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UsersFriendsPOJO::kFriendIdFieldNumber;
const int UsersFriendsPOJO::kSubnameFieldNumber;
const int UsersFriendsPOJO::kIsshareFieldNumber;
const int UsersFriendsPOJO::kIssaveFieldNumber;
#endif  // !_MSC_VER

UsersFriendsPOJO::UsersFriendsPOJO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UsersFriendsPOJO::InitAsDefaultInstance() {
}

UsersFriendsPOJO::UsersFriendsPOJO(const UsersFriendsPOJO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UsersFriendsPOJO::SharedCtor() {
  _cached_size_ = 0;
  friendid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isshare_ = 0;
  issave_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UsersFriendsPOJO::~UsersFriendsPOJO() {
  SharedDtor();
}

void UsersFriendsPOJO::SharedDtor() {
  if (friendid_ != &::google::protobuf::internal::kEmptyString) {
    delete friendid_;
  }
  if (subname_ != &::google::protobuf::internal::kEmptyString) {
    delete subname_;
  }
  if (this != default_instance_) {
  }
}

void UsersFriendsPOJO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UsersFriendsPOJO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UsersFriendsPOJO_descriptor_;
}

const UsersFriendsPOJO& UsersFriendsPOJO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UsersFriendProPOJO_2eproto();
  return *default_instance_;
}

UsersFriendsPOJO* UsersFriendsPOJO::default_instance_ = NULL;

UsersFriendsPOJO* UsersFriendsPOJO::New() const {
  return new UsersFriendsPOJO;
}

void UsersFriendsPOJO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_friendid()) {
      if (friendid_ != &::google::protobuf::internal::kEmptyString) {
        friendid_->clear();
      }
    }
    if (has_subname()) {
      if (subname_ != &::google::protobuf::internal::kEmptyString) {
        subname_->clear();
      }
    }
    isshare_ = 0;
    issave_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UsersFriendsPOJO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string friendId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendid().data(), this->friendid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subname;
        break;
      }

      // optional string subname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subname().data(), this->subname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isshare;
        break;
      }

      // optional int32 isshare = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isshare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isshare_)));
          set_has_isshare();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_issave;
        break;
      }

      // optional int32 issave = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_issave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issave_)));
          set_has_issave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UsersFriendsPOJO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string friendId = 1;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendid().data(), this->friendid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->friendid(), output);
  }

  // optional string subname = 2;
  if (has_subname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subname().data(), this->subname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->subname(), output);
  }

  // optional int32 isshare = 3;
  if (has_isshare()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isshare(), output);
  }

  // optional int32 issave = 4;
  if (has_issave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->issave(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UsersFriendsPOJO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string friendId = 1;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendid().data(), this->friendid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->friendid(), target);
  }

  // optional string subname = 2;
  if (has_subname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subname().data(), this->subname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->subname(), target);
  }

  // optional int32 isshare = 3;
  if (has_isshare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isshare(), target);
  }

  // optional int32 issave = 4;
  if (has_issave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->issave(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UsersFriendsPOJO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string friendId = 1;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendid());
    }

    // optional string subname = 2;
    if (has_subname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subname());
    }

    // optional int32 isshare = 3;
    if (has_isshare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isshare());
    }

    // optional int32 issave = 4;
    if (has_issave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issave());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UsersFriendsPOJO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UsersFriendsPOJO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UsersFriendsPOJO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UsersFriendsPOJO::MergeFrom(const UsersFriendsPOJO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
    if (from.has_subname()) {
      set_subname(from.subname());
    }
    if (from.has_isshare()) {
      set_isshare(from.isshare());
    }
    if (from.has_issave()) {
      set_issave(from.issave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UsersFriendsPOJO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsersFriendsPOJO::CopyFrom(const UsersFriendsPOJO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsersFriendsPOJO::IsInitialized() const {

  return true;
}

void UsersFriendsPOJO::Swap(UsersFriendsPOJO* other) {
  if (other != this) {
    std::swap(friendid_, other->friendid_);
    std::swap(subname_, other->subname_);
    std::swap(isshare_, other->isshare_);
    std::swap(issave_, other->issave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UsersFriendsPOJO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UsersFriendsPOJO_descriptor_;
  metadata.reflection = UsersFriendsPOJO_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace po
}  // namespace pb
}  // namespace mm
}  // namespace com

// @@protoc_insertion_point(global_scope)
