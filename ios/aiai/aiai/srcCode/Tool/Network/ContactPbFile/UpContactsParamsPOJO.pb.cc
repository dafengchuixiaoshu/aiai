// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UpContactsParamsPOJO.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UpContactsParamsPOJO.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace mm {
namespace pb {
namespace po {

namespace {

const ::google::protobuf::Descriptor* UpContactsParamsPOJO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpContactsParamsPOJO_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpContacts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpContacts_reflection_ = NULL;
const ::google::protobuf::Descriptor* Phone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Phone_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UpContactsParamsPOJO_2eproto() {
  protobuf_AddDesc_UpContactsParamsPOJO_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UpContactsParamsPOJO.proto");
  GOOGLE_CHECK(file != NULL);
  UpContactsParamsPOJO_descriptor_ = file->message_type(0);
  static const int UpContactsParamsPOJO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpContactsParamsPOJO, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpContactsParamsPOJO, resultcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpContactsParamsPOJO, phones_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpContactsParamsPOJO, version_),
  };
  UpContactsParamsPOJO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpContactsParamsPOJO_descriptor_,
      UpContactsParamsPOJO::default_instance_,
      UpContactsParamsPOJO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpContactsParamsPOJO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpContactsParamsPOJO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpContactsParamsPOJO));
  UpContacts_descriptor_ = file->message_type(1);
  static const int UpContacts_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpContacts, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpContacts, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpContacts, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpContacts, p_),
  };
  UpContacts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpContacts_descriptor_,
      UpContacts::default_instance_,
      UpContacts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpContacts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpContacts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpContacts));
  Phone_descriptor_ = file->message_type(2);
  static const int Phone_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phone, pn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phone, pt_),
  };
  Phone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Phone_descriptor_,
      Phone::default_instance_,
      Phone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Phone));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UpContactsParamsPOJO_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpContactsParamsPOJO_descriptor_, &UpContactsParamsPOJO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpContacts_descriptor_, &UpContacts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Phone_descriptor_, &Phone::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UpContactsParamsPOJO_2eproto() {
  delete UpContactsParamsPOJO::default_instance_;
  delete UpContactsParamsPOJO_reflection_;
  delete UpContacts::default_instance_;
  delete UpContacts_reflection_;
  delete Phone::default_instance_;
  delete Phone_reflection_;
}

void protobuf_AddDesc_UpContactsParamsPOJO_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032UpContactsParamsPOJO.proto\022\014com.mm.pb."
    "po\"r\n\024UpContactsParamsPOJO\022\013\n\003uid\030\001 \001(\005\022"
    "\022\n\nresultCode\030\002 \001(\005\022(\n\006phones\030\003 \003(\0132\030.co"
    "m.mm.pb.po.UpContacts\022\017\n\007version\030\004 \001(\005\"N"
    "\n\nUpContacts\022\n\n\002id\030\001 \001(\005\022\t\n\001n\030\002 \001(\t\022\t\n\001t"
    "\030\003 \001(\005\022\036\n\001p\030\004 \003(\0132\023.com.mm.pb.po.Phone\"\037"
    "\n\005Phone\022\n\n\002pn\030\001 \001(\003\022\n\n\002pt\030\002 \001(\005B\026B\024UpCon"
    "tactsParamsPOJO", 295);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UpContactsParamsPOJO.proto", &protobuf_RegisterTypes);
  UpContactsParamsPOJO::default_instance_ = new UpContactsParamsPOJO();
  UpContacts::default_instance_ = new UpContacts();
  Phone::default_instance_ = new Phone();
  UpContactsParamsPOJO::default_instance_->InitAsDefaultInstance();
  UpContacts::default_instance_->InitAsDefaultInstance();
  Phone::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UpContactsParamsPOJO_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UpContactsParamsPOJO_2eproto {
  StaticDescriptorInitializer_UpContactsParamsPOJO_2eproto() {
    protobuf_AddDesc_UpContactsParamsPOJO_2eproto();
  }
} static_descriptor_initializer_UpContactsParamsPOJO_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UpContactsParamsPOJO::kUidFieldNumber;
const int UpContactsParamsPOJO::kResultCodeFieldNumber;
const int UpContactsParamsPOJO::kPhonesFieldNumber;
const int UpContactsParamsPOJO::kVersionFieldNumber;
#endif  // !_MSC_VER

UpContactsParamsPOJO::UpContactsParamsPOJO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpContactsParamsPOJO::InitAsDefaultInstance() {
}

UpContactsParamsPOJO::UpContactsParamsPOJO(const UpContactsParamsPOJO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpContactsParamsPOJO::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  resultcode_ = 0;
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpContactsParamsPOJO::~UpContactsParamsPOJO() {
  SharedDtor();
}

void UpContactsParamsPOJO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpContactsParamsPOJO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpContactsParamsPOJO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpContactsParamsPOJO_descriptor_;
}

const UpContactsParamsPOJO& UpContactsParamsPOJO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UpContactsParamsPOJO_2eproto();
  return *default_instance_;
}

UpContactsParamsPOJO* UpContactsParamsPOJO::default_instance_ = NULL;

UpContactsParamsPOJO* UpContactsParamsPOJO::New() const {
  return new UpContactsParamsPOJO;
}

void UpContactsParamsPOJO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    resultcode_ = 0;
    version_ = 0;
  }
  phones_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpContactsParamsPOJO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resultCode;
        break;
      }

      // optional int32 resultCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resultCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultcode_)));
          set_has_resultcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phones;
        break;
      }

      // repeated .com.mm.pb.po.UpContacts phones = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phones:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_phones()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phones;
        if (input->ExpectTag(32)) goto parse_version;
        break;
      }

      // optional int32 version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpContactsParamsPOJO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 resultCode = 2;
  if (has_resultcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resultcode(), output);
  }

  // repeated .com.mm.pb.po.UpContacts phones = 3;
  for (int i = 0; i < this->phones_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->phones(i), output);
  }

  // optional int32 version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpContactsParamsPOJO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 resultCode = 2;
  if (has_resultcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resultcode(), target);
  }

  // repeated .com.mm.pb.po.UpContacts phones = 3;
  for (int i = 0; i < this->phones_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->phones(i), target);
  }

  // optional int32 version = 4;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpContactsParamsPOJO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 resultCode = 2;
    if (has_resultcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resultcode());
    }

    // optional int32 version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  // repeated .com.mm.pb.po.UpContacts phones = 3;
  total_size += 1 * this->phones_size();
  for (int i = 0; i < this->phones_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->phones(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpContactsParamsPOJO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpContactsParamsPOJO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpContactsParamsPOJO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpContactsParamsPOJO::MergeFrom(const UpContactsParamsPOJO& from) {
  GOOGLE_CHECK_NE(&from, this);
  phones_.MergeFrom(from.phones_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_resultcode()) {
      set_resultcode(from.resultcode());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpContactsParamsPOJO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpContactsParamsPOJO::CopyFrom(const UpContactsParamsPOJO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpContactsParamsPOJO::IsInitialized() const {

  return true;
}

void UpContactsParamsPOJO::Swap(UpContactsParamsPOJO* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(resultcode_, other->resultcode_);
    phones_.Swap(&other->phones_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpContactsParamsPOJO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpContactsParamsPOJO_descriptor_;
  metadata.reflection = UpContactsParamsPOJO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpContacts::kIdFieldNumber;
const int UpContacts::kNFieldNumber;
const int UpContacts::kTFieldNumber;
const int UpContacts::kPFieldNumber;
#endif  // !_MSC_VER

UpContacts::UpContacts()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpContacts::InitAsDefaultInstance() {
}

UpContacts::UpContacts(const UpContacts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpContacts::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  n_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  t_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpContacts::~UpContacts() {
  SharedDtor();
}

void UpContacts::SharedDtor() {
  if (n_ != &::google::protobuf::internal::kEmptyString) {
    delete n_;
  }
  if (this != default_instance_) {
  }
}

void UpContacts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpContacts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpContacts_descriptor_;
}

const UpContacts& UpContacts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UpContactsParamsPOJO_2eproto();
  return *default_instance_;
}

UpContacts* UpContacts::default_instance_ = NULL;

UpContacts* UpContacts::New() const {
  return new UpContacts;
}

void UpContacts::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_n()) {
      if (n_ != &::google::protobuf::internal::kEmptyString) {
        n_->clear();
      }
    }
    t_ = 0;
  }
  p_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpContacts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_n;
        break;
      }

      // optional string n = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_n:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_n()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->n().data(), this->n().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_t;
        break;
      }

      // optional int32 t = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_p;
        break;
      }

      // repeated .com.mm.pb.po.Phone p = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_p:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_p()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_p;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpContacts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string n = 2;
  if (has_n()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->n().data(), this->n().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->n(), output);
  }

  // optional int32 t = 3;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->t(), output);
  }

  // repeated .com.mm.pb.po.Phone p = 4;
  for (int i = 0; i < this->p_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->p(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpContacts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string n = 2;
  if (has_n()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->n().data(), this->n().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->n(), target);
  }

  // optional int32 t = 3;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->t(), target);
  }

  // repeated .com.mm.pb.po.Phone p = 4;
  for (int i = 0; i < this->p_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->p(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpContacts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string n = 2;
    if (has_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->n());
    }

    // optional int32 t = 3;
    if (has_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->t());
    }

  }
  // repeated .com.mm.pb.po.Phone p = 4;
  total_size += 1 * this->p_size();
  for (int i = 0; i < this->p_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->p(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpContacts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpContacts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpContacts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpContacts::MergeFrom(const UpContacts& from) {
  GOOGLE_CHECK_NE(&from, this);
  p_.MergeFrom(from.p_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_t()) {
      set_t(from.t());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpContacts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpContacts::CopyFrom(const UpContacts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpContacts::IsInitialized() const {

  return true;
}

void UpContacts::Swap(UpContacts* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(n_, other->n_);
    std::swap(t_, other->t_);
    p_.Swap(&other->p_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpContacts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpContacts_descriptor_;
  metadata.reflection = UpContacts_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Phone::kPnFieldNumber;
const int Phone::kPtFieldNumber;
#endif  // !_MSC_VER

Phone::Phone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Phone::InitAsDefaultInstance() {
}

Phone::Phone(const Phone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Phone::SharedCtor() {
  _cached_size_ = 0;
  pn_ = GOOGLE_LONGLONG(0);
  pt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Phone::~Phone() {
  SharedDtor();
}

void Phone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Phone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Phone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Phone_descriptor_;
}

const Phone& Phone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UpContactsParamsPOJO_2eproto();
  return *default_instance_;
}

Phone* Phone::default_instance_ = NULL;

Phone* Phone::New() const {
  return new Phone;
}

void Phone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pn_ = GOOGLE_LONGLONG(0);
    pt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Phone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pn_)));
          set_has_pn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pt;
        break;
      }

      // optional int32 pt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pt_)));
          set_has_pt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Phone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 pn = 1;
  if (has_pn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pn(), output);
  }

  // optional int32 pt = 2;
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Phone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 pn = 1;
  if (has_pn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pn(), target);
  }

  // optional int32 pt = 2;
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Phone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 pn = 1;
    if (has_pn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pn());
    }

    // optional int32 pt = 2;
    if (has_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Phone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Phone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Phone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Phone::MergeFrom(const Phone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pn()) {
      set_pn(from.pn());
    }
    if (from.has_pt()) {
      set_pt(from.pt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Phone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Phone::CopyFrom(const Phone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Phone::IsInitialized() const {

  return true;
}

void Phone::Swap(Phone* other) {
  if (other != this) {
    std::swap(pn_, other->pn_);
    std::swap(pt_, other->pt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Phone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Phone_descriptor_;
  metadata.reflection = Phone_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace po
}  // namespace pb
}  // namespace mm
}  // namespace com

// @@protoc_insertion_point(global_scope)
