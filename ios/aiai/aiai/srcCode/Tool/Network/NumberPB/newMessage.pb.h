// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: newMessage.proto

#ifndef PROTOBUF_newMessage_2eproto__INCLUDED
#define PROTOBUF_newMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tutorial {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_newMessage_2eproto();
void protobuf_AssignDesc_newMessage_2eproto();
void protobuf_ShutdownFile_newMessage_2eproto();

class NewMessageList;
class NewMessageList_NewMessage;

// ===================================================================

class NewMessageList_NewMessage : public ::google::protobuf::Message {
 public:
  NewMessageList_NewMessage();
  virtual ~NewMessageList_NewMessage();

  NewMessageList_NewMessage(const NewMessageList_NewMessage& from);

  inline NewMessageList_NewMessage& operator=(const NewMessageList_NewMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewMessageList_NewMessage& default_instance();

  void Swap(NewMessageList_NewMessage* other);

  // implements Message ----------------------------------------------

  NewMessageList_NewMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewMessageList_NewMessage& from);
  void MergeFrom(const NewMessageList_NewMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nickName = 1;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 1;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string face = 2;
  inline bool has_face() const;
  inline void clear_face();
  static const int kFaceFieldNumber = 2;
  inline const ::std::string& face() const;
  inline void set_face(const ::std::string& value);
  inline void set_face(const char* value);
  inline void set_face(const char* value, size_t size);
  inline ::std::string* mutable_face();
  inline ::std::string* release_face();
  inline void set_allocated_face(::std::string* face);

  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int64 sendTime = 4;
  inline bool has_sendtime() const;
  inline void clear_sendtime();
  static const int kSendTimeFieldNumber = 4;
  inline ::google::protobuf::int64 sendtime() const;
  inline void set_sendtime(::google::protobuf::int64 value);

  // optional string firstKey = 5;
  inline bool has_firstkey() const;
  inline void clear_firstkey();
  static const int kFirstKeyFieldNumber = 5;
  inline const ::std::string& firstkey() const;
  inline void set_firstkey(const ::std::string& value);
  inline void set_firstkey(const char* value);
  inline void set_firstkey(const char* value, size_t size);
  inline ::std::string* mutable_firstkey();
  inline ::std::string* release_firstkey();
  inline void set_allocated_firstkey(::std::string* firstkey);

  // optional int32 sid = 6;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 6;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);

  // optional string seq = 7;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 7;
  inline const ::std::string& seq() const;
  inline void set_seq(const ::std::string& value);
  inline void set_seq(const char* value);
  inline void set_seq(const char* value, size_t size);
  inline ::std::string* mutable_seq();
  inline ::std::string* release_seq();
  inline void set_allocated_seq(::std::string* seq);

  // optional int32 uid = 8;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 8;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional string faceVideo = 9;
  inline bool has_facevideo() const;
  inline void clear_facevideo();
  static const int kFaceVideoFieldNumber = 9;
  inline const ::std::string& facevideo() const;
  inline void set_facevideo(const ::std::string& value);
  inline void set_facevideo(const char* value);
  inline void set_facevideo(const char* value, size_t size);
  inline ::std::string* mutable_facevideo();
  inline ::std::string* release_facevideo();
  inline void set_allocated_facevideo(::std::string* facevideo);

  // @@protoc_insertion_point(class_scope:tutorial.NewMessageList.NewMessage)
 private:
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_face();
  inline void clear_has_face();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_sendtime();
  inline void clear_has_sendtime();
  inline void set_has_firstkey();
  inline void clear_has_firstkey();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_facevideo();
  inline void clear_has_facevideo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::std::string* face_;
  ::std::string* content_;
  ::google::protobuf::int64 sendtime_;
  ::std::string* firstkey_;
  ::std::string* seq_;
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 uid_;
  ::std::string* facevideo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_newMessage_2eproto();
  friend void protobuf_AssignDesc_newMessage_2eproto();
  friend void protobuf_ShutdownFile_newMessage_2eproto();

  void InitAsDefaultInstance();
  static NewMessageList_NewMessage* default_instance_;
};
// -------------------------------------------------------------------

class NewMessageList : public ::google::protobuf::Message {
 public:
  NewMessageList();
  virtual ~NewMessageList();

  NewMessageList(const NewMessageList& from);

  inline NewMessageList& operator=(const NewMessageList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewMessageList& default_instance();

  void Swap(NewMessageList* other);

  // implements Message ----------------------------------------------

  NewMessageList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewMessageList& from);
  void MergeFrom(const NewMessageList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NewMessageList_NewMessage NewMessage;

  // accessors -------------------------------------------------------

  // repeated .tutorial.NewMessageList.NewMessage newMessage = 1;
  inline int newmessage_size() const;
  inline void clear_newmessage();
  static const int kNewMessageFieldNumber = 1;
  inline const ::tutorial::NewMessageList_NewMessage& newmessage(int index) const;
  inline ::tutorial::NewMessageList_NewMessage* mutable_newmessage(int index);
  inline ::tutorial::NewMessageList_NewMessage* add_newmessage();
  inline const ::google::protobuf::RepeatedPtrField< ::tutorial::NewMessageList_NewMessage >&
      newmessage() const;
  inline ::google::protobuf::RepeatedPtrField< ::tutorial::NewMessageList_NewMessage >*
      mutable_newmessage();

  // @@protoc_insertion_point(class_scope:tutorial.NewMessageList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::tutorial::NewMessageList_NewMessage > newmessage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_newMessage_2eproto();
  friend void protobuf_AssignDesc_newMessage_2eproto();
  friend void protobuf_ShutdownFile_newMessage_2eproto();

  void InitAsDefaultInstance();
  static NewMessageList* default_instance_;
};
// ===================================================================


// ===================================================================

// NewMessageList_NewMessage

// optional string nickName = 1;
inline bool NewMessageList_NewMessage::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewMessageList_NewMessage::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewMessageList_NewMessage::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewMessageList_NewMessage::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& NewMessageList_NewMessage::nickname() const {
  return *nickname_;
}
inline void NewMessageList_NewMessage::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void NewMessageList_NewMessage::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void NewMessageList_NewMessage::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NewMessageList_NewMessage::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* NewMessageList_NewMessage::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NewMessageList_NewMessage::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string face = 2;
inline bool NewMessageList_NewMessage::has_face() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewMessageList_NewMessage::set_has_face() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewMessageList_NewMessage::clear_has_face() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewMessageList_NewMessage::clear_face() {
  if (face_ != &::google::protobuf::internal::kEmptyString) {
    face_->clear();
  }
  clear_has_face();
}
inline const ::std::string& NewMessageList_NewMessage::face() const {
  return *face_;
}
inline void NewMessageList_NewMessage::set_face(const ::std::string& value) {
  set_has_face();
  if (face_ == &::google::protobuf::internal::kEmptyString) {
    face_ = new ::std::string;
  }
  face_->assign(value);
}
inline void NewMessageList_NewMessage::set_face(const char* value) {
  set_has_face();
  if (face_ == &::google::protobuf::internal::kEmptyString) {
    face_ = new ::std::string;
  }
  face_->assign(value);
}
inline void NewMessageList_NewMessage::set_face(const char* value, size_t size) {
  set_has_face();
  if (face_ == &::google::protobuf::internal::kEmptyString) {
    face_ = new ::std::string;
  }
  face_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NewMessageList_NewMessage::mutable_face() {
  set_has_face();
  if (face_ == &::google::protobuf::internal::kEmptyString) {
    face_ = new ::std::string;
  }
  return face_;
}
inline ::std::string* NewMessageList_NewMessage::release_face() {
  clear_has_face();
  if (face_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = face_;
    face_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NewMessageList_NewMessage::set_allocated_face(::std::string* face) {
  if (face_ != &::google::protobuf::internal::kEmptyString) {
    delete face_;
  }
  if (face) {
    set_has_face();
    face_ = face;
  } else {
    clear_has_face();
    face_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 3;
inline bool NewMessageList_NewMessage::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewMessageList_NewMessage::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewMessageList_NewMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewMessageList_NewMessage::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& NewMessageList_NewMessage::content() const {
  return *content_;
}
inline void NewMessageList_NewMessage::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void NewMessageList_NewMessage::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void NewMessageList_NewMessage::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NewMessageList_NewMessage::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* NewMessageList_NewMessage::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NewMessageList_NewMessage::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 sendTime = 4;
inline bool NewMessageList_NewMessage::has_sendtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewMessageList_NewMessage::set_has_sendtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewMessageList_NewMessage::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewMessageList_NewMessage::clear_sendtime() {
  sendtime_ = GOOGLE_LONGLONG(0);
  clear_has_sendtime();
}
inline ::google::protobuf::int64 NewMessageList_NewMessage::sendtime() const {
  return sendtime_;
}
inline void NewMessageList_NewMessage::set_sendtime(::google::protobuf::int64 value) {
  set_has_sendtime();
  sendtime_ = value;
}

// optional string firstKey = 5;
inline bool NewMessageList_NewMessage::has_firstkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewMessageList_NewMessage::set_has_firstkey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewMessageList_NewMessage::clear_has_firstkey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewMessageList_NewMessage::clear_firstkey() {
  if (firstkey_ != &::google::protobuf::internal::kEmptyString) {
    firstkey_->clear();
  }
  clear_has_firstkey();
}
inline const ::std::string& NewMessageList_NewMessage::firstkey() const {
  return *firstkey_;
}
inline void NewMessageList_NewMessage::set_firstkey(const ::std::string& value) {
  set_has_firstkey();
  if (firstkey_ == &::google::protobuf::internal::kEmptyString) {
    firstkey_ = new ::std::string;
  }
  firstkey_->assign(value);
}
inline void NewMessageList_NewMessage::set_firstkey(const char* value) {
  set_has_firstkey();
  if (firstkey_ == &::google::protobuf::internal::kEmptyString) {
    firstkey_ = new ::std::string;
  }
  firstkey_->assign(value);
}
inline void NewMessageList_NewMessage::set_firstkey(const char* value, size_t size) {
  set_has_firstkey();
  if (firstkey_ == &::google::protobuf::internal::kEmptyString) {
    firstkey_ = new ::std::string;
  }
  firstkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NewMessageList_NewMessage::mutable_firstkey() {
  set_has_firstkey();
  if (firstkey_ == &::google::protobuf::internal::kEmptyString) {
    firstkey_ = new ::std::string;
  }
  return firstkey_;
}
inline ::std::string* NewMessageList_NewMessage::release_firstkey() {
  clear_has_firstkey();
  if (firstkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = firstkey_;
    firstkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NewMessageList_NewMessage::set_allocated_firstkey(::std::string* firstkey) {
  if (firstkey_ != &::google::protobuf::internal::kEmptyString) {
    delete firstkey_;
  }
  if (firstkey) {
    set_has_firstkey();
    firstkey_ = firstkey;
  } else {
    clear_has_firstkey();
    firstkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sid = 6;
inline bool NewMessageList_NewMessage::has_sid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NewMessageList_NewMessage::set_has_sid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NewMessageList_NewMessage::clear_has_sid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NewMessageList_NewMessage::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
inline ::google::protobuf::int32 NewMessageList_NewMessage::sid() const {
  return sid_;
}
inline void NewMessageList_NewMessage::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
}

// optional string seq = 7;
inline bool NewMessageList_NewMessage::has_seq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NewMessageList_NewMessage::set_has_seq() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NewMessageList_NewMessage::clear_has_seq() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NewMessageList_NewMessage::clear_seq() {
  if (seq_ != &::google::protobuf::internal::kEmptyString) {
    seq_->clear();
  }
  clear_has_seq();
}
inline const ::std::string& NewMessageList_NewMessage::seq() const {
  return *seq_;
}
inline void NewMessageList_NewMessage::set_seq(const ::std::string& value) {
  set_has_seq();
  if (seq_ == &::google::protobuf::internal::kEmptyString) {
    seq_ = new ::std::string;
  }
  seq_->assign(value);
}
inline void NewMessageList_NewMessage::set_seq(const char* value) {
  set_has_seq();
  if (seq_ == &::google::protobuf::internal::kEmptyString) {
    seq_ = new ::std::string;
  }
  seq_->assign(value);
}
inline void NewMessageList_NewMessage::set_seq(const char* value, size_t size) {
  set_has_seq();
  if (seq_ == &::google::protobuf::internal::kEmptyString) {
    seq_ = new ::std::string;
  }
  seq_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NewMessageList_NewMessage::mutable_seq() {
  set_has_seq();
  if (seq_ == &::google::protobuf::internal::kEmptyString) {
    seq_ = new ::std::string;
  }
  return seq_;
}
inline ::std::string* NewMessageList_NewMessage::release_seq() {
  clear_has_seq();
  if (seq_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seq_;
    seq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NewMessageList_NewMessage::set_allocated_seq(::std::string* seq) {
  if (seq_ != &::google::protobuf::internal::kEmptyString) {
    delete seq_;
  }
  if (seq) {
    set_has_seq();
    seq_ = seq;
  } else {
    clear_has_seq();
    seq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 uid = 8;
inline bool NewMessageList_NewMessage::has_uid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NewMessageList_NewMessage::set_has_uid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NewMessageList_NewMessage::clear_has_uid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NewMessageList_NewMessage::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 NewMessageList_NewMessage::uid() const {
  return uid_;
}
inline void NewMessageList_NewMessage::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional string faceVideo = 9;
inline bool NewMessageList_NewMessage::has_facevideo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NewMessageList_NewMessage::set_has_facevideo() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NewMessageList_NewMessage::clear_has_facevideo() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NewMessageList_NewMessage::clear_facevideo() {
  if (facevideo_ != &::google::protobuf::internal::kEmptyString) {
    facevideo_->clear();
  }
  clear_has_facevideo();
}
inline const ::std::string& NewMessageList_NewMessage::facevideo() const {
  return *facevideo_;
}
inline void NewMessageList_NewMessage::set_facevideo(const ::std::string& value) {
  set_has_facevideo();
  if (facevideo_ == &::google::protobuf::internal::kEmptyString) {
    facevideo_ = new ::std::string;
  }
  facevideo_->assign(value);
}
inline void NewMessageList_NewMessage::set_facevideo(const char* value) {
  set_has_facevideo();
  if (facevideo_ == &::google::protobuf::internal::kEmptyString) {
    facevideo_ = new ::std::string;
  }
  facevideo_->assign(value);
}
inline void NewMessageList_NewMessage::set_facevideo(const char* value, size_t size) {
  set_has_facevideo();
  if (facevideo_ == &::google::protobuf::internal::kEmptyString) {
    facevideo_ = new ::std::string;
  }
  facevideo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NewMessageList_NewMessage::mutable_facevideo() {
  set_has_facevideo();
  if (facevideo_ == &::google::protobuf::internal::kEmptyString) {
    facevideo_ = new ::std::string;
  }
  return facevideo_;
}
inline ::std::string* NewMessageList_NewMessage::release_facevideo() {
  clear_has_facevideo();
  if (facevideo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = facevideo_;
    facevideo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NewMessageList_NewMessage::set_allocated_facevideo(::std::string* facevideo) {
  if (facevideo_ != &::google::protobuf::internal::kEmptyString) {
    delete facevideo_;
  }
  if (facevideo) {
    set_has_facevideo();
    facevideo_ = facevideo;
  } else {
    clear_has_facevideo();
    facevideo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// NewMessageList

// repeated .tutorial.NewMessageList.NewMessage newMessage = 1;
inline int NewMessageList::newmessage_size() const {
  return newmessage_.size();
}
inline void NewMessageList::clear_newmessage() {
  newmessage_.Clear();
}
inline const ::tutorial::NewMessageList_NewMessage& NewMessageList::newmessage(int index) const {
  return newmessage_.Get(index);
}
inline ::tutorial::NewMessageList_NewMessage* NewMessageList::mutable_newmessage(int index) {
  return newmessage_.Mutable(index);
}
inline ::tutorial::NewMessageList_NewMessage* NewMessageList::add_newmessage() {
  return newmessage_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tutorial::NewMessageList_NewMessage >&
NewMessageList::newmessage() const {
  return newmessage_;
}
inline ::google::protobuf::RepeatedPtrField< ::tutorial::NewMessageList_NewMessage >*
NewMessageList::mutable_newmessage() {
  return &newmessage_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_newMessage_2eproto__INCLUDED
