// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userPage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "userPage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tutorial {

namespace {

const ::google::protobuf::Descriptor* UserPage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserPage_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserPage_Work_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserPage_Work_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_userPage_2eproto() {
  protobuf_AddDesc_userPage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "userPage.proto");
  GOOGLE_CHECK(file != NULL);
  UserPage_descriptor_ = file->message_type(0);
  static const int UserPage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPage, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPage, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPage, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPage, isattention_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPage, facevideo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPage, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPage, work_),
  };
  UserPage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserPage_descriptor_,
      UserPage::default_instance_,
      UserPage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserPage));
  UserPage_Work_descriptor_ = UserPage_descriptor_->nested_type(0);
  static const int UserPage_Work_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPage_Work, firstkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPage_Work, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPage_Work, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPage_Work, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPage_Work, praisecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPage_Work, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPage_Work, seq_),
  };
  UserPage_Work_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserPage_Work_descriptor_,
      UserPage_Work::default_instance_,
      UserPage_Work_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPage_Work, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPage_Work, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserPage_Work));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_userPage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserPage_descriptor_, &UserPage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserPage_Work_descriptor_, &UserPage_Work::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_userPage_2eproto() {
  delete UserPage::default_instance_;
  delete UserPage_reflection_;
  delete UserPage_Work::default_instance_;
  delete UserPage_Work_reflection_;
}

void protobuf_AddDesc_userPage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016userPage.proto\022\010tutorial\"\214\002\n\010UserPage\022"
    "\014\n\004face\030\001 \001(\t\022\020\n\010nickName\030\002 \001(\t\022\014\n\004sign\030"
    "\003 \001(\t\022\023\n\013isAttention\030\004 \001(\005\022\021\n\tfaceVideo\030"
    "\005 \001(\t\022\013\n\003uid\030\006 \001(\005\022%\n\004work\030\007 \003(\0132\027.tutor"
    "ial.UserPage.Work\032v\n\004Work\022\020\n\010firstKey\030\001 "
    "\002(\t\022\r\n\005label\030\002 \001(\t\022\014\n\004face\030\003 \001(\t\022\020\n\010send"
    "Time\030\004 \002(\003\022\023\n\013praiseCount\030\005 \002(\005\022\013\n\003sid\030\006"
    " \002(\005\022\013\n\003seq\030\007 \002(\tB\035\n\013com.ii.pbpoB\016UserPa"
    "geReturn", 328);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "userPage.proto", &protobuf_RegisterTypes);
  UserPage::default_instance_ = new UserPage();
  UserPage_Work::default_instance_ = new UserPage_Work();
  UserPage::default_instance_->InitAsDefaultInstance();
  UserPage_Work::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_userPage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_userPage_2eproto {
  StaticDescriptorInitializer_userPage_2eproto() {
    protobuf_AddDesc_userPage_2eproto();
  }
} static_descriptor_initializer_userPage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UserPage_Work::kFirstKeyFieldNumber;
const int UserPage_Work::kLabelFieldNumber;
const int UserPage_Work::kFaceFieldNumber;
const int UserPage_Work::kSendTimeFieldNumber;
const int UserPage_Work::kPraiseCountFieldNumber;
const int UserPage_Work::kSidFieldNumber;
const int UserPage_Work::kSeqFieldNumber;
#endif  // !_MSC_VER

UserPage_Work::UserPage_Work()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserPage_Work::InitAsDefaultInstance() {
}

UserPage_Work::UserPage_Work(const UserPage_Work& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserPage_Work::SharedCtor() {
  _cached_size_ = 0;
  firstkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  face_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sendtime_ = GOOGLE_LONGLONG(0);
  praisecount_ = 0;
  sid_ = 0;
  seq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserPage_Work::~UserPage_Work() {
  SharedDtor();
}

void UserPage_Work::SharedDtor() {
  if (firstkey_ != &::google::protobuf::internal::kEmptyString) {
    delete firstkey_;
  }
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (face_ != &::google::protobuf::internal::kEmptyString) {
    delete face_;
  }
  if (seq_ != &::google::protobuf::internal::kEmptyString) {
    delete seq_;
  }
  if (this != default_instance_) {
  }
}

void UserPage_Work::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserPage_Work::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPage_Work_descriptor_;
}

const UserPage_Work& UserPage_Work::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userPage_2eproto();
  return *default_instance_;
}

UserPage_Work* UserPage_Work::default_instance_ = NULL;

UserPage_Work* UserPage_Work::New() const {
  return new UserPage_Work;
}

void UserPage_Work::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_firstkey()) {
      if (firstkey_ != &::google::protobuf::internal::kEmptyString) {
        firstkey_->clear();
      }
    }
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
    if (has_face()) {
      if (face_ != &::google::protobuf::internal::kEmptyString) {
        face_->clear();
      }
    }
    sendtime_ = GOOGLE_LONGLONG(0);
    praisecount_ = 0;
    sid_ = 0;
    if (has_seq()) {
      if (seq_ != &::google::protobuf::internal::kEmptyString) {
        seq_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserPage_Work::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string firstKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->firstkey().data(), this->firstkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }

      // optional string label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_face;
        break;
      }

      // optional string face = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_face:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_face()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->face().data(), this->face().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sendTime;
        break;
      }

      // required int64 sendTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_praiseCount;
        break;
      }

      // required int32 praiseCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_praiseCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &praisecount_)));
          set_has_praisecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sid;
        break;
      }

      // required int32 sid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_seq;
        break;
      }

      // required string seq = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seq()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seq().data(), this->seq().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserPage_Work::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string firstKey = 1;
  if (has_firstkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->firstkey().data(), this->firstkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->firstkey(), output);
  }

  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->label(), output);
  }

  // optional string face = 3;
  if (has_face()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face().data(), this->face().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->face(), output);
  }

  // required int64 sendTime = 4;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->sendtime(), output);
  }

  // required int32 praiseCount = 5;
  if (has_praisecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->praisecount(), output);
  }

  // required int32 sid = 6;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sid(), output);
  }

  // required string seq = 7;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seq().data(), this->seq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserPage_Work::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string firstKey = 1;
  if (has_firstkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->firstkey().data(), this->firstkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->firstkey(), target);
  }

  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }

  // optional string face = 3;
  if (has_face()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face().data(), this->face().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->face(), target);
  }

  // required int64 sendTime = 4;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->sendtime(), target);
  }

  // required int32 praiseCount = 5;
  if (has_praisecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->praisecount(), target);
  }

  // required int32 sid = 6;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sid(), target);
  }

  // required string seq = 7;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seq().data(), this->seq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserPage_Work::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string firstKey = 1;
    if (has_firstkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstkey());
    }

    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string face = 3;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->face());
    }

    // required int64 sendTime = 4;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sendtime());
    }

    // required int32 praiseCount = 5;
    if (has_praisecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->praisecount());
    }

    // required int32 sid = 6;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // required string seq = 7;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserPage_Work::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserPage_Work* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserPage_Work*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserPage_Work::MergeFrom(const UserPage_Work& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstkey()) {
      set_firstkey(from.firstkey());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_praisecount()) {
      set_praisecount(from.praisecount());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserPage_Work::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPage_Work::CopyFrom(const UserPage_Work& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPage_Work::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000079) != 0x00000079) return false;

  return true;
}

void UserPage_Work::Swap(UserPage_Work* other) {
  if (other != this) {
    std::swap(firstkey_, other->firstkey_);
    std::swap(label_, other->label_);
    std::swap(face_, other->face_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(praisecount_, other->praisecount_);
    std::swap(sid_, other->sid_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserPage_Work::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserPage_Work_descriptor_;
  metadata.reflection = UserPage_Work_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserPage::kFaceFieldNumber;
const int UserPage::kNickNameFieldNumber;
const int UserPage::kSignFieldNumber;
const int UserPage::kIsAttentionFieldNumber;
const int UserPage::kFaceVideoFieldNumber;
const int UserPage::kUidFieldNumber;
const int UserPage::kWorkFieldNumber;
#endif  // !_MSC_VER

UserPage::UserPage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserPage::InitAsDefaultInstance() {
}

UserPage::UserPage(const UserPage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserPage::SharedCtor() {
  _cached_size_ = 0;
  face_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isattention_ = 0;
  facevideo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserPage::~UserPage() {
  SharedDtor();
}

void UserPage::SharedDtor() {
  if (face_ != &::google::protobuf::internal::kEmptyString) {
    delete face_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (facevideo_ != &::google::protobuf::internal::kEmptyString) {
    delete facevideo_;
  }
  if (this != default_instance_) {
  }
}

void UserPage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserPage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPage_descriptor_;
}

const UserPage& UserPage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_userPage_2eproto();
  return *default_instance_;
}

UserPage* UserPage::default_instance_ = NULL;

UserPage* UserPage::New() const {
  return new UserPage;
}

void UserPage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_face()) {
      if (face_ != &::google::protobuf::internal::kEmptyString) {
        face_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    isattention_ = 0;
    if (has_facevideo()) {
      if (facevideo_ != &::google::protobuf::internal::kEmptyString) {
        facevideo_->clear();
      }
    }
    uid_ = 0;
  }
  work_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserPage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string face = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_face()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->face().data(), this->face().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickName;
        break;
      }

      // optional string nickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sign;
        break;
      }

      // optional string sign = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isAttention;
        break;
      }

      // optional int32 isAttention = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAttention:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isattention_)));
          set_has_isattention();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_faceVideo;
        break;
      }

      // optional string faceVideo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faceVideo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facevideo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->facevideo().data(), this->facevideo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uid;
        break;
      }

      // optional int32 uid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_work;
        break;
      }

      // repeated .tutorial.UserPage.Work work = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_work:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_work()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_work;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserPage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string face = 1;
  if (has_face()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face().data(), this->face().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->face(), output);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional string sign = 3;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sign(), output);
  }

  // optional int32 isAttention = 4;
  if (has_isattention()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->isattention(), output);
  }

  // optional string faceVideo = 5;
  if (has_facevideo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facevideo().data(), this->facevideo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->facevideo(), output);
  }

  // optional int32 uid = 6;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->uid(), output);
  }

  // repeated .tutorial.UserPage.Work work = 7;
  for (int i = 0; i < this->work_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->work(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserPage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string face = 1;
  if (has_face()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face().data(), this->face().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->face(), target);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional string sign = 3;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sign(), target);
  }

  // optional int32 isAttention = 4;
  if (has_isattention()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->isattention(), target);
  }

  // optional string faceVideo = 5;
  if (has_facevideo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facevideo().data(), this->facevideo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->facevideo(), target);
  }

  // optional int32 uid = 6;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->uid(), target);
  }

  // repeated .tutorial.UserPage.Work work = 7;
  for (int i = 0; i < this->work_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->work(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserPage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string face = 1;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->face());
    }

    // optional string nickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string sign = 3;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional int32 isAttention = 4;
    if (has_isattention()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isattention());
    }

    // optional string faceVideo = 5;
    if (has_facevideo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facevideo());
    }

    // optional int32 uid = 6;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  // repeated .tutorial.UserPage.Work work = 7;
  total_size += 1 * this->work_size();
  for (int i = 0; i < this->work_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->work(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserPage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserPage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserPage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserPage::MergeFrom(const UserPage& from) {
  GOOGLE_CHECK_NE(&from, this);
  work_.MergeFrom(from.work_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_isattention()) {
      set_isattention(from.isattention());
    }
    if (from.has_facevideo()) {
      set_facevideo(from.facevideo());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserPage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPage::CopyFrom(const UserPage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPage::IsInitialized() const {

  for (int i = 0; i < work_size(); i++) {
    if (!this->work(i).IsInitialized()) return false;
  }
  return true;
}

void UserPage::Swap(UserPage* other) {
  if (other != this) {
    std::swap(face_, other->face_);
    std::swap(nickname_, other->nickname_);
    std::swap(sign_, other->sign_);
    std::swap(isattention_, other->isattention_);
    std::swap(facevideo_, other->facevideo_);
    std::swap(uid_, other->uid_);
    work_.Swap(&other->work_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserPage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserPage_descriptor_;
  metadata.reflection = UserPage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)
