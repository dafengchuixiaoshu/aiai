// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UpdateBackPOJO.proto

#ifndef PROTOBUF_UpdateBackPOJO_2eproto__INCLUDED
#define PROTOBUF_UpdateBackPOJO_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace mm {
namespace pb {
namespace po {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UpdateBackPOJO_2eproto();
void protobuf_AssignDesc_UpdateBackPOJO_2eproto();
void protobuf_ShutdownFile_UpdateBackPOJO_2eproto();

class UpdateBackPOJO;

// ===================================================================

class UpdateBackPOJO : public ::google::protobuf::Message {
 public:
  UpdateBackPOJO();
  virtual ~UpdateBackPOJO();

  UpdateBackPOJO(const UpdateBackPOJO& from);

  inline UpdateBackPOJO& operator=(const UpdateBackPOJO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateBackPOJO& default_instance();

  void Swap(UpdateBackPOJO* other);

  // implements Message ----------------------------------------------

  UpdateBackPOJO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateBackPOJO& from);
  void MergeFrom(const UpdateBackPOJO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 platForm = 3;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatFormFieldNumber = 3;
  inline ::google::protobuf::int32 platform() const;
  inline void set_platform(::google::protobuf::int32 value);

  // optional string version = 4;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 4;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional string channel = 5;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 5;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  inline ::std::string* release_channel();
  inline void set_allocated_channel(::std::string* channel);

  // optional string userModel = 6;
  inline bool has_usermodel() const;
  inline void clear_usermodel();
  static const int kUserModelFieldNumber = 6;
  inline const ::std::string& usermodel() const;
  inline void set_usermodel(const ::std::string& value);
  inline void set_usermodel(const char* value);
  inline void set_usermodel(const char* value, size_t size);
  inline ::std::string* mutable_usermodel();
  inline ::std::string* release_usermodel();
  inline void set_allocated_usermodel(::std::string* usermodel);

  // optional string os = 7;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 7;
  inline const ::std::string& os() const;
  inline void set_os(const ::std::string& value);
  inline void set_os(const char* value);
  inline void set_os(const char* value, size_t size);
  inline ::std::string* mutable_os();
  inline ::std::string* release_os();
  inline void set_allocated_os(::std::string* os);

  // @@protoc_insertion_point(class_scope:com.mm.pb.po.UpdateBackPOJO)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_usermodel();
  inline void clear_has_usermodel();
  inline void set_has_os();
  inline void clear_has_os();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 platform_;
  ::std::string* version_;
  ::std::string* channel_;
  ::std::string* usermodel_;
  ::std::string* os_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_UpdateBackPOJO_2eproto();
  friend void protobuf_AssignDesc_UpdateBackPOJO_2eproto();
  friend void protobuf_ShutdownFile_UpdateBackPOJO_2eproto();

  void InitAsDefaultInstance();
  static UpdateBackPOJO* default_instance_;
};
// ===================================================================


// ===================================================================

// UpdateBackPOJO

// optional string content = 1;
inline bool UpdateBackPOJO::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateBackPOJO::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateBackPOJO::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateBackPOJO::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& UpdateBackPOJO::content() const {
  return *content_;
}
inline void UpdateBackPOJO::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void UpdateBackPOJO::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void UpdateBackPOJO::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateBackPOJO::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* UpdateBackPOJO::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateBackPOJO::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 uid = 2;
inline bool UpdateBackPOJO::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateBackPOJO::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateBackPOJO::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateBackPOJO::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 UpdateBackPOJO::uid() const {
  return uid_;
}
inline void UpdateBackPOJO::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int32 platForm = 3;
inline bool UpdateBackPOJO::has_platform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateBackPOJO::set_has_platform() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateBackPOJO::clear_has_platform() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateBackPOJO::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::google::protobuf::int32 UpdateBackPOJO::platform() const {
  return platform_;
}
inline void UpdateBackPOJO::set_platform(::google::protobuf::int32 value) {
  set_has_platform();
  platform_ = value;
}

// optional string version = 4;
inline bool UpdateBackPOJO::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateBackPOJO::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateBackPOJO::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateBackPOJO::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& UpdateBackPOJO::version() const {
  return *version_;
}
inline void UpdateBackPOJO::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void UpdateBackPOJO::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void UpdateBackPOJO::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateBackPOJO::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* UpdateBackPOJO::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateBackPOJO::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string channel = 5;
inline bool UpdateBackPOJO::has_channel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdateBackPOJO::set_has_channel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdateBackPOJO::clear_has_channel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdateBackPOJO::clear_channel() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    channel_->clear();
  }
  clear_has_channel();
}
inline const ::std::string& UpdateBackPOJO::channel() const {
  return *channel_;
}
inline void UpdateBackPOJO::set_channel(const ::std::string& value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void UpdateBackPOJO::set_channel(const char* value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void UpdateBackPOJO::set_channel(const char* value, size_t size) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateBackPOJO::mutable_channel() {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  return channel_;
}
inline ::std::string* UpdateBackPOJO::release_channel() {
  clear_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_;
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateBackPOJO::set_allocated_channel(::std::string* channel) {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (channel) {
    set_has_channel();
    channel_ = channel;
  } else {
    clear_has_channel();
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string userModel = 6;
inline bool UpdateBackPOJO::has_usermodel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpdateBackPOJO::set_has_usermodel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpdateBackPOJO::clear_has_usermodel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpdateBackPOJO::clear_usermodel() {
  if (usermodel_ != &::google::protobuf::internal::kEmptyString) {
    usermodel_->clear();
  }
  clear_has_usermodel();
}
inline const ::std::string& UpdateBackPOJO::usermodel() const {
  return *usermodel_;
}
inline void UpdateBackPOJO::set_usermodel(const ::std::string& value) {
  set_has_usermodel();
  if (usermodel_ == &::google::protobuf::internal::kEmptyString) {
    usermodel_ = new ::std::string;
  }
  usermodel_->assign(value);
}
inline void UpdateBackPOJO::set_usermodel(const char* value) {
  set_has_usermodel();
  if (usermodel_ == &::google::protobuf::internal::kEmptyString) {
    usermodel_ = new ::std::string;
  }
  usermodel_->assign(value);
}
inline void UpdateBackPOJO::set_usermodel(const char* value, size_t size) {
  set_has_usermodel();
  if (usermodel_ == &::google::protobuf::internal::kEmptyString) {
    usermodel_ = new ::std::string;
  }
  usermodel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateBackPOJO::mutable_usermodel() {
  set_has_usermodel();
  if (usermodel_ == &::google::protobuf::internal::kEmptyString) {
    usermodel_ = new ::std::string;
  }
  return usermodel_;
}
inline ::std::string* UpdateBackPOJO::release_usermodel() {
  clear_has_usermodel();
  if (usermodel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = usermodel_;
    usermodel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateBackPOJO::set_allocated_usermodel(::std::string* usermodel) {
  if (usermodel_ != &::google::protobuf::internal::kEmptyString) {
    delete usermodel_;
  }
  if (usermodel) {
    set_has_usermodel();
    usermodel_ = usermodel;
  } else {
    clear_has_usermodel();
    usermodel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string os = 7;
inline bool UpdateBackPOJO::has_os() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UpdateBackPOJO::set_has_os() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UpdateBackPOJO::clear_has_os() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UpdateBackPOJO::clear_os() {
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    os_->clear();
  }
  clear_has_os();
}
inline const ::std::string& UpdateBackPOJO::os() const {
  return *os_;
}
inline void UpdateBackPOJO::set_os(const ::std::string& value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(value);
}
inline void UpdateBackPOJO::set_os(const char* value) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(value);
}
inline void UpdateBackPOJO::set_os(const char* value, size_t size) {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  os_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateBackPOJO::mutable_os() {
  set_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    os_ = new ::std::string;
  }
  return os_;
}
inline ::std::string* UpdateBackPOJO::release_os() {
  clear_has_os();
  if (os_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = os_;
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateBackPOJO::set_allocated_os(::std::string* os) {
  if (os_ != &::google::protobuf::internal::kEmptyString) {
    delete os_;
  }
  if (os) {
    set_has_os();
    os_ = os;
  } else {
    clear_has_os();
    os_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace po
}  // namespace pb
}  // namespace mm
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UpdateBackPOJO_2eproto__INCLUDED
