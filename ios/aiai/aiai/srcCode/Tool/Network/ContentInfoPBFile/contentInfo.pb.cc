// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contentInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "contentInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tutorial {

namespace {

const ::google::protobuf::Descriptor* ContentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContentInfo_Reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContentInfo_Reply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_contentInfo_2eproto() {
  protobuf_AddDesc_contentInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "contentInfo.proto");
  GOOGLE_CHECK(file != NULL);
  ContentInfo_descriptor_ = file->message_type(0);
  static const int ContentInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo, firstkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo, praisecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo, commentcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo, facevideo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo, videokey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo, reply_),
  };
  ContentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContentInfo_descriptor_,
      ContentInfo::default_instance_,
      ContentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContentInfo));
  ContentInfo_Reply_descriptor_ = ContentInfo_descriptor_->nested_type(0);
  static const int ContentInfo_Reply_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo_Reply, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo_Reply, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo_Reply, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo_Reply, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo_Reply, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo_Reply, facevideo_),
  };
  ContentInfo_Reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContentInfo_Reply_descriptor_,
      ContentInfo_Reply::default_instance_,
      ContentInfo_Reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo_Reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentInfo_Reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContentInfo_Reply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_contentInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContentInfo_descriptor_, &ContentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContentInfo_Reply_descriptor_, &ContentInfo_Reply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_contentInfo_2eproto() {
  delete ContentInfo::default_instance_;
  delete ContentInfo_reflection_;
  delete ContentInfo_Reply::default_instance_;
  delete ContentInfo_Reply_reflection_;
}

void protobuf_AddDesc_contentInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021contentInfo.proto\022\010tutorial\"\363\002\n\013Conten"
    "tInfo\022\020\n\010firstKey\030\001 \001(\t\022\r\n\005label\030\002 \001(\t\022\014"
    "\n\004face\030\003 \001(\t\022\013\n\003uid\030\004 \001(\005\022\020\n\010nickName\030\005 "
    "\001(\t\022\023\n\013praiseCount\030\006 \001(\005\022\024\n\014commentCount"
    "\030\007 \001(\005\022\020\n\010sendTime\030\010 \001(\003\022\017\n\007content\030\t \001("
    "\t\022\013\n\003sid\030\n \001(\005\022\021\n\tfaceVideo\030\013 \001(\t\022\020\n\010vid"
    "eoKey\030\014 \001(\t\022*\n\005reply\030\r \003(\0132\033.tutorial.Co"
    "ntentInfo.Reply\032j\n\005Reply\022\014\n\004face\030\001 \001(\t\022\020"
    "\n\010nickName\030\002 \001(\t\022\017\n\007content\030\003 \001(\t\022\020\n\010sen"
    "dTime\030\004 \001(\003\022\013\n\003uid\030\005 \001(\005\022\021\n\tfaceVideo\030\006 "
    "\001(\tB\031\n\013com.ii.pbpoB\nInfoReturn", 430);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "contentInfo.proto", &protobuf_RegisterTypes);
  ContentInfo::default_instance_ = new ContentInfo();
  ContentInfo_Reply::default_instance_ = new ContentInfo_Reply();
  ContentInfo::default_instance_->InitAsDefaultInstance();
  ContentInfo_Reply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_contentInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_contentInfo_2eproto {
  StaticDescriptorInitializer_contentInfo_2eproto() {
    protobuf_AddDesc_contentInfo_2eproto();
  }
} static_descriptor_initializer_contentInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ContentInfo_Reply::kFaceFieldNumber;
const int ContentInfo_Reply::kNickNameFieldNumber;
const int ContentInfo_Reply::kContentFieldNumber;
const int ContentInfo_Reply::kSendTimeFieldNumber;
const int ContentInfo_Reply::kUidFieldNumber;
const int ContentInfo_Reply::kFaceVideoFieldNumber;
#endif  // !_MSC_VER

ContentInfo_Reply::ContentInfo_Reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContentInfo_Reply::InitAsDefaultInstance() {
}

ContentInfo_Reply::ContentInfo_Reply(const ContentInfo_Reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContentInfo_Reply::SharedCtor() {
  _cached_size_ = 0;
  face_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sendtime_ = GOOGLE_LONGLONG(0);
  uid_ = 0;
  facevideo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContentInfo_Reply::~ContentInfo_Reply() {
  SharedDtor();
}

void ContentInfo_Reply::SharedDtor() {
  if (face_ != &::google::protobuf::internal::kEmptyString) {
    delete face_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (facevideo_ != &::google::protobuf::internal::kEmptyString) {
    delete facevideo_;
  }
  if (this != default_instance_) {
  }
}

void ContentInfo_Reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentInfo_Reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentInfo_Reply_descriptor_;
}

const ContentInfo_Reply& ContentInfo_Reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_contentInfo_2eproto();
  return *default_instance_;
}

ContentInfo_Reply* ContentInfo_Reply::default_instance_ = NULL;

ContentInfo_Reply* ContentInfo_Reply::New() const {
  return new ContentInfo_Reply;
}

void ContentInfo_Reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_face()) {
      if (face_ != &::google::protobuf::internal::kEmptyString) {
        face_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    sendtime_ = GOOGLE_LONGLONG(0);
    uid_ = 0;
    if (has_facevideo()) {
      if (facevideo_ != &::google::protobuf::internal::kEmptyString) {
        facevideo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContentInfo_Reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string face = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_face()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->face().data(), this->face().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickName;
        break;
      }

      // optional string nickName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sendTime;
        break;
      }

      // optional int64 sendTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uid;
        break;
      }

      // optional int32 uid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_faceVideo;
        break;
      }

      // optional string faceVideo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faceVideo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facevideo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->facevideo().data(), this->facevideo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContentInfo_Reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string face = 1;
  if (has_face()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face().data(), this->face().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->face(), output);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  // optional int64 sendTime = 4;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->sendtime(), output);
  }

  // optional int32 uid = 5;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->uid(), output);
  }

  // optional string faceVideo = 6;
  if (has_facevideo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facevideo().data(), this->facevideo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->facevideo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContentInfo_Reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string face = 1;
  if (has_face()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face().data(), this->face().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->face(), target);
  }

  // optional string nickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional int64 sendTime = 4;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->sendtime(), target);
  }

  // optional int32 uid = 5;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->uid(), target);
  }

  // optional string faceVideo = 6;
  if (has_facevideo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facevideo().data(), this->facevideo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->facevideo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContentInfo_Reply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string face = 1;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->face());
    }

    // optional string nickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int64 sendTime = 4;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sendtime());
    }

    // optional int32 uid = 5;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional string faceVideo = 6;
    if (has_facevideo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facevideo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentInfo_Reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContentInfo_Reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContentInfo_Reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContentInfo_Reply::MergeFrom(const ContentInfo_Reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_facevideo()) {
      set_facevideo(from.facevideo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContentInfo_Reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentInfo_Reply::CopyFrom(const ContentInfo_Reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentInfo_Reply::IsInitialized() const {

  return true;
}

void ContentInfo_Reply::Swap(ContentInfo_Reply* other) {
  if (other != this) {
    std::swap(face_, other->face_);
    std::swap(nickname_, other->nickname_);
    std::swap(content_, other->content_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(uid_, other->uid_);
    std::swap(facevideo_, other->facevideo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContentInfo_Reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContentInfo_Reply_descriptor_;
  metadata.reflection = ContentInfo_Reply_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ContentInfo::kFirstKeyFieldNumber;
const int ContentInfo::kLabelFieldNumber;
const int ContentInfo::kFaceFieldNumber;
const int ContentInfo::kUidFieldNumber;
const int ContentInfo::kNickNameFieldNumber;
const int ContentInfo::kPraiseCountFieldNumber;
const int ContentInfo::kCommentCountFieldNumber;
const int ContentInfo::kSendTimeFieldNumber;
const int ContentInfo::kContentFieldNumber;
const int ContentInfo::kSidFieldNumber;
const int ContentInfo::kFaceVideoFieldNumber;
const int ContentInfo::kVideoKeyFieldNumber;
const int ContentInfo::kReplyFieldNumber;
#endif  // !_MSC_VER

ContentInfo::ContentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContentInfo::InitAsDefaultInstance() {
}

ContentInfo::ContentInfo(const ContentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContentInfo::SharedCtor() {
  _cached_size_ = 0;
  firstkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  face_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  praisecount_ = 0;
  commentcount_ = 0;
  sendtime_ = GOOGLE_LONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sid_ = 0;
  facevideo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  videokey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContentInfo::~ContentInfo() {
  SharedDtor();
}

void ContentInfo::SharedDtor() {
  if (firstkey_ != &::google::protobuf::internal::kEmptyString) {
    delete firstkey_;
  }
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (face_ != &::google::protobuf::internal::kEmptyString) {
    delete face_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (facevideo_ != &::google::protobuf::internal::kEmptyString) {
    delete facevideo_;
  }
  if (videokey_ != &::google::protobuf::internal::kEmptyString) {
    delete videokey_;
  }
  if (this != default_instance_) {
  }
}

void ContentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentInfo_descriptor_;
}

const ContentInfo& ContentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_contentInfo_2eproto();
  return *default_instance_;
}

ContentInfo* ContentInfo::default_instance_ = NULL;

ContentInfo* ContentInfo::New() const {
  return new ContentInfo;
}

void ContentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_firstkey()) {
      if (firstkey_ != &::google::protobuf::internal::kEmptyString) {
        firstkey_->clear();
      }
    }
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
    if (has_face()) {
      if (face_ != &::google::protobuf::internal::kEmptyString) {
        face_->clear();
      }
    }
    uid_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    praisecount_ = 0;
    commentcount_ = 0;
    sendtime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    sid_ = 0;
    if (has_facevideo()) {
      if (facevideo_ != &::google::protobuf::internal::kEmptyString) {
        facevideo_->clear();
      }
    }
    if (has_videokey()) {
      if (videokey_ != &::google::protobuf::internal::kEmptyString) {
        videokey_->clear();
      }
    }
  }
  reply_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string firstKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->firstkey().data(), this->firstkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }

      // optional string label = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_face;
        break;
      }

      // optional string face = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_face:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_face()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->face().data(), this->face().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uid;
        break;
      }

      // optional int32 uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nickName;
        break;
      }

      // optional string nickName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_praiseCount;
        break;
      }

      // optional int32 praiseCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_praiseCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &praisecount_)));
          set_has_praisecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_commentCount;
        break;
      }

      // optional int32 commentCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commentCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commentcount_)));
          set_has_commentcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sendTime;
        break;
      }

      // optional int64 sendTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_content;
        break;
      }

      // optional string content = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_sid;
        break;
      }

      // optional int32 sid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_faceVideo;
        break;
      }

      // optional string faceVideo = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faceVideo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_facevideo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->facevideo().data(), this->facevideo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_videoKey;
        break;
      }

      // optional string videoKey = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_videoKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videokey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->videokey().data(), this->videokey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_reply;
        break;
      }

      // repeated .tutorial.ContentInfo.Reply reply = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reply()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_reply;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string firstKey = 1;
  if (has_firstkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->firstkey().data(), this->firstkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->firstkey(), output);
  }

  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->label(), output);
  }

  // optional string face = 3;
  if (has_face()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face().data(), this->face().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->face(), output);
  }

  // optional int32 uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->uid(), output);
  }

  // optional string nickName = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nickname(), output);
  }

  // optional int32 praiseCount = 6;
  if (has_praisecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->praisecount(), output);
  }

  // optional int32 commentCount = 7;
  if (has_commentcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->commentcount(), output);
  }

  // optional int64 sendTime = 8;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->sendtime(), output);
  }

  // optional string content = 9;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->content(), output);
  }

  // optional int32 sid = 10;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sid(), output);
  }

  // optional string faceVideo = 11;
  if (has_facevideo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facevideo().data(), this->facevideo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->facevideo(), output);
  }

  // optional string videoKey = 12;
  if (has_videokey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videokey().data(), this->videokey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->videokey(), output);
  }

  // repeated .tutorial.ContentInfo.Reply reply = 13;
  for (int i = 0; i < this->reply_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->reply(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string firstKey = 1;
  if (has_firstkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->firstkey().data(), this->firstkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->firstkey(), target);
  }

  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }

  // optional string face = 3;
  if (has_face()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->face().data(), this->face().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->face(), target);
  }

  // optional int32 uid = 4;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->uid(), target);
  }

  // optional string nickName = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nickname(), target);
  }

  // optional int32 praiseCount = 6;
  if (has_praisecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->praisecount(), target);
  }

  // optional int32 commentCount = 7;
  if (has_commentcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->commentcount(), target);
  }

  // optional int64 sendTime = 8;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->sendtime(), target);
  }

  // optional string content = 9;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->content(), target);
  }

  // optional int32 sid = 10;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sid(), target);
  }

  // optional string faceVideo = 11;
  if (has_facevideo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->facevideo().data(), this->facevideo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->facevideo(), target);
  }

  // optional string videoKey = 12;
  if (has_videokey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videokey().data(), this->videokey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->videokey(), target);
  }

  // repeated .tutorial.ContentInfo.Reply reply = 13;
  for (int i = 0; i < this->reply_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->reply(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string firstKey = 1;
    if (has_firstkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstkey());
    }

    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string face = 3;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->face());
    }

    // optional int32 uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional string nickName = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 praiseCount = 6;
    if (has_praisecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->praisecount());
    }

    // optional int32 commentCount = 7;
    if (has_commentcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commentcount());
    }

    // optional int64 sendTime = 8;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sendtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string content = 9;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 sid = 10;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional string faceVideo = 11;
    if (has_facevideo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->facevideo());
    }

    // optional string videoKey = 12;
    if (has_videokey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->videokey());
    }

  }
  // repeated .tutorial.ContentInfo.Reply reply = 13;
  total_size += 1 * this->reply_size();
  for (int i = 0; i < this->reply_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reply(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContentInfo::MergeFrom(const ContentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  reply_.MergeFrom(from.reply_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstkey()) {
      set_firstkey(from.firstkey());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_praisecount()) {
      set_praisecount(from.praisecount());
    }
    if (from.has_commentcount()) {
      set_commentcount(from.commentcount());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_facevideo()) {
      set_facevideo(from.facevideo());
    }
    if (from.has_videokey()) {
      set_videokey(from.videokey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentInfo::CopyFrom(const ContentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentInfo::IsInitialized() const {

  return true;
}

void ContentInfo::Swap(ContentInfo* other) {
  if (other != this) {
    std::swap(firstkey_, other->firstkey_);
    std::swap(label_, other->label_);
    std::swap(face_, other->face_);
    std::swap(uid_, other->uid_);
    std::swap(nickname_, other->nickname_);
    std::swap(praisecount_, other->praisecount_);
    std::swap(commentcount_, other->commentcount_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(content_, other->content_);
    std::swap(sid_, other->sid_);
    std::swap(facevideo_, other->facevideo_);
    std::swap(videokey_, other->videokey_);
    reply_.Swap(&other->reply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContentInfo_descriptor_;
  metadata.reflection = ContentInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)
