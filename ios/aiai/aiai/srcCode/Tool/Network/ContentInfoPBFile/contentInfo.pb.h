// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contentInfo.proto

#ifndef PROTOBUF_contentInfo_2eproto__INCLUDED
#define PROTOBUF_contentInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tutorial {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_contentInfo_2eproto();
void protobuf_AssignDesc_contentInfo_2eproto();
void protobuf_ShutdownFile_contentInfo_2eproto();

class ContentInfo;
class ContentInfo_Reply;

// ===================================================================

class ContentInfo_Reply : public ::google::protobuf::Message {
 public:
  ContentInfo_Reply();
  virtual ~ContentInfo_Reply();

  ContentInfo_Reply(const ContentInfo_Reply& from);

  inline ContentInfo_Reply& operator=(const ContentInfo_Reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentInfo_Reply& default_instance();

  void Swap(ContentInfo_Reply* other);

  // implements Message ----------------------------------------------

  ContentInfo_Reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContentInfo_Reply& from);
  void MergeFrom(const ContentInfo_Reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string face = 1;
  inline bool has_face() const;
  inline void clear_face();
  static const int kFaceFieldNumber = 1;
  inline const ::std::string& face() const;
  inline void set_face(const ::std::string& value);
  inline void set_face(const char* value);
  inline void set_face(const char* value, size_t size);
  inline ::std::string* mutable_face();
  inline ::std::string* release_face();
  inline void set_allocated_face(::std::string* face);

  // optional string nickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int64 sendTime = 4;
  inline bool has_sendtime() const;
  inline void clear_sendtime();
  static const int kSendTimeFieldNumber = 4;
  inline ::google::protobuf::int64 sendtime() const;
  inline void set_sendtime(::google::protobuf::int64 value);

  // optional int32 uid = 5;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 5;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional string faceVideo = 6;
  inline bool has_facevideo() const;
  inline void clear_facevideo();
  static const int kFaceVideoFieldNumber = 6;
  inline const ::std::string& facevideo() const;
  inline void set_facevideo(const ::std::string& value);
  inline void set_facevideo(const char* value);
  inline void set_facevideo(const char* value, size_t size);
  inline ::std::string* mutable_facevideo();
  inline ::std::string* release_facevideo();
  inline void set_allocated_facevideo(::std::string* facevideo);

  // @@protoc_insertion_point(class_scope:tutorial.ContentInfo.Reply)
 private:
  inline void set_has_face();
  inline void clear_has_face();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_sendtime();
  inline void clear_has_sendtime();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_facevideo();
  inline void clear_has_facevideo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* face_;
  ::std::string* nickname_;
  ::std::string* content_;
  ::google::protobuf::int64 sendtime_;
  ::std::string* facevideo_;
  ::google::protobuf::int32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_contentInfo_2eproto();
  friend void protobuf_AssignDesc_contentInfo_2eproto();
  friend void protobuf_ShutdownFile_contentInfo_2eproto();

  void InitAsDefaultInstance();
  static ContentInfo_Reply* default_instance_;
};
// -------------------------------------------------------------------

class ContentInfo : public ::google::protobuf::Message {
 public:
  ContentInfo();
  virtual ~ContentInfo();

  ContentInfo(const ContentInfo& from);

  inline ContentInfo& operator=(const ContentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentInfo& default_instance();

  void Swap(ContentInfo* other);

  // implements Message ----------------------------------------------

  ContentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContentInfo& from);
  void MergeFrom(const ContentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ContentInfo_Reply Reply;

  // accessors -------------------------------------------------------

  // optional string firstKey = 1;
  inline bool has_firstkey() const;
  inline void clear_firstkey();
  static const int kFirstKeyFieldNumber = 1;
  inline const ::std::string& firstkey() const;
  inline void set_firstkey(const ::std::string& value);
  inline void set_firstkey(const char* value);
  inline void set_firstkey(const char* value, size_t size);
  inline ::std::string* mutable_firstkey();
  inline ::std::string* release_firstkey();
  inline void set_allocated_firstkey(::std::string* firstkey);

  // optional string label = 2;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 2;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  inline void set_allocated_label(::std::string* label);

  // optional string face = 3;
  inline bool has_face() const;
  inline void clear_face();
  static const int kFaceFieldNumber = 3;
  inline const ::std::string& face() const;
  inline void set_face(const ::std::string& value);
  inline void set_face(const char* value);
  inline void set_face(const char* value, size_t size);
  inline ::std::string* mutable_face();
  inline ::std::string* release_face();
  inline void set_allocated_face(::std::string* face);

  // optional int32 uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional string nickName = 5;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 5;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int32 praiseCount = 6;
  inline bool has_praisecount() const;
  inline void clear_praisecount();
  static const int kPraiseCountFieldNumber = 6;
  inline ::google::protobuf::int32 praisecount() const;
  inline void set_praisecount(::google::protobuf::int32 value);

  // optional int32 commentCount = 7;
  inline bool has_commentcount() const;
  inline void clear_commentcount();
  static const int kCommentCountFieldNumber = 7;
  inline ::google::protobuf::int32 commentcount() const;
  inline void set_commentcount(::google::protobuf::int32 value);

  // optional int64 sendTime = 8;
  inline bool has_sendtime() const;
  inline void clear_sendtime();
  static const int kSendTimeFieldNumber = 8;
  inline ::google::protobuf::int64 sendtime() const;
  inline void set_sendtime(::google::protobuf::int64 value);

  // optional string content = 9;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 9;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 sid = 10;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 10;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);

  // optional string faceVideo = 11;
  inline bool has_facevideo() const;
  inline void clear_facevideo();
  static const int kFaceVideoFieldNumber = 11;
  inline const ::std::string& facevideo() const;
  inline void set_facevideo(const ::std::string& value);
  inline void set_facevideo(const char* value);
  inline void set_facevideo(const char* value, size_t size);
  inline ::std::string* mutable_facevideo();
  inline ::std::string* release_facevideo();
  inline void set_allocated_facevideo(::std::string* facevideo);

  // optional string videoKey = 12;
  inline bool has_videokey() const;
  inline void clear_videokey();
  static const int kVideoKeyFieldNumber = 12;
  inline const ::std::string& videokey() const;
  inline void set_videokey(const ::std::string& value);
  inline void set_videokey(const char* value);
  inline void set_videokey(const char* value, size_t size);
  inline ::std::string* mutable_videokey();
  inline ::std::string* release_videokey();
  inline void set_allocated_videokey(::std::string* videokey);

  // repeated .tutorial.ContentInfo.Reply reply = 13;
  inline int reply_size() const;
  inline void clear_reply();
  static const int kReplyFieldNumber = 13;
  inline const ::tutorial::ContentInfo_Reply& reply(int index) const;
  inline ::tutorial::ContentInfo_Reply* mutable_reply(int index);
  inline ::tutorial::ContentInfo_Reply* add_reply();
  inline const ::google::protobuf::RepeatedPtrField< ::tutorial::ContentInfo_Reply >&
      reply() const;
  inline ::google::protobuf::RepeatedPtrField< ::tutorial::ContentInfo_Reply >*
      mutable_reply();

  // @@protoc_insertion_point(class_scope:tutorial.ContentInfo)
 private:
  inline void set_has_firstkey();
  inline void clear_has_firstkey();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_face();
  inline void clear_has_face();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_praisecount();
  inline void clear_has_praisecount();
  inline void set_has_commentcount();
  inline void clear_has_commentcount();
  inline void set_has_sendtime();
  inline void clear_has_sendtime();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_facevideo();
  inline void clear_has_facevideo();
  inline void set_has_videokey();
  inline void clear_has_videokey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* firstkey_;
  ::std::string* label_;
  ::std::string* face_;
  ::std::string* nickname_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 praisecount_;
  ::google::protobuf::int64 sendtime_;
  ::google::protobuf::int32 commentcount_;
  ::google::protobuf::int32 sid_;
  ::std::string* content_;
  ::std::string* facevideo_;
  ::std::string* videokey_;
  ::google::protobuf::RepeatedPtrField< ::tutorial::ContentInfo_Reply > reply_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_contentInfo_2eproto();
  friend void protobuf_AssignDesc_contentInfo_2eproto();
  friend void protobuf_ShutdownFile_contentInfo_2eproto();

  void InitAsDefaultInstance();
  static ContentInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ContentInfo_Reply

// optional string face = 1;
inline bool ContentInfo_Reply::has_face() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentInfo_Reply::set_has_face() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContentInfo_Reply::clear_has_face() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContentInfo_Reply::clear_face() {
  if (face_ != &::google::protobuf::internal::kEmptyString) {
    face_->clear();
  }
  clear_has_face();
}
inline const ::std::string& ContentInfo_Reply::face() const {
  return *face_;
}
inline void ContentInfo_Reply::set_face(const ::std::string& value) {
  set_has_face();
  if (face_ == &::google::protobuf::internal::kEmptyString) {
    face_ = new ::std::string;
  }
  face_->assign(value);
}
inline void ContentInfo_Reply::set_face(const char* value) {
  set_has_face();
  if (face_ == &::google::protobuf::internal::kEmptyString) {
    face_ = new ::std::string;
  }
  face_->assign(value);
}
inline void ContentInfo_Reply::set_face(const char* value, size_t size) {
  set_has_face();
  if (face_ == &::google::protobuf::internal::kEmptyString) {
    face_ = new ::std::string;
  }
  face_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentInfo_Reply::mutable_face() {
  set_has_face();
  if (face_ == &::google::protobuf::internal::kEmptyString) {
    face_ = new ::std::string;
  }
  return face_;
}
inline ::std::string* ContentInfo_Reply::release_face() {
  clear_has_face();
  if (face_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = face_;
    face_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContentInfo_Reply::set_allocated_face(::std::string* face) {
  if (face_ != &::google::protobuf::internal::kEmptyString) {
    delete face_;
  }
  if (face) {
    set_has_face();
    face_ = face;
  } else {
    clear_has_face();
    face_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nickName = 2;
inline bool ContentInfo_Reply::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentInfo_Reply::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContentInfo_Reply::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContentInfo_Reply::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& ContentInfo_Reply::nickname() const {
  return *nickname_;
}
inline void ContentInfo_Reply::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ContentInfo_Reply::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ContentInfo_Reply::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentInfo_Reply::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* ContentInfo_Reply::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContentInfo_Reply::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 3;
inline bool ContentInfo_Reply::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContentInfo_Reply::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContentInfo_Reply::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContentInfo_Reply::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& ContentInfo_Reply::content() const {
  return *content_;
}
inline void ContentInfo_Reply::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void ContentInfo_Reply::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void ContentInfo_Reply::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentInfo_Reply::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* ContentInfo_Reply::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContentInfo_Reply::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 sendTime = 4;
inline bool ContentInfo_Reply::has_sendtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContentInfo_Reply::set_has_sendtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContentInfo_Reply::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContentInfo_Reply::clear_sendtime() {
  sendtime_ = GOOGLE_LONGLONG(0);
  clear_has_sendtime();
}
inline ::google::protobuf::int64 ContentInfo_Reply::sendtime() const {
  return sendtime_;
}
inline void ContentInfo_Reply::set_sendtime(::google::protobuf::int64 value) {
  set_has_sendtime();
  sendtime_ = value;
}

// optional int32 uid = 5;
inline bool ContentInfo_Reply::has_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContentInfo_Reply::set_has_uid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContentInfo_Reply::clear_has_uid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContentInfo_Reply::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 ContentInfo_Reply::uid() const {
  return uid_;
}
inline void ContentInfo_Reply::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional string faceVideo = 6;
inline bool ContentInfo_Reply::has_facevideo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ContentInfo_Reply::set_has_facevideo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ContentInfo_Reply::clear_has_facevideo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ContentInfo_Reply::clear_facevideo() {
  if (facevideo_ != &::google::protobuf::internal::kEmptyString) {
    facevideo_->clear();
  }
  clear_has_facevideo();
}
inline const ::std::string& ContentInfo_Reply::facevideo() const {
  return *facevideo_;
}
inline void ContentInfo_Reply::set_facevideo(const ::std::string& value) {
  set_has_facevideo();
  if (facevideo_ == &::google::protobuf::internal::kEmptyString) {
    facevideo_ = new ::std::string;
  }
  facevideo_->assign(value);
}
inline void ContentInfo_Reply::set_facevideo(const char* value) {
  set_has_facevideo();
  if (facevideo_ == &::google::protobuf::internal::kEmptyString) {
    facevideo_ = new ::std::string;
  }
  facevideo_->assign(value);
}
inline void ContentInfo_Reply::set_facevideo(const char* value, size_t size) {
  set_has_facevideo();
  if (facevideo_ == &::google::protobuf::internal::kEmptyString) {
    facevideo_ = new ::std::string;
  }
  facevideo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentInfo_Reply::mutable_facevideo() {
  set_has_facevideo();
  if (facevideo_ == &::google::protobuf::internal::kEmptyString) {
    facevideo_ = new ::std::string;
  }
  return facevideo_;
}
inline ::std::string* ContentInfo_Reply::release_facevideo() {
  clear_has_facevideo();
  if (facevideo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = facevideo_;
    facevideo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContentInfo_Reply::set_allocated_facevideo(::std::string* facevideo) {
  if (facevideo_ != &::google::protobuf::internal::kEmptyString) {
    delete facevideo_;
  }
  if (facevideo) {
    set_has_facevideo();
    facevideo_ = facevideo;
  } else {
    clear_has_facevideo();
    facevideo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ContentInfo

// optional string firstKey = 1;
inline bool ContentInfo::has_firstkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentInfo::set_has_firstkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContentInfo::clear_has_firstkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContentInfo::clear_firstkey() {
  if (firstkey_ != &::google::protobuf::internal::kEmptyString) {
    firstkey_->clear();
  }
  clear_has_firstkey();
}
inline const ::std::string& ContentInfo::firstkey() const {
  return *firstkey_;
}
inline void ContentInfo::set_firstkey(const ::std::string& value) {
  set_has_firstkey();
  if (firstkey_ == &::google::protobuf::internal::kEmptyString) {
    firstkey_ = new ::std::string;
  }
  firstkey_->assign(value);
}
inline void ContentInfo::set_firstkey(const char* value) {
  set_has_firstkey();
  if (firstkey_ == &::google::protobuf::internal::kEmptyString) {
    firstkey_ = new ::std::string;
  }
  firstkey_->assign(value);
}
inline void ContentInfo::set_firstkey(const char* value, size_t size) {
  set_has_firstkey();
  if (firstkey_ == &::google::protobuf::internal::kEmptyString) {
    firstkey_ = new ::std::string;
  }
  firstkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentInfo::mutable_firstkey() {
  set_has_firstkey();
  if (firstkey_ == &::google::protobuf::internal::kEmptyString) {
    firstkey_ = new ::std::string;
  }
  return firstkey_;
}
inline ::std::string* ContentInfo::release_firstkey() {
  clear_has_firstkey();
  if (firstkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = firstkey_;
    firstkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContentInfo::set_allocated_firstkey(::std::string* firstkey) {
  if (firstkey_ != &::google::protobuf::internal::kEmptyString) {
    delete firstkey_;
  }
  if (firstkey) {
    set_has_firstkey();
    firstkey_ = firstkey;
  } else {
    clear_has_firstkey();
    firstkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string label = 2;
inline bool ContentInfo::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentInfo::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContentInfo::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContentInfo::clear_label() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& ContentInfo::label() const {
  return *label_;
}
inline void ContentInfo::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void ContentInfo::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void ContentInfo::set_label(const char* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentInfo::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  return label_;
}
inline ::std::string* ContentInfo::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContentInfo::set_allocated_label(::std::string* label) {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (label) {
    set_has_label();
    label_ = label;
  } else {
    clear_has_label();
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string face = 3;
inline bool ContentInfo::has_face() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContentInfo::set_has_face() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContentInfo::clear_has_face() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContentInfo::clear_face() {
  if (face_ != &::google::protobuf::internal::kEmptyString) {
    face_->clear();
  }
  clear_has_face();
}
inline const ::std::string& ContentInfo::face() const {
  return *face_;
}
inline void ContentInfo::set_face(const ::std::string& value) {
  set_has_face();
  if (face_ == &::google::protobuf::internal::kEmptyString) {
    face_ = new ::std::string;
  }
  face_->assign(value);
}
inline void ContentInfo::set_face(const char* value) {
  set_has_face();
  if (face_ == &::google::protobuf::internal::kEmptyString) {
    face_ = new ::std::string;
  }
  face_->assign(value);
}
inline void ContentInfo::set_face(const char* value, size_t size) {
  set_has_face();
  if (face_ == &::google::protobuf::internal::kEmptyString) {
    face_ = new ::std::string;
  }
  face_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentInfo::mutable_face() {
  set_has_face();
  if (face_ == &::google::protobuf::internal::kEmptyString) {
    face_ = new ::std::string;
  }
  return face_;
}
inline ::std::string* ContentInfo::release_face() {
  clear_has_face();
  if (face_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = face_;
    face_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContentInfo::set_allocated_face(::std::string* face) {
  if (face_ != &::google::protobuf::internal::kEmptyString) {
    delete face_;
  }
  if (face) {
    set_has_face();
    face_ = face;
  } else {
    clear_has_face();
    face_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 uid = 4;
inline bool ContentInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContentInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContentInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContentInfo::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 ContentInfo::uid() const {
  return uid_;
}
inline void ContentInfo::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional string nickName = 5;
inline bool ContentInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContentInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContentInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContentInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& ContentInfo::nickname() const {
  return *nickname_;
}
inline void ContentInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ContentInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void ContentInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* ContentInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContentInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 praiseCount = 6;
inline bool ContentInfo::has_praisecount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ContentInfo::set_has_praisecount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ContentInfo::clear_has_praisecount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ContentInfo::clear_praisecount() {
  praisecount_ = 0;
  clear_has_praisecount();
}
inline ::google::protobuf::int32 ContentInfo::praisecount() const {
  return praisecount_;
}
inline void ContentInfo::set_praisecount(::google::protobuf::int32 value) {
  set_has_praisecount();
  praisecount_ = value;
}

// optional int32 commentCount = 7;
inline bool ContentInfo::has_commentcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ContentInfo::set_has_commentcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ContentInfo::clear_has_commentcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ContentInfo::clear_commentcount() {
  commentcount_ = 0;
  clear_has_commentcount();
}
inline ::google::protobuf::int32 ContentInfo::commentcount() const {
  return commentcount_;
}
inline void ContentInfo::set_commentcount(::google::protobuf::int32 value) {
  set_has_commentcount();
  commentcount_ = value;
}

// optional int64 sendTime = 8;
inline bool ContentInfo::has_sendtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ContentInfo::set_has_sendtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ContentInfo::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ContentInfo::clear_sendtime() {
  sendtime_ = GOOGLE_LONGLONG(0);
  clear_has_sendtime();
}
inline ::google::protobuf::int64 ContentInfo::sendtime() const {
  return sendtime_;
}
inline void ContentInfo::set_sendtime(::google::protobuf::int64 value) {
  set_has_sendtime();
  sendtime_ = value;
}

// optional string content = 9;
inline bool ContentInfo::has_content() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ContentInfo::set_has_content() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ContentInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ContentInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& ContentInfo::content() const {
  return *content_;
}
inline void ContentInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void ContentInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void ContentInfo::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* ContentInfo::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContentInfo::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sid = 10;
inline bool ContentInfo::has_sid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ContentInfo::set_has_sid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ContentInfo::clear_has_sid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ContentInfo::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
inline ::google::protobuf::int32 ContentInfo::sid() const {
  return sid_;
}
inline void ContentInfo::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
}

// optional string faceVideo = 11;
inline bool ContentInfo::has_facevideo() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ContentInfo::set_has_facevideo() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ContentInfo::clear_has_facevideo() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ContentInfo::clear_facevideo() {
  if (facevideo_ != &::google::protobuf::internal::kEmptyString) {
    facevideo_->clear();
  }
  clear_has_facevideo();
}
inline const ::std::string& ContentInfo::facevideo() const {
  return *facevideo_;
}
inline void ContentInfo::set_facevideo(const ::std::string& value) {
  set_has_facevideo();
  if (facevideo_ == &::google::protobuf::internal::kEmptyString) {
    facevideo_ = new ::std::string;
  }
  facevideo_->assign(value);
}
inline void ContentInfo::set_facevideo(const char* value) {
  set_has_facevideo();
  if (facevideo_ == &::google::protobuf::internal::kEmptyString) {
    facevideo_ = new ::std::string;
  }
  facevideo_->assign(value);
}
inline void ContentInfo::set_facevideo(const char* value, size_t size) {
  set_has_facevideo();
  if (facevideo_ == &::google::protobuf::internal::kEmptyString) {
    facevideo_ = new ::std::string;
  }
  facevideo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentInfo::mutable_facevideo() {
  set_has_facevideo();
  if (facevideo_ == &::google::protobuf::internal::kEmptyString) {
    facevideo_ = new ::std::string;
  }
  return facevideo_;
}
inline ::std::string* ContentInfo::release_facevideo() {
  clear_has_facevideo();
  if (facevideo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = facevideo_;
    facevideo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContentInfo::set_allocated_facevideo(::std::string* facevideo) {
  if (facevideo_ != &::google::protobuf::internal::kEmptyString) {
    delete facevideo_;
  }
  if (facevideo) {
    set_has_facevideo();
    facevideo_ = facevideo;
  } else {
    clear_has_facevideo();
    facevideo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string videoKey = 12;
inline bool ContentInfo::has_videokey() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ContentInfo::set_has_videokey() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ContentInfo::clear_has_videokey() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ContentInfo::clear_videokey() {
  if (videokey_ != &::google::protobuf::internal::kEmptyString) {
    videokey_->clear();
  }
  clear_has_videokey();
}
inline const ::std::string& ContentInfo::videokey() const {
  return *videokey_;
}
inline void ContentInfo::set_videokey(const ::std::string& value) {
  set_has_videokey();
  if (videokey_ == &::google::protobuf::internal::kEmptyString) {
    videokey_ = new ::std::string;
  }
  videokey_->assign(value);
}
inline void ContentInfo::set_videokey(const char* value) {
  set_has_videokey();
  if (videokey_ == &::google::protobuf::internal::kEmptyString) {
    videokey_ = new ::std::string;
  }
  videokey_->assign(value);
}
inline void ContentInfo::set_videokey(const char* value, size_t size) {
  set_has_videokey();
  if (videokey_ == &::google::protobuf::internal::kEmptyString) {
    videokey_ = new ::std::string;
  }
  videokey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentInfo::mutable_videokey() {
  set_has_videokey();
  if (videokey_ == &::google::protobuf::internal::kEmptyString) {
    videokey_ = new ::std::string;
  }
  return videokey_;
}
inline ::std::string* ContentInfo::release_videokey() {
  clear_has_videokey();
  if (videokey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = videokey_;
    videokey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContentInfo::set_allocated_videokey(::std::string* videokey) {
  if (videokey_ != &::google::protobuf::internal::kEmptyString) {
    delete videokey_;
  }
  if (videokey) {
    set_has_videokey();
    videokey_ = videokey;
  } else {
    clear_has_videokey();
    videokey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .tutorial.ContentInfo.Reply reply = 13;
inline int ContentInfo::reply_size() const {
  return reply_.size();
}
inline void ContentInfo::clear_reply() {
  reply_.Clear();
}
inline const ::tutorial::ContentInfo_Reply& ContentInfo::reply(int index) const {
  return reply_.Get(index);
}
inline ::tutorial::ContentInfo_Reply* ContentInfo::mutable_reply(int index) {
  return reply_.Mutable(index);
}
inline ::tutorial::ContentInfo_Reply* ContentInfo::add_reply() {
  return reply_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tutorial::ContentInfo_Reply >&
ContentInfo::reply() const {
  return reply_;
}
inline ::google::protobuf::RepeatedPtrField< ::tutorial::ContentInfo_Reply >*
ContentInfo::mutable_reply() {
  return &reply_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_contentInfo_2eproto__INCLUDED
