// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InputParamsPOJO.proto

#ifndef PROTOBUF_InputParamsPOJO_2eproto__INCLUDED
#define PROTOBUF_InputParamsPOJO_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace mm {
namespace pb {
namespace po {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_InputParamsPOJO_2eproto();
void protobuf_AssignDesc_InputParamsPOJO_2eproto();
void protobuf_ShutdownFile_InputParamsPOJO_2eproto();

class InputParamsPOJO;

// ===================================================================

class InputParamsPOJO : public ::google::protobuf::Message {
 public:
  InputParamsPOJO();
  virtual ~InputParamsPOJO();

  InputParamsPOJO(const InputParamsPOJO& from);

  inline InputParamsPOJO& operator=(const InputParamsPOJO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InputParamsPOJO& default_instance();

  void Swap(InputParamsPOJO* other);

  // implements Message ----------------------------------------------

  InputParamsPOJO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InputParamsPOJO& from);
  void MergeFrom(const InputParamsPOJO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional int32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional string nickname = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string version = 4;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 4;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional string password = 5;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 5;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string source = 6;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 6;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional string email = 7;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 7;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional int64 birthday = 8;
  inline bool has_birthday() const;
  inline void clear_birthday();
  static const int kBirthdayFieldNumber = 8;
  inline ::google::protobuf::int64 birthday() const;
  inline void set_birthday(::google::protobuf::int64 value);

  // optional string faceUrl = 9;
  inline bool has_faceurl() const;
  inline void clear_faceurl();
  static const int kFaceUrlFieldNumber = 9;
  inline const ::std::string& faceurl() const;
  inline void set_faceurl(const ::std::string& value);
  inline void set_faceurl(const char* value);
  inline void set_faceurl(const char* value, size_t size);
  inline ::std::string* mutable_faceurl();
  inline ::std::string* release_faceurl();
  inline void set_allocated_faceurl(::std::string* faceurl);

  // optional string channel = 10;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 10;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  inline ::std::string* release_channel();
  inline void set_allocated_channel(::std::string* channel);

  // optional int32 gender = 11;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 11;
  inline ::google::protobuf::int32 gender() const;
  inline void set_gender(::google::protobuf::int32 value);

  // optional string info = 12;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 12;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // optional string mobile = 13;
  inline bool has_mobile() const;
  inline void clear_mobile();
  static const int kMobileFieldNumber = 13;
  inline const ::std::string& mobile() const;
  inline void set_mobile(const ::std::string& value);
  inline void set_mobile(const char* value);
  inline void set_mobile(const char* value, size_t size);
  inline ::std::string* mutable_mobile();
  inline ::std::string* release_mobile();
  inline void set_allocated_mobile(::std::string* mobile);

  // optional int32 formal = 14;
  inline bool has_formal() const;
  inline void clear_formal();
  static const int kFormalFieldNumber = 14;
  inline ::google::protobuf::int32 formal() const;
  inline void set_formal(::google::protobuf::int32 value);

  // optional string iphoneToken = 15;
  inline bool has_iphonetoken() const;
  inline void clear_iphonetoken();
  static const int kIphoneTokenFieldNumber = 15;
  inline const ::std::string& iphonetoken() const;
  inline void set_iphonetoken(const ::std::string& value);
  inline void set_iphonetoken(const char* value);
  inline void set_iphonetoken(const char* value, size_t size);
  inline ::std::string* mutable_iphonetoken();
  inline ::std::string* release_iphonetoken();
  inline void set_allocated_iphonetoken(::std::string* iphonetoken);

  // optional string city = 16;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 16;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const char* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // optional string faceVedio = 17;
  inline bool has_facevedio() const;
  inline void clear_facevedio();
  static const int kFaceVedioFieldNumber = 17;
  inline const ::std::string& facevedio() const;
  inline void set_facevedio(const ::std::string& value);
  inline void set_facevedio(const char* value);
  inline void set_facevedio(const char* value, size_t size);
  inline ::std::string* mutable_facevedio();
  inline ::std::string* release_facevedio();
  inline void set_allocated_facevedio(::std::string* facevedio);

  // optional string machineId = 18;
  inline bool has_machineid() const;
  inline void clear_machineid();
  static const int kMachineIdFieldNumber = 18;
  inline const ::std::string& machineid() const;
  inline void set_machineid(const ::std::string& value);
  inline void set_machineid(const char* value);
  inline void set_machineid(const char* value, size_t size);
  inline ::std::string* mutable_machineid();
  inline ::std::string* release_machineid();
  inline void set_allocated_machineid(::std::string* machineid);

  // optional string msg = 19;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 19;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional int32 messageType = 20;
  inline bool has_messagetype() const;
  inline void clear_messagetype();
  static const int kMessageTypeFieldNumber = 20;
  inline ::google::protobuf::int32 messagetype() const;
  inline void set_messagetype(::google::protobuf::int32 value);

  // optional string message = 21;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 21;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional int32 radius = 22;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 22;
  inline ::google::protobuf::int32 radius() const;
  inline void set_radius(::google::protobuf::int32 value);

  // optional float longitude = 23;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 23;
  inline float longitude() const;
  inline void set_longitude(float value);

  // optional float latitude = 24;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 24;
  inline float latitude() const;
  inline void set_latitude(float value);

  // optional string newPwd = 25;
  inline bool has_newpwd() const;
  inline void clear_newpwd();
  static const int kNewPwdFieldNumber = 25;
  inline const ::std::string& newpwd() const;
  inline void set_newpwd(const ::std::string& value);
  inline void set_newpwd(const char* value);
  inline void set_newpwd(const char* value, size_t size);
  inline ::std::string* mutable_newpwd();
  inline ::std::string* release_newpwd();
  inline void set_allocated_newpwd(::std::string* newpwd);

  // optional string oldPwd = 26;
  inline bool has_oldpwd() const;
  inline void clear_oldpwd();
  static const int kOldPwdFieldNumber = 26;
  inline const ::std::string& oldpwd() const;
  inline void set_oldpwd(const ::std::string& value);
  inline void set_oldpwd(const char* value);
  inline void set_oldpwd(const char* value, size_t size);
  inline ::std::string* mutable_oldpwd();
  inline ::std::string* release_oldpwd();
  inline void set_allocated_oldpwd(::std::string* oldpwd);

  // optional int32 type1 = 27;
  inline bool has_type1() const;
  inline void clear_type1();
  static const int kType1FieldNumber = 27;
  inline ::google::protobuf::int32 type1() const;
  inline void set_type1(::google::protobuf::int32 value);

  // optional int32 type2 = 28;
  inline bool has_type2() const;
  inline void clear_type2();
  static const int kType2FieldNumber = 28;
  inline ::google::protobuf::int32 type2() const;
  inline void set_type2(::google::protobuf::int32 value);

  // optional int32 thirdWid = 29;
  inline bool has_thirdwid() const;
  inline void clear_thirdwid();
  static const int kThirdWidFieldNumber = 29;
  inline ::google::protobuf::int32 thirdwid() const;
  inline void set_thirdwid(::google::protobuf::int32 value);

  // optional string thirdPid = 30;
  inline bool has_thirdpid() const;
  inline void clear_thirdpid();
  static const int kThirdPidFieldNumber = 30;
  inline const ::std::string& thirdpid() const;
  inline void set_thirdpid(const ::std::string& value);
  inline void set_thirdpid(const char* value);
  inline void set_thirdpid(const char* value, size_t size);
  inline ::std::string* mutable_thirdpid();
  inline ::std::string* release_thirdpid();
  inline void set_allocated_thirdpid(::std::string* thirdpid);

  // optional int32 isShare = 31;
  inline bool has_isshare() const;
  inline void clear_isshare();
  static const int kIsShareFieldNumber = 31;
  inline ::google::protobuf::int32 isshare() const;
  inline void set_isshare(::google::protobuf::int32 value);

  // optional int32 asUp = 32;
  inline bool has_asup() const;
  inline void clear_asup();
  static const int kAsUpFieldNumber = 32;
  inline ::google::protobuf::int32 asup() const;
  inline void set_asup(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.mm.pb.po.InputParamsPOJO)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_birthday();
  inline void clear_has_birthday();
  inline void set_has_faceurl();
  inline void clear_has_faceurl();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_mobile();
  inline void clear_has_mobile();
  inline void set_has_formal();
  inline void clear_has_formal();
  inline void set_has_iphonetoken();
  inline void clear_has_iphonetoken();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_facevedio();
  inline void clear_has_facevedio();
  inline void set_has_machineid();
  inline void clear_has_machineid();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_messagetype();
  inline void clear_has_messagetype();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_newpwd();
  inline void clear_has_newpwd();
  inline void set_has_oldpwd();
  inline void clear_has_oldpwd();
  inline void set_has_type1();
  inline void clear_has_type1();
  inline void set_has_type2();
  inline void clear_has_type2();
  inline void set_has_thirdwid();
  inline void clear_has_thirdwid();
  inline void set_has_thirdpid();
  inline void clear_has_thirdpid();
  inline void set_has_isshare();
  inline void clear_has_isshare();
  inline void set_has_asup();
  inline void clear_has_asup();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* nickname_;
  ::std::string* version_;
  ::std::string* password_;
  ::std::string* source_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 gender_;
  ::std::string* email_;
  ::google::protobuf::int64 birthday_;
  ::std::string* faceurl_;
  ::std::string* channel_;
  ::std::string* info_;
  ::std::string* mobile_;
  ::std::string* iphonetoken_;
  ::std::string* city_;
  ::std::string* facevedio_;
  ::google::protobuf::int32 formal_;
  ::google::protobuf::int32 messagetype_;
  ::std::string* machineid_;
  ::std::string* msg_;
  ::std::string* message_;
  ::google::protobuf::int32 radius_;
  float longitude_;
  ::std::string* newpwd_;
  float latitude_;
  ::google::protobuf::int32 type1_;
  ::std::string* oldpwd_;
  ::google::protobuf::int32 type2_;
  ::google::protobuf::int32 thirdwid_;
  ::std::string* thirdpid_;
  ::google::protobuf::int32 isshare_;
  ::google::protobuf::int32 asup_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(32 + 31) / 32];

  friend void  protobuf_AddDesc_InputParamsPOJO_2eproto();
  friend void protobuf_AssignDesc_InputParamsPOJO_2eproto();
  friend void protobuf_ShutdownFile_InputParamsPOJO_2eproto();

  void InitAsDefaultInstance();
  static InputParamsPOJO* default_instance_;
};
// ===================================================================


// ===================================================================

// InputParamsPOJO

// optional string username = 1;
inline bool InputParamsPOJO::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InputParamsPOJO::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InputParamsPOJO::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InputParamsPOJO::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& InputParamsPOJO::username() const {
  return *username_;
}
inline void InputParamsPOJO::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void InputParamsPOJO::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void InputParamsPOJO::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InputParamsPOJO::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* InputParamsPOJO::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InputParamsPOJO::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 uid = 2;
inline bool InputParamsPOJO::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InputParamsPOJO::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InputParamsPOJO::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InputParamsPOJO::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 InputParamsPOJO::uid() const {
  return uid_;
}
inline void InputParamsPOJO::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional string nickname = 3;
inline bool InputParamsPOJO::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InputParamsPOJO::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InputParamsPOJO::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InputParamsPOJO::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& InputParamsPOJO::nickname() const {
  return *nickname_;
}
inline void InputParamsPOJO::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void InputParamsPOJO::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void InputParamsPOJO::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InputParamsPOJO::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* InputParamsPOJO::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InputParamsPOJO::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string version = 4;
inline bool InputParamsPOJO::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InputParamsPOJO::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InputParamsPOJO::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InputParamsPOJO::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& InputParamsPOJO::version() const {
  return *version_;
}
inline void InputParamsPOJO::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void InputParamsPOJO::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void InputParamsPOJO::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InputParamsPOJO::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* InputParamsPOJO::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InputParamsPOJO::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 5;
inline bool InputParamsPOJO::has_password() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InputParamsPOJO::set_has_password() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InputParamsPOJO::clear_has_password() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InputParamsPOJO::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& InputParamsPOJO::password() const {
  return *password_;
}
inline void InputParamsPOJO::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void InputParamsPOJO::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void InputParamsPOJO::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InputParamsPOJO::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* InputParamsPOJO::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InputParamsPOJO::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string source = 6;
inline bool InputParamsPOJO::has_source() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InputParamsPOJO::set_has_source() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InputParamsPOJO::clear_has_source() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InputParamsPOJO::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& InputParamsPOJO::source() const {
  return *source_;
}
inline void InputParamsPOJO::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void InputParamsPOJO::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void InputParamsPOJO::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InputParamsPOJO::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* InputParamsPOJO::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InputParamsPOJO::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string email = 7;
inline bool InputParamsPOJO::has_email() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InputParamsPOJO::set_has_email() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InputParamsPOJO::clear_has_email() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InputParamsPOJO::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& InputParamsPOJO::email() const {
  return *email_;
}
inline void InputParamsPOJO::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void InputParamsPOJO::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void InputParamsPOJO::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InputParamsPOJO::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* InputParamsPOJO::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InputParamsPOJO::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 birthday = 8;
inline bool InputParamsPOJO::has_birthday() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InputParamsPOJO::set_has_birthday() {
  _has_bits_[0] |= 0x00000080u;
}
inline void InputParamsPOJO::clear_has_birthday() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void InputParamsPOJO::clear_birthday() {
  birthday_ = GOOGLE_LONGLONG(0);
  clear_has_birthday();
}
inline ::google::protobuf::int64 InputParamsPOJO::birthday() const {
  return birthday_;
}
inline void InputParamsPOJO::set_birthday(::google::protobuf::int64 value) {
  set_has_birthday();
  birthday_ = value;
}

// optional string faceUrl = 9;
inline bool InputParamsPOJO::has_faceurl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void InputParamsPOJO::set_has_faceurl() {
  _has_bits_[0] |= 0x00000100u;
}
inline void InputParamsPOJO::clear_has_faceurl() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void InputParamsPOJO::clear_faceurl() {
  if (faceurl_ != &::google::protobuf::internal::kEmptyString) {
    faceurl_->clear();
  }
  clear_has_faceurl();
}
inline const ::std::string& InputParamsPOJO::faceurl() const {
  return *faceurl_;
}
inline void InputParamsPOJO::set_faceurl(const ::std::string& value) {
  set_has_faceurl();
  if (faceurl_ == &::google::protobuf::internal::kEmptyString) {
    faceurl_ = new ::std::string;
  }
  faceurl_->assign(value);
}
inline void InputParamsPOJO::set_faceurl(const char* value) {
  set_has_faceurl();
  if (faceurl_ == &::google::protobuf::internal::kEmptyString) {
    faceurl_ = new ::std::string;
  }
  faceurl_->assign(value);
}
inline void InputParamsPOJO::set_faceurl(const char* value, size_t size) {
  set_has_faceurl();
  if (faceurl_ == &::google::protobuf::internal::kEmptyString) {
    faceurl_ = new ::std::string;
  }
  faceurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InputParamsPOJO::mutable_faceurl() {
  set_has_faceurl();
  if (faceurl_ == &::google::protobuf::internal::kEmptyString) {
    faceurl_ = new ::std::string;
  }
  return faceurl_;
}
inline ::std::string* InputParamsPOJO::release_faceurl() {
  clear_has_faceurl();
  if (faceurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = faceurl_;
    faceurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InputParamsPOJO::set_allocated_faceurl(::std::string* faceurl) {
  if (faceurl_ != &::google::protobuf::internal::kEmptyString) {
    delete faceurl_;
  }
  if (faceurl) {
    set_has_faceurl();
    faceurl_ = faceurl;
  } else {
    clear_has_faceurl();
    faceurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string channel = 10;
inline bool InputParamsPOJO::has_channel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void InputParamsPOJO::set_has_channel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void InputParamsPOJO::clear_has_channel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void InputParamsPOJO::clear_channel() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    channel_->clear();
  }
  clear_has_channel();
}
inline const ::std::string& InputParamsPOJO::channel() const {
  return *channel_;
}
inline void InputParamsPOJO::set_channel(const ::std::string& value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void InputParamsPOJO::set_channel(const char* value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void InputParamsPOJO::set_channel(const char* value, size_t size) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InputParamsPOJO::mutable_channel() {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  return channel_;
}
inline ::std::string* InputParamsPOJO::release_channel() {
  clear_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_;
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InputParamsPOJO::set_allocated_channel(::std::string* channel) {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (channel) {
    set_has_channel();
    channel_ = channel;
  } else {
    clear_has_channel();
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gender = 11;
inline bool InputParamsPOJO::has_gender() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void InputParamsPOJO::set_has_gender() {
  _has_bits_[0] |= 0x00000400u;
}
inline void InputParamsPOJO::clear_has_gender() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void InputParamsPOJO::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::google::protobuf::int32 InputParamsPOJO::gender() const {
  return gender_;
}
inline void InputParamsPOJO::set_gender(::google::protobuf::int32 value) {
  set_has_gender();
  gender_ = value;
}

// optional string info = 12;
inline bool InputParamsPOJO::has_info() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void InputParamsPOJO::set_has_info() {
  _has_bits_[0] |= 0x00000800u;
}
inline void InputParamsPOJO::clear_has_info() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void InputParamsPOJO::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& InputParamsPOJO::info() const {
  return *info_;
}
inline void InputParamsPOJO::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void InputParamsPOJO::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void InputParamsPOJO::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InputParamsPOJO::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* InputParamsPOJO::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InputParamsPOJO::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string mobile = 13;
inline bool InputParamsPOJO::has_mobile() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void InputParamsPOJO::set_has_mobile() {
  _has_bits_[0] |= 0x00001000u;
}
inline void InputParamsPOJO::clear_has_mobile() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void InputParamsPOJO::clear_mobile() {
  if (mobile_ != &::google::protobuf::internal::kEmptyString) {
    mobile_->clear();
  }
  clear_has_mobile();
}
inline const ::std::string& InputParamsPOJO::mobile() const {
  return *mobile_;
}
inline void InputParamsPOJO::set_mobile(const ::std::string& value) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
}
inline void InputParamsPOJO::set_mobile(const char* value) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
}
inline void InputParamsPOJO::set_mobile(const char* value, size_t size) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InputParamsPOJO::mutable_mobile() {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  return mobile_;
}
inline ::std::string* InputParamsPOJO::release_mobile() {
  clear_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mobile_;
    mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InputParamsPOJO::set_allocated_mobile(::std::string* mobile) {
  if (mobile_ != &::google::protobuf::internal::kEmptyString) {
    delete mobile_;
  }
  if (mobile) {
    set_has_mobile();
    mobile_ = mobile;
  } else {
    clear_has_mobile();
    mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 formal = 14;
inline bool InputParamsPOJO::has_formal() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void InputParamsPOJO::set_has_formal() {
  _has_bits_[0] |= 0x00002000u;
}
inline void InputParamsPOJO::clear_has_formal() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void InputParamsPOJO::clear_formal() {
  formal_ = 0;
  clear_has_formal();
}
inline ::google::protobuf::int32 InputParamsPOJO::formal() const {
  return formal_;
}
inline void InputParamsPOJO::set_formal(::google::protobuf::int32 value) {
  set_has_formal();
  formal_ = value;
}

// optional string iphoneToken = 15;
inline bool InputParamsPOJO::has_iphonetoken() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void InputParamsPOJO::set_has_iphonetoken() {
  _has_bits_[0] |= 0x00004000u;
}
inline void InputParamsPOJO::clear_has_iphonetoken() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void InputParamsPOJO::clear_iphonetoken() {
  if (iphonetoken_ != &::google::protobuf::internal::kEmptyString) {
    iphonetoken_->clear();
  }
  clear_has_iphonetoken();
}
inline const ::std::string& InputParamsPOJO::iphonetoken() const {
  return *iphonetoken_;
}
inline void InputParamsPOJO::set_iphonetoken(const ::std::string& value) {
  set_has_iphonetoken();
  if (iphonetoken_ == &::google::protobuf::internal::kEmptyString) {
    iphonetoken_ = new ::std::string;
  }
  iphonetoken_->assign(value);
}
inline void InputParamsPOJO::set_iphonetoken(const char* value) {
  set_has_iphonetoken();
  if (iphonetoken_ == &::google::protobuf::internal::kEmptyString) {
    iphonetoken_ = new ::std::string;
  }
  iphonetoken_->assign(value);
}
inline void InputParamsPOJO::set_iphonetoken(const char* value, size_t size) {
  set_has_iphonetoken();
  if (iphonetoken_ == &::google::protobuf::internal::kEmptyString) {
    iphonetoken_ = new ::std::string;
  }
  iphonetoken_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InputParamsPOJO::mutable_iphonetoken() {
  set_has_iphonetoken();
  if (iphonetoken_ == &::google::protobuf::internal::kEmptyString) {
    iphonetoken_ = new ::std::string;
  }
  return iphonetoken_;
}
inline ::std::string* InputParamsPOJO::release_iphonetoken() {
  clear_has_iphonetoken();
  if (iphonetoken_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = iphonetoken_;
    iphonetoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InputParamsPOJO::set_allocated_iphonetoken(::std::string* iphonetoken) {
  if (iphonetoken_ != &::google::protobuf::internal::kEmptyString) {
    delete iphonetoken_;
  }
  if (iphonetoken) {
    set_has_iphonetoken();
    iphonetoken_ = iphonetoken;
  } else {
    clear_has_iphonetoken();
    iphonetoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string city = 16;
inline bool InputParamsPOJO::has_city() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void InputParamsPOJO::set_has_city() {
  _has_bits_[0] |= 0x00008000u;
}
inline void InputParamsPOJO::clear_has_city() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void InputParamsPOJO::clear_city() {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& InputParamsPOJO::city() const {
  return *city_;
}
inline void InputParamsPOJO::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void InputParamsPOJO::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(value);
}
inline void InputParamsPOJO::set_city(const char* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InputParamsPOJO::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    city_ = new ::std::string;
  }
  return city_;
}
inline ::std::string* InputParamsPOJO::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InputParamsPOJO::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::kEmptyString) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string faceVedio = 17;
inline bool InputParamsPOJO::has_facevedio() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void InputParamsPOJO::set_has_facevedio() {
  _has_bits_[0] |= 0x00010000u;
}
inline void InputParamsPOJO::clear_has_facevedio() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void InputParamsPOJO::clear_facevedio() {
  if (facevedio_ != &::google::protobuf::internal::kEmptyString) {
    facevedio_->clear();
  }
  clear_has_facevedio();
}
inline const ::std::string& InputParamsPOJO::facevedio() const {
  return *facevedio_;
}
inline void InputParamsPOJO::set_facevedio(const ::std::string& value) {
  set_has_facevedio();
  if (facevedio_ == &::google::protobuf::internal::kEmptyString) {
    facevedio_ = new ::std::string;
  }
  facevedio_->assign(value);
}
inline void InputParamsPOJO::set_facevedio(const char* value) {
  set_has_facevedio();
  if (facevedio_ == &::google::protobuf::internal::kEmptyString) {
    facevedio_ = new ::std::string;
  }
  facevedio_->assign(value);
}
inline void InputParamsPOJO::set_facevedio(const char* value, size_t size) {
  set_has_facevedio();
  if (facevedio_ == &::google::protobuf::internal::kEmptyString) {
    facevedio_ = new ::std::string;
  }
  facevedio_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InputParamsPOJO::mutable_facevedio() {
  set_has_facevedio();
  if (facevedio_ == &::google::protobuf::internal::kEmptyString) {
    facevedio_ = new ::std::string;
  }
  return facevedio_;
}
inline ::std::string* InputParamsPOJO::release_facevedio() {
  clear_has_facevedio();
  if (facevedio_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = facevedio_;
    facevedio_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InputParamsPOJO::set_allocated_facevedio(::std::string* facevedio) {
  if (facevedio_ != &::google::protobuf::internal::kEmptyString) {
    delete facevedio_;
  }
  if (facevedio) {
    set_has_facevedio();
    facevedio_ = facevedio;
  } else {
    clear_has_facevedio();
    facevedio_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string machineId = 18;
inline bool InputParamsPOJO::has_machineid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void InputParamsPOJO::set_has_machineid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void InputParamsPOJO::clear_has_machineid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void InputParamsPOJO::clear_machineid() {
  if (machineid_ != &::google::protobuf::internal::kEmptyString) {
    machineid_->clear();
  }
  clear_has_machineid();
}
inline const ::std::string& InputParamsPOJO::machineid() const {
  return *machineid_;
}
inline void InputParamsPOJO::set_machineid(const ::std::string& value) {
  set_has_machineid();
  if (machineid_ == &::google::protobuf::internal::kEmptyString) {
    machineid_ = new ::std::string;
  }
  machineid_->assign(value);
}
inline void InputParamsPOJO::set_machineid(const char* value) {
  set_has_machineid();
  if (machineid_ == &::google::protobuf::internal::kEmptyString) {
    machineid_ = new ::std::string;
  }
  machineid_->assign(value);
}
inline void InputParamsPOJO::set_machineid(const char* value, size_t size) {
  set_has_machineid();
  if (machineid_ == &::google::protobuf::internal::kEmptyString) {
    machineid_ = new ::std::string;
  }
  machineid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InputParamsPOJO::mutable_machineid() {
  set_has_machineid();
  if (machineid_ == &::google::protobuf::internal::kEmptyString) {
    machineid_ = new ::std::string;
  }
  return machineid_;
}
inline ::std::string* InputParamsPOJO::release_machineid() {
  clear_has_machineid();
  if (machineid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = machineid_;
    machineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InputParamsPOJO::set_allocated_machineid(::std::string* machineid) {
  if (machineid_ != &::google::protobuf::internal::kEmptyString) {
    delete machineid_;
  }
  if (machineid) {
    set_has_machineid();
    machineid_ = machineid;
  } else {
    clear_has_machineid();
    machineid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string msg = 19;
inline bool InputParamsPOJO::has_msg() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void InputParamsPOJO::set_has_msg() {
  _has_bits_[0] |= 0x00040000u;
}
inline void InputParamsPOJO::clear_has_msg() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void InputParamsPOJO::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& InputParamsPOJO::msg() const {
  return *msg_;
}
inline void InputParamsPOJO::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void InputParamsPOJO::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void InputParamsPOJO::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InputParamsPOJO::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* InputParamsPOJO::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InputParamsPOJO::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 messageType = 20;
inline bool InputParamsPOJO::has_messagetype() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void InputParamsPOJO::set_has_messagetype() {
  _has_bits_[0] |= 0x00080000u;
}
inline void InputParamsPOJO::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void InputParamsPOJO::clear_messagetype() {
  messagetype_ = 0;
  clear_has_messagetype();
}
inline ::google::protobuf::int32 InputParamsPOJO::messagetype() const {
  return messagetype_;
}
inline void InputParamsPOJO::set_messagetype(::google::protobuf::int32 value) {
  set_has_messagetype();
  messagetype_ = value;
}

// optional string message = 21;
inline bool InputParamsPOJO::has_message() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void InputParamsPOJO::set_has_message() {
  _has_bits_[0] |= 0x00100000u;
}
inline void InputParamsPOJO::clear_has_message() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void InputParamsPOJO::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& InputParamsPOJO::message() const {
  return *message_;
}
inline void InputParamsPOJO::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void InputParamsPOJO::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void InputParamsPOJO::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InputParamsPOJO::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* InputParamsPOJO::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InputParamsPOJO::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 radius = 22;
inline bool InputParamsPOJO::has_radius() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void InputParamsPOJO::set_has_radius() {
  _has_bits_[0] |= 0x00200000u;
}
inline void InputParamsPOJO::clear_has_radius() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void InputParamsPOJO::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline ::google::protobuf::int32 InputParamsPOJO::radius() const {
  return radius_;
}
inline void InputParamsPOJO::set_radius(::google::protobuf::int32 value) {
  set_has_radius();
  radius_ = value;
}

// optional float longitude = 23;
inline bool InputParamsPOJO::has_longitude() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void InputParamsPOJO::set_has_longitude() {
  _has_bits_[0] |= 0x00400000u;
}
inline void InputParamsPOJO::clear_has_longitude() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void InputParamsPOJO::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline float InputParamsPOJO::longitude() const {
  return longitude_;
}
inline void InputParamsPOJO::set_longitude(float value) {
  set_has_longitude();
  longitude_ = value;
}

// optional float latitude = 24;
inline bool InputParamsPOJO::has_latitude() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void InputParamsPOJO::set_has_latitude() {
  _has_bits_[0] |= 0x00800000u;
}
inline void InputParamsPOJO::clear_has_latitude() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void InputParamsPOJO::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline float InputParamsPOJO::latitude() const {
  return latitude_;
}
inline void InputParamsPOJO::set_latitude(float value) {
  set_has_latitude();
  latitude_ = value;
}

// optional string newPwd = 25;
inline bool InputParamsPOJO::has_newpwd() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void InputParamsPOJO::set_has_newpwd() {
  _has_bits_[0] |= 0x01000000u;
}
inline void InputParamsPOJO::clear_has_newpwd() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void InputParamsPOJO::clear_newpwd() {
  if (newpwd_ != &::google::protobuf::internal::kEmptyString) {
    newpwd_->clear();
  }
  clear_has_newpwd();
}
inline const ::std::string& InputParamsPOJO::newpwd() const {
  return *newpwd_;
}
inline void InputParamsPOJO::set_newpwd(const ::std::string& value) {
  set_has_newpwd();
  if (newpwd_ == &::google::protobuf::internal::kEmptyString) {
    newpwd_ = new ::std::string;
  }
  newpwd_->assign(value);
}
inline void InputParamsPOJO::set_newpwd(const char* value) {
  set_has_newpwd();
  if (newpwd_ == &::google::protobuf::internal::kEmptyString) {
    newpwd_ = new ::std::string;
  }
  newpwd_->assign(value);
}
inline void InputParamsPOJO::set_newpwd(const char* value, size_t size) {
  set_has_newpwd();
  if (newpwd_ == &::google::protobuf::internal::kEmptyString) {
    newpwd_ = new ::std::string;
  }
  newpwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InputParamsPOJO::mutable_newpwd() {
  set_has_newpwd();
  if (newpwd_ == &::google::protobuf::internal::kEmptyString) {
    newpwd_ = new ::std::string;
  }
  return newpwd_;
}
inline ::std::string* InputParamsPOJO::release_newpwd() {
  clear_has_newpwd();
  if (newpwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = newpwd_;
    newpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InputParamsPOJO::set_allocated_newpwd(::std::string* newpwd) {
  if (newpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete newpwd_;
  }
  if (newpwd) {
    set_has_newpwd();
    newpwd_ = newpwd;
  } else {
    clear_has_newpwd();
    newpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string oldPwd = 26;
inline bool InputParamsPOJO::has_oldpwd() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void InputParamsPOJO::set_has_oldpwd() {
  _has_bits_[0] |= 0x02000000u;
}
inline void InputParamsPOJO::clear_has_oldpwd() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void InputParamsPOJO::clear_oldpwd() {
  if (oldpwd_ != &::google::protobuf::internal::kEmptyString) {
    oldpwd_->clear();
  }
  clear_has_oldpwd();
}
inline const ::std::string& InputParamsPOJO::oldpwd() const {
  return *oldpwd_;
}
inline void InputParamsPOJO::set_oldpwd(const ::std::string& value) {
  set_has_oldpwd();
  if (oldpwd_ == &::google::protobuf::internal::kEmptyString) {
    oldpwd_ = new ::std::string;
  }
  oldpwd_->assign(value);
}
inline void InputParamsPOJO::set_oldpwd(const char* value) {
  set_has_oldpwd();
  if (oldpwd_ == &::google::protobuf::internal::kEmptyString) {
    oldpwd_ = new ::std::string;
  }
  oldpwd_->assign(value);
}
inline void InputParamsPOJO::set_oldpwd(const char* value, size_t size) {
  set_has_oldpwd();
  if (oldpwd_ == &::google::protobuf::internal::kEmptyString) {
    oldpwd_ = new ::std::string;
  }
  oldpwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InputParamsPOJO::mutable_oldpwd() {
  set_has_oldpwd();
  if (oldpwd_ == &::google::protobuf::internal::kEmptyString) {
    oldpwd_ = new ::std::string;
  }
  return oldpwd_;
}
inline ::std::string* InputParamsPOJO::release_oldpwd() {
  clear_has_oldpwd();
  if (oldpwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oldpwd_;
    oldpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InputParamsPOJO::set_allocated_oldpwd(::std::string* oldpwd) {
  if (oldpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete oldpwd_;
  }
  if (oldpwd) {
    set_has_oldpwd();
    oldpwd_ = oldpwd;
  } else {
    clear_has_oldpwd();
    oldpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 type1 = 27;
inline bool InputParamsPOJO::has_type1() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void InputParamsPOJO::set_has_type1() {
  _has_bits_[0] |= 0x04000000u;
}
inline void InputParamsPOJO::clear_has_type1() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void InputParamsPOJO::clear_type1() {
  type1_ = 0;
  clear_has_type1();
}
inline ::google::protobuf::int32 InputParamsPOJO::type1() const {
  return type1_;
}
inline void InputParamsPOJO::set_type1(::google::protobuf::int32 value) {
  set_has_type1();
  type1_ = value;
}

// optional int32 type2 = 28;
inline bool InputParamsPOJO::has_type2() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void InputParamsPOJO::set_has_type2() {
  _has_bits_[0] |= 0x08000000u;
}
inline void InputParamsPOJO::clear_has_type2() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void InputParamsPOJO::clear_type2() {
  type2_ = 0;
  clear_has_type2();
}
inline ::google::protobuf::int32 InputParamsPOJO::type2() const {
  return type2_;
}
inline void InputParamsPOJO::set_type2(::google::protobuf::int32 value) {
  set_has_type2();
  type2_ = value;
}

// optional int32 thirdWid = 29;
inline bool InputParamsPOJO::has_thirdwid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void InputParamsPOJO::set_has_thirdwid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void InputParamsPOJO::clear_has_thirdwid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void InputParamsPOJO::clear_thirdwid() {
  thirdwid_ = 0;
  clear_has_thirdwid();
}
inline ::google::protobuf::int32 InputParamsPOJO::thirdwid() const {
  return thirdwid_;
}
inline void InputParamsPOJO::set_thirdwid(::google::protobuf::int32 value) {
  set_has_thirdwid();
  thirdwid_ = value;
}

// optional string thirdPid = 30;
inline bool InputParamsPOJO::has_thirdpid() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void InputParamsPOJO::set_has_thirdpid() {
  _has_bits_[0] |= 0x20000000u;
}
inline void InputParamsPOJO::clear_has_thirdpid() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void InputParamsPOJO::clear_thirdpid() {
  if (thirdpid_ != &::google::protobuf::internal::kEmptyString) {
    thirdpid_->clear();
  }
  clear_has_thirdpid();
}
inline const ::std::string& InputParamsPOJO::thirdpid() const {
  return *thirdpid_;
}
inline void InputParamsPOJO::set_thirdpid(const ::std::string& value) {
  set_has_thirdpid();
  if (thirdpid_ == &::google::protobuf::internal::kEmptyString) {
    thirdpid_ = new ::std::string;
  }
  thirdpid_->assign(value);
}
inline void InputParamsPOJO::set_thirdpid(const char* value) {
  set_has_thirdpid();
  if (thirdpid_ == &::google::protobuf::internal::kEmptyString) {
    thirdpid_ = new ::std::string;
  }
  thirdpid_->assign(value);
}
inline void InputParamsPOJO::set_thirdpid(const char* value, size_t size) {
  set_has_thirdpid();
  if (thirdpid_ == &::google::protobuf::internal::kEmptyString) {
    thirdpid_ = new ::std::string;
  }
  thirdpid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InputParamsPOJO::mutable_thirdpid() {
  set_has_thirdpid();
  if (thirdpid_ == &::google::protobuf::internal::kEmptyString) {
    thirdpid_ = new ::std::string;
  }
  return thirdpid_;
}
inline ::std::string* InputParamsPOJO::release_thirdpid() {
  clear_has_thirdpid();
  if (thirdpid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = thirdpid_;
    thirdpid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InputParamsPOJO::set_allocated_thirdpid(::std::string* thirdpid) {
  if (thirdpid_ != &::google::protobuf::internal::kEmptyString) {
    delete thirdpid_;
  }
  if (thirdpid) {
    set_has_thirdpid();
    thirdpid_ = thirdpid;
  } else {
    clear_has_thirdpid();
    thirdpid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 isShare = 31;
inline bool InputParamsPOJO::has_isshare() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void InputParamsPOJO::set_has_isshare() {
  _has_bits_[0] |= 0x40000000u;
}
inline void InputParamsPOJO::clear_has_isshare() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void InputParamsPOJO::clear_isshare() {
  isshare_ = 0;
  clear_has_isshare();
}
inline ::google::protobuf::int32 InputParamsPOJO::isshare() const {
  return isshare_;
}
inline void InputParamsPOJO::set_isshare(::google::protobuf::int32 value) {
  set_has_isshare();
  isshare_ = value;
}

// optional int32 asUp = 32;
inline bool InputParamsPOJO::has_asup() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void InputParamsPOJO::set_has_asup() {
  _has_bits_[0] |= 0x80000000u;
}
inline void InputParamsPOJO::clear_has_asup() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void InputParamsPOJO::clear_asup() {
  asup_ = 0;
  clear_has_asup();
}
inline ::google::protobuf::int32 InputParamsPOJO::asup() const {
  return asup_;
}
inline void InputParamsPOJO::set_asup(::google::protobuf::int32 value) {
  set_has_asup();
  asup_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace po
}  // namespace pb
}  // namespace mm
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_InputParamsPOJO_2eproto__INCLUDED
