// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: requestParam.proto

#ifndef PROTOBUF_requestParam_2eproto__INCLUDED
#define PROTOBUF_requestParam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tutorial {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_requestParam_2eproto();
void protobuf_AssignDesc_requestParam_2eproto();
void protobuf_ShutdownFile_requestParam_2eproto();

class RequestParam;
class RequestParam_Param;

// ===================================================================

class RequestParam_Param : public ::google::protobuf::Message {
 public:
  RequestParam_Param();
  virtual ~RequestParam_Param();

  RequestParam_Param(const RequestParam_Param& from);

  inline RequestParam_Param& operator=(const RequestParam_Param& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestParam_Param& default_instance();

  void Swap(RequestParam_Param* other);

  // implements Message ----------------------------------------------

  RequestParam_Param* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestParam_Param& from);
  void MergeFrom(const RequestParam_Param& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string paramKey = 1;
  inline bool has_paramkey() const;
  inline void clear_paramkey();
  static const int kParamKeyFieldNumber = 1;
  inline const ::std::string& paramkey() const;
  inline void set_paramkey(const ::std::string& value);
  inline void set_paramkey(const char* value);
  inline void set_paramkey(const char* value, size_t size);
  inline ::std::string* mutable_paramkey();
  inline ::std::string* release_paramkey();
  inline void set_allocated_paramkey(::std::string* paramkey);

  // required string paramValue = 2;
  inline bool has_paramvalue() const;
  inline void clear_paramvalue();
  static const int kParamValueFieldNumber = 2;
  inline const ::std::string& paramvalue() const;
  inline void set_paramvalue(const ::std::string& value);
  inline void set_paramvalue(const char* value);
  inline void set_paramvalue(const char* value, size_t size);
  inline ::std::string* mutable_paramvalue();
  inline ::std::string* release_paramvalue();
  inline void set_allocated_paramvalue(::std::string* paramvalue);

  // @@protoc_insertion_point(class_scope:tutorial.RequestParam.Param)
 private:
  inline void set_has_paramkey();
  inline void clear_has_paramkey();
  inline void set_has_paramvalue();
  inline void clear_has_paramvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* paramkey_;
  ::std::string* paramvalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_requestParam_2eproto();
  friend void protobuf_AssignDesc_requestParam_2eproto();
  friend void protobuf_ShutdownFile_requestParam_2eproto();

  void InitAsDefaultInstance();
  static RequestParam_Param* default_instance_;
};
// -------------------------------------------------------------------

class RequestParam : public ::google::protobuf::Message {
 public:
  RequestParam();
  virtual ~RequestParam();

  RequestParam(const RequestParam& from);

  inline RequestParam& operator=(const RequestParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestParam& default_instance();

  void Swap(RequestParam* other);

  // implements Message ----------------------------------------------

  RequestParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestParam& from);
  void MergeFrom(const RequestParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RequestParam_Param Param;

  // accessors -------------------------------------------------------

  // required string queueName = 1;
  inline bool has_queuename() const;
  inline void clear_queuename();
  static const int kQueueNameFieldNumber = 1;
  inline const ::std::string& queuename() const;
  inline void set_queuename(const ::std::string& value);
  inline void set_queuename(const char* value);
  inline void set_queuename(const char* value, size_t size);
  inline ::std::string* mutable_queuename();
  inline ::std::string* release_queuename();
  inline void set_allocated_queuename(::std::string* queuename);

  // required string methodName = 2;
  inline bool has_methodname() const;
  inline void clear_methodname();
  static const int kMethodNameFieldNumber = 2;
  inline const ::std::string& methodname() const;
  inline void set_methodname(const ::std::string& value);
  inline void set_methodname(const char* value);
  inline void set_methodname(const char* value, size_t size);
  inline ::std::string* mutable_methodname();
  inline ::std::string* release_methodname();
  inline void set_allocated_methodname(::std::string* methodname);

  // repeated .tutorial.RequestParam.Param param = 3;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 3;
  inline const ::tutorial::RequestParam_Param& param(int index) const;
  inline ::tutorial::RequestParam_Param* mutable_param(int index);
  inline ::tutorial::RequestParam_Param* add_param();
  inline const ::google::protobuf::RepeatedPtrField< ::tutorial::RequestParam_Param >&
      param() const;
  inline ::google::protobuf::RepeatedPtrField< ::tutorial::RequestParam_Param >*
      mutable_param();

  // @@protoc_insertion_point(class_scope:tutorial.RequestParam)
 private:
  inline void set_has_queuename();
  inline void clear_has_queuename();
  inline void set_has_methodname();
  inline void clear_has_methodname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* queuename_;
  ::std::string* methodname_;
  ::google::protobuf::RepeatedPtrField< ::tutorial::RequestParam_Param > param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_requestParam_2eproto();
  friend void protobuf_AssignDesc_requestParam_2eproto();
  friend void protobuf_ShutdownFile_requestParam_2eproto();

  void InitAsDefaultInstance();
  static RequestParam* default_instance_;
};
// ===================================================================


// ===================================================================

// RequestParam_Param

// required string paramKey = 1;
inline bool RequestParam_Param::has_paramkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestParam_Param::set_has_paramkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestParam_Param::clear_has_paramkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestParam_Param::clear_paramkey() {
  if (paramkey_ != &::google::protobuf::internal::kEmptyString) {
    paramkey_->clear();
  }
  clear_has_paramkey();
}
inline const ::std::string& RequestParam_Param::paramkey() const {
  return *paramkey_;
}
inline void RequestParam_Param::set_paramkey(const ::std::string& value) {
  set_has_paramkey();
  if (paramkey_ == &::google::protobuf::internal::kEmptyString) {
    paramkey_ = new ::std::string;
  }
  paramkey_->assign(value);
}
inline void RequestParam_Param::set_paramkey(const char* value) {
  set_has_paramkey();
  if (paramkey_ == &::google::protobuf::internal::kEmptyString) {
    paramkey_ = new ::std::string;
  }
  paramkey_->assign(value);
}
inline void RequestParam_Param::set_paramkey(const char* value, size_t size) {
  set_has_paramkey();
  if (paramkey_ == &::google::protobuf::internal::kEmptyString) {
    paramkey_ = new ::std::string;
  }
  paramkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestParam_Param::mutable_paramkey() {
  set_has_paramkey();
  if (paramkey_ == &::google::protobuf::internal::kEmptyString) {
    paramkey_ = new ::std::string;
  }
  return paramkey_;
}
inline ::std::string* RequestParam_Param::release_paramkey() {
  clear_has_paramkey();
  if (paramkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = paramkey_;
    paramkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestParam_Param::set_allocated_paramkey(::std::string* paramkey) {
  if (paramkey_ != &::google::protobuf::internal::kEmptyString) {
    delete paramkey_;
  }
  if (paramkey) {
    set_has_paramkey();
    paramkey_ = paramkey;
  } else {
    clear_has_paramkey();
    paramkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string paramValue = 2;
inline bool RequestParam_Param::has_paramvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestParam_Param::set_has_paramvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestParam_Param::clear_has_paramvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestParam_Param::clear_paramvalue() {
  if (paramvalue_ != &::google::protobuf::internal::kEmptyString) {
    paramvalue_->clear();
  }
  clear_has_paramvalue();
}
inline const ::std::string& RequestParam_Param::paramvalue() const {
  return *paramvalue_;
}
inline void RequestParam_Param::set_paramvalue(const ::std::string& value) {
  set_has_paramvalue();
  if (paramvalue_ == &::google::protobuf::internal::kEmptyString) {
    paramvalue_ = new ::std::string;
  }
  paramvalue_->assign(value);
}
inline void RequestParam_Param::set_paramvalue(const char* value) {
  set_has_paramvalue();
  if (paramvalue_ == &::google::protobuf::internal::kEmptyString) {
    paramvalue_ = new ::std::string;
  }
  paramvalue_->assign(value);
}
inline void RequestParam_Param::set_paramvalue(const char* value, size_t size) {
  set_has_paramvalue();
  if (paramvalue_ == &::google::protobuf::internal::kEmptyString) {
    paramvalue_ = new ::std::string;
  }
  paramvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestParam_Param::mutable_paramvalue() {
  set_has_paramvalue();
  if (paramvalue_ == &::google::protobuf::internal::kEmptyString) {
    paramvalue_ = new ::std::string;
  }
  return paramvalue_;
}
inline ::std::string* RequestParam_Param::release_paramvalue() {
  clear_has_paramvalue();
  if (paramvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = paramvalue_;
    paramvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestParam_Param::set_allocated_paramvalue(::std::string* paramvalue) {
  if (paramvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete paramvalue_;
  }
  if (paramvalue) {
    set_has_paramvalue();
    paramvalue_ = paramvalue;
  } else {
    clear_has_paramvalue();
    paramvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RequestParam

// required string queueName = 1;
inline bool RequestParam::has_queuename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestParam::set_has_queuename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestParam::clear_has_queuename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestParam::clear_queuename() {
  if (queuename_ != &::google::protobuf::internal::kEmptyString) {
    queuename_->clear();
  }
  clear_has_queuename();
}
inline const ::std::string& RequestParam::queuename() const {
  return *queuename_;
}
inline void RequestParam::set_queuename(const ::std::string& value) {
  set_has_queuename();
  if (queuename_ == &::google::protobuf::internal::kEmptyString) {
    queuename_ = new ::std::string;
  }
  queuename_->assign(value);
}
inline void RequestParam::set_queuename(const char* value) {
  set_has_queuename();
  if (queuename_ == &::google::protobuf::internal::kEmptyString) {
    queuename_ = new ::std::string;
  }
  queuename_->assign(value);
}
inline void RequestParam::set_queuename(const char* value, size_t size) {
  set_has_queuename();
  if (queuename_ == &::google::protobuf::internal::kEmptyString) {
    queuename_ = new ::std::string;
  }
  queuename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestParam::mutable_queuename() {
  set_has_queuename();
  if (queuename_ == &::google::protobuf::internal::kEmptyString) {
    queuename_ = new ::std::string;
  }
  return queuename_;
}
inline ::std::string* RequestParam::release_queuename() {
  clear_has_queuename();
  if (queuename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = queuename_;
    queuename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestParam::set_allocated_queuename(::std::string* queuename) {
  if (queuename_ != &::google::protobuf::internal::kEmptyString) {
    delete queuename_;
  }
  if (queuename) {
    set_has_queuename();
    queuename_ = queuename;
  } else {
    clear_has_queuename();
    queuename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string methodName = 2;
inline bool RequestParam::has_methodname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestParam::set_has_methodname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestParam::clear_has_methodname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestParam::clear_methodname() {
  if (methodname_ != &::google::protobuf::internal::kEmptyString) {
    methodname_->clear();
  }
  clear_has_methodname();
}
inline const ::std::string& RequestParam::methodname() const {
  return *methodname_;
}
inline void RequestParam::set_methodname(const ::std::string& value) {
  set_has_methodname();
  if (methodname_ == &::google::protobuf::internal::kEmptyString) {
    methodname_ = new ::std::string;
  }
  methodname_->assign(value);
}
inline void RequestParam::set_methodname(const char* value) {
  set_has_methodname();
  if (methodname_ == &::google::protobuf::internal::kEmptyString) {
    methodname_ = new ::std::string;
  }
  methodname_->assign(value);
}
inline void RequestParam::set_methodname(const char* value, size_t size) {
  set_has_methodname();
  if (methodname_ == &::google::protobuf::internal::kEmptyString) {
    methodname_ = new ::std::string;
  }
  methodname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestParam::mutable_methodname() {
  set_has_methodname();
  if (methodname_ == &::google::protobuf::internal::kEmptyString) {
    methodname_ = new ::std::string;
  }
  return methodname_;
}
inline ::std::string* RequestParam::release_methodname() {
  clear_has_methodname();
  if (methodname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = methodname_;
    methodname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestParam::set_allocated_methodname(::std::string* methodname) {
  if (methodname_ != &::google::protobuf::internal::kEmptyString) {
    delete methodname_;
  }
  if (methodname) {
    set_has_methodname();
    methodname_ = methodname;
  } else {
    clear_has_methodname();
    methodname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .tutorial.RequestParam.Param param = 3;
inline int RequestParam::param_size() const {
  return param_.size();
}
inline void RequestParam::clear_param() {
  param_.Clear();
}
inline const ::tutorial::RequestParam_Param& RequestParam::param(int index) const {
  return param_.Get(index);
}
inline ::tutorial::RequestParam_Param* RequestParam::mutable_param(int index) {
  return param_.Mutable(index);
}
inline ::tutorial::RequestParam_Param* RequestParam::add_param() {
  return param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tutorial::RequestParam_Param >&
RequestParam::param() const {
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::tutorial::RequestParam_Param >*
RequestParam::mutable_param() {
  return &param_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_requestParam_2eproto__INCLUDED
