// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ResultFilterOut.proto

#ifndef PROTOBUF_ResultFilterOut_2eproto__INCLUDED
#define PROTOBUF_ResultFilterOut_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace mm {
namespace pb {
namespace po {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ResultFilterOut_2eproto();
void protobuf_AssignDesc_ResultFilterOut_2eproto();
void protobuf_ShutdownFile_ResultFilterOut_2eproto();

class ResultFilterOut;
class FilterResult;

// ===================================================================

class ResultFilterOut : public ::google::protobuf::Message {
 public:
  ResultFilterOut();
  virtual ~ResultFilterOut();

  ResultFilterOut(const ResultFilterOut& from);

  inline ResultFilterOut& operator=(const ResultFilterOut& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultFilterOut& default_instance();

  void Swap(ResultFilterOut* other);

  // implements Message ----------------------------------------------

  ResultFilterOut* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResultFilterOut& from);
  void MergeFrom(const ResultFilterOut& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.mm.pb.po.FilterResult resouceList = 1;
  inline int resoucelist_size() const;
  inline void clear_resoucelist();
  static const int kResouceListFieldNumber = 1;
  inline const ::com::mm::pb::po::FilterResult& resoucelist(int index) const;
  inline ::com::mm::pb::po::FilterResult* mutable_resoucelist(int index);
  inline ::com::mm::pb::po::FilterResult* add_resoucelist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::mm::pb::po::FilterResult >&
      resoucelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::mm::pb::po::FilterResult >*
      mutable_resoucelist();

  // optional int32 resultCode = 2;
  inline bool has_resultcode() const;
  inline void clear_resultcode();
  static const int kResultCodeFieldNumber = 2;
  inline ::google::protobuf::int32 resultcode() const;
  inline void set_resultcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.mm.pb.po.ResultFilterOut)
 private:
  inline void set_has_resultcode();
  inline void clear_has_resultcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::com::mm::pb::po::FilterResult > resoucelist_;
  ::google::protobuf::int32 resultcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ResultFilterOut_2eproto();
  friend void protobuf_AssignDesc_ResultFilterOut_2eproto();
  friend void protobuf_ShutdownFile_ResultFilterOut_2eproto();

  void InitAsDefaultInstance();
  static ResultFilterOut* default_instance_;
};
// -------------------------------------------------------------------

class FilterResult : public ::google::protobuf::Message {
 public:
  FilterResult();
  virtual ~FilterResult();

  FilterResult(const FilterResult& from);

  inline FilterResult& operator=(const FilterResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FilterResult& default_instance();

  void Swap(FilterResult* other);

  // implements Message ----------------------------------------------

  FilterResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FilterResult& from);
  void MergeFrom(const FilterResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type1 = 1;
  inline bool has_type1() const;
  inline void clear_type1();
  static const int kType1FieldNumber = 1;
  inline ::google::protobuf::int32 type1() const;
  inline void set_type1(::google::protobuf::int32 value);

  // optional int32 type2 = 2;
  inline bool has_type2() const;
  inline void clear_type2();
  static const int kType2FieldNumber = 2;
  inline ::google::protobuf::int32 type2() const;
  inline void set_type2(::google::protobuf::int32 value);

  // optional string key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string desc = 4;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 4;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional string descPhoto = 5;
  inline bool has_descphoto() const;
  inline void clear_descphoto();
  static const int kDescPhotoFieldNumber = 5;
  inline const ::std::string& descphoto() const;
  inline void set_descphoto(const ::std::string& value);
  inline void set_descphoto(const char* value);
  inline void set_descphoto(const char* value, size_t size);
  inline ::std::string* mutable_descphoto();
  inline ::std::string* release_descphoto();
  inline void set_allocated_descphoto(::std::string* descphoto);

  // @@protoc_insertion_point(class_scope:com.mm.pb.po.FilterResult)
 private:
  inline void set_has_type1();
  inline void clear_has_type1();
  inline void set_has_type2();
  inline void clear_has_type2();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_descphoto();
  inline void clear_has_descphoto();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type1_;
  ::google::protobuf::int32 type2_;
  ::std::string* key_;
  ::std::string* desc_;
  ::std::string* descphoto_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ResultFilterOut_2eproto();
  friend void protobuf_AssignDesc_ResultFilterOut_2eproto();
  friend void protobuf_ShutdownFile_ResultFilterOut_2eproto();

  void InitAsDefaultInstance();
  static FilterResult* default_instance_;
};
// ===================================================================


// ===================================================================

// ResultFilterOut

// repeated .com.mm.pb.po.FilterResult resouceList = 1;
inline int ResultFilterOut::resoucelist_size() const {
  return resoucelist_.size();
}
inline void ResultFilterOut::clear_resoucelist() {
  resoucelist_.Clear();
}
inline const ::com::mm::pb::po::FilterResult& ResultFilterOut::resoucelist(int index) const {
  return resoucelist_.Get(index);
}
inline ::com::mm::pb::po::FilterResult* ResultFilterOut::mutable_resoucelist(int index) {
  return resoucelist_.Mutable(index);
}
inline ::com::mm::pb::po::FilterResult* ResultFilterOut::add_resoucelist() {
  return resoucelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::mm::pb::po::FilterResult >&
ResultFilterOut::resoucelist() const {
  return resoucelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::mm::pb::po::FilterResult >*
ResultFilterOut::mutable_resoucelist() {
  return &resoucelist_;
}

// optional int32 resultCode = 2;
inline bool ResultFilterOut::has_resultcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResultFilterOut::set_has_resultcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResultFilterOut::clear_has_resultcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResultFilterOut::clear_resultcode() {
  resultcode_ = 0;
  clear_has_resultcode();
}
inline ::google::protobuf::int32 ResultFilterOut::resultcode() const {
  return resultcode_;
}
inline void ResultFilterOut::set_resultcode(::google::protobuf::int32 value) {
  set_has_resultcode();
  resultcode_ = value;
}

// -------------------------------------------------------------------

// FilterResult

// optional int32 type1 = 1;
inline bool FilterResult::has_type1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FilterResult::set_has_type1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FilterResult::clear_has_type1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FilterResult::clear_type1() {
  type1_ = 0;
  clear_has_type1();
}
inline ::google::protobuf::int32 FilterResult::type1() const {
  return type1_;
}
inline void FilterResult::set_type1(::google::protobuf::int32 value) {
  set_has_type1();
  type1_ = value;
}

// optional int32 type2 = 2;
inline bool FilterResult::has_type2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FilterResult::set_has_type2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FilterResult::clear_has_type2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FilterResult::clear_type2() {
  type2_ = 0;
  clear_has_type2();
}
inline ::google::protobuf::int32 FilterResult::type2() const {
  return type2_;
}
inline void FilterResult::set_type2(::google::protobuf::int32 value) {
  set_has_type2();
  type2_ = value;
}

// optional string key = 3;
inline bool FilterResult::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FilterResult::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FilterResult::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FilterResult::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& FilterResult::key() const {
  return *key_;
}
inline void FilterResult::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void FilterResult::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void FilterResult::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilterResult::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* FilterResult::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FilterResult::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string desc = 4;
inline bool FilterResult::has_desc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FilterResult::set_has_desc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FilterResult::clear_has_desc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FilterResult::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& FilterResult::desc() const {
  return *desc_;
}
inline void FilterResult::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void FilterResult::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void FilterResult::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilterResult::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* FilterResult::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FilterResult::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string descPhoto = 5;
inline bool FilterResult::has_descphoto() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FilterResult::set_has_descphoto() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FilterResult::clear_has_descphoto() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FilterResult::clear_descphoto() {
  if (descphoto_ != &::google::protobuf::internal::kEmptyString) {
    descphoto_->clear();
  }
  clear_has_descphoto();
}
inline const ::std::string& FilterResult::descphoto() const {
  return *descphoto_;
}
inline void FilterResult::set_descphoto(const ::std::string& value) {
  set_has_descphoto();
  if (descphoto_ == &::google::protobuf::internal::kEmptyString) {
    descphoto_ = new ::std::string;
  }
  descphoto_->assign(value);
}
inline void FilterResult::set_descphoto(const char* value) {
  set_has_descphoto();
  if (descphoto_ == &::google::protobuf::internal::kEmptyString) {
    descphoto_ = new ::std::string;
  }
  descphoto_->assign(value);
}
inline void FilterResult::set_descphoto(const char* value, size_t size) {
  set_has_descphoto();
  if (descphoto_ == &::google::protobuf::internal::kEmptyString) {
    descphoto_ = new ::std::string;
  }
  descphoto_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FilterResult::mutable_descphoto() {
  set_has_descphoto();
  if (descphoto_ == &::google::protobuf::internal::kEmptyString) {
    descphoto_ = new ::std::string;
  }
  return descphoto_;
}
inline ::std::string* FilterResult::release_descphoto() {
  clear_has_descphoto();
  if (descphoto_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = descphoto_;
    descphoto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FilterResult::set_allocated_descphoto(::std::string* descphoto) {
  if (descphoto_ != &::google::protobuf::internal::kEmptyString) {
    delete descphoto_;
  }
  if (descphoto) {
    set_has_descphoto();
    descphoto_ = descphoto;
  } else {
    clear_has_descphoto();
    descphoto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace po
}  // namespace pb
}  // namespace mm
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ResultFilterOut_2eproto__INCLUDED
