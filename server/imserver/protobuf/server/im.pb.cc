// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: im.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "im.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace im {

namespace {

const ::google::protobuf::Descriptor* im_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  im_reflection_ = NULL;
const ::google::protobuf::Descriptor* im_imack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  im_imack_reflection_ = NULL;
const ::google::protobuf::Descriptor* im_imchat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  im_imchat_reflection_ = NULL;
const ::google::protobuf::Descriptor* im_imclose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  im_imclose_reflection_ = NULL;
const ::google::protobuf::Descriptor* im_imlogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  im_imlogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* im_imlogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  im_imlogout_reflection_ = NULL;
const ::google::protobuf::Descriptor* im_imupstream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  im_imupstream_reflection_ = NULL;
const ::google::protobuf::Descriptor* im_imkeepalive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  im_imkeepalive_reflection_ = NULL;
const ::google::protobuf::Descriptor* im_impgcreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  im_impgcreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* im_impginvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  im_impginvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* im_impgquit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  im_impgquit_reflection_ = NULL;
const ::google::protobuf::Descriptor* im_impgmodify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  im_impgmodify_reflection_ = NULL;
const ::google::protobuf::Descriptor* im_impgcard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  im_impgcard_reflection_ = NULL;
const ::google::protobuf::Descriptor* im_imsns_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  im_imsns_reflection_ = NULL;
const ::google::protobuf::Descriptor* im_imfansmodify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  im_imfansmodify_reflection_ = NULL;
const ::google::protobuf::Descriptor* im_imfansappend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  im_imfansappend_reflection_ = NULL;
const ::google::protobuf::Descriptor* im_imfansdelete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  im_imfansdelete_reflection_ = NULL;
const ::google::protobuf::Descriptor* im_immessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  im_immessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* im_immappoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  im_immappoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* im_imdelete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  im_imdelete_reflection_ = NULL;
const ::google::protobuf::Descriptor* im_imblacklist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  im_imblacklist_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* im_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_im_2eproto() {
  protobuf_AddDesc_im_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "im.proto");
  GOOGLE_CHECK(file != NULL);
  im_descriptor_ = file->message_type(0);
  static const int im_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, logout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, upstream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, keepalive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, pgcreate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, pginvite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, pgquit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, pgmodify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, pgcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, sns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, fansmodify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, fansappend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, fansdelete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, mappoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, delete__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, blacklist__),
  };
  im_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      im_descriptor_,
      im::default_instance_,
      im_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(im));
  im_imack_descriptor_ = im_descriptor_->nested_type(0);
  static const int im_imack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imack, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imack, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imack, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imack, name_),
  };
  im_imack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      im_imack_descriptor_,
      im_imack::default_instance_,
      im_imack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(im_imack));
  im_imchat_descriptor_ = im_descriptor_->nested_type(1);
  static const int im_imchat_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imchat, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imchat, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imchat, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imchat, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imchat, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imchat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imchat, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imchat, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imchat, issave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imchat, isshare_),
  };
  im_imchat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      im_imchat_descriptor_,
      im_imchat::default_instance_,
      im_imchat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imchat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imchat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(im_imchat));
  im_imclose_descriptor_ = im_descriptor_->nested_type(2);
  static const int im_imclose_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imclose, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imclose, addr_),
  };
  im_imclose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      im_imclose_descriptor_,
      im_imclose::default_instance_,
      im_imclose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imclose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imclose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(im_imclose));
  im_imlogin_descriptor_ = im_descriptor_->nested_type(3);
  static const int im_imlogin_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imlogin, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imlogin, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imlogin, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imlogin, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imlogin, status_),
  };
  im_imlogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      im_imlogin_descriptor_,
      im_imlogin::default_instance_,
      im_imlogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imlogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imlogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(im_imlogin));
  im_imlogout_descriptor_ = im_descriptor_->nested_type(4);
  static const int im_imlogout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imlogout, status_),
  };
  im_imlogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      im_imlogout_descriptor_,
      im_imlogout::default_instance_,
      im_imlogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imlogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imlogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(im_imlogout));
  im_imupstream_descriptor_ = im_descriptor_->nested_type(5);
  static const int im_imupstream_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imupstream, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imupstream, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imupstream, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imupstream, resource_),
  };
  im_imupstream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      im_imupstream_descriptor_,
      im_imupstream::default_instance_,
      im_imupstream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imupstream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imupstream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(im_imupstream));
  im_imkeepalive_descriptor_ = im_descriptor_->nested_type(6);
  static const int im_imkeepalive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imkeepalive, id_),
  };
  im_imkeepalive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      im_imkeepalive_descriptor_,
      im_imkeepalive::default_instance_,
      im_imkeepalive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imkeepalive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imkeepalive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(im_imkeepalive));
  im_impgcreate_descriptor_ = im_descriptor_->nested_type(7);
  static const int im_impgcreate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgcreate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgcreate, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgcreate, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgcreate, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgcreate, type_),
  };
  im_impgcreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      im_impgcreate_descriptor_,
      im_impgcreate::default_instance_,
      im_impgcreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgcreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgcreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(im_impgcreate));
  im_impginvite_descriptor_ = im_descriptor_->nested_type(8);
  static const int im_impginvite_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impginvite, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impginvite, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impginvite, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impginvite, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impginvite, invites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impginvite, type_),
  };
  im_impginvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      im_impginvite_descriptor_,
      im_impginvite::default_instance_,
      im_impginvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impginvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impginvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(im_impginvite));
  im_impgquit_descriptor_ = im_descriptor_->nested_type(9);
  static const int im_impgquit_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgquit, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgquit, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgquit, gkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgquit, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgquit, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgquit, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgquit, uid_),
  };
  im_impgquit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      im_impgquit_descriptor_,
      im_impgquit::default_instance_,
      im_impgquit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgquit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgquit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(im_impgquit));
  im_impgmodify_descriptor_ = im_descriptor_->nested_type(10);
  static const int im_impgmodify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgmodify, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgmodify, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgmodify, gname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgmodify, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgmodify, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgmodify, type_),
  };
  im_impgmodify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      im_impgmodify_descriptor_,
      im_impgmodify::default_instance_,
      im_impgmodify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgmodify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgmodify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(im_impgmodify));
  im_impgcard_descriptor_ = im_descriptor_->nested_type(11);
  static const int im_impgcard_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgcard, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgcard, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgcard, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgcard, cardname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgcard, time_),
  };
  im_impgcard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      im_impgcard_descriptor_,
      im_impgcard::default_instance_,
      im_impgcard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgcard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_impgcard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(im_impgcard));
  im_imsns_descriptor_ = im_descriptor_->nested_type(12);
  static const int im_imsns_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imsns, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imsns, subtype_),
  };
  im_imsns_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      im_imsns_descriptor_,
      im_imsns::default_instance_,
      im_imsns_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imsns, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imsns, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(im_imsns));
  im_imfansmodify_descriptor_ = im_descriptor_->nested_type(13);
  static const int im_imfansmodify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansmodify, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansmodify, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansmodify, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansmodify, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansmodify, info_),
  };
  im_imfansmodify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      im_imfansmodify_descriptor_,
      im_imfansmodify::default_instance_,
      im_imfansmodify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansmodify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansmodify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(im_imfansmodify));
  im_imfansappend_descriptor_ = im_descriptor_->nested_type(14);
  static const int im_imfansappend_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansappend, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansappend, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansappend, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansappend, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansappend, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansappend, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansappend, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansappend, cmsid_),
  };
  im_imfansappend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      im_imfansappend_descriptor_,
      im_imfansappend::default_instance_,
      im_imfansappend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansappend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansappend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(im_imfansappend));
  im_imfansdelete_descriptor_ = im_descriptor_->nested_type(15);
  static const int im_imfansdelete_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansdelete, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansdelete, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansdelete, time_),
  };
  im_imfansdelete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      im_imfansdelete_descriptor_,
      im_imfansdelete::default_instance_,
      im_imfansdelete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansdelete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imfansdelete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(im_imfansdelete));
  im_immessage_descriptor_ = im_descriptor_->nested_type(16);
  static const int im_immessage_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_immessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_immessage, touser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_immessage, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_immessage, fromuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_immessage, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_immessage, imagekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_immessage, txtbuffer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_immessage, imagewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_immessage, imageheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_immessage, videolength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_immessage, videokey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_immessage, videotitle_),
  };
  im_immessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      im_immessage_descriptor_,
      im_immessage::default_instance_,
      im_immessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_immessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_immessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(im_immessage));
  im_immappoint_descriptor_ = im_descriptor_->nested_type(17);
  static const int im_immappoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_immappoint, xpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_immappoint, ypoint_),
  };
  im_immappoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      im_immappoint_descriptor_,
      im_immappoint::default_instance_,
      im_immappoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_immappoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_immappoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(im_immappoint));
  im_imdelete_descriptor_ = im_descriptor_->nested_type(18);
  static const int im_imdelete_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imdelete, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imdelete, imagekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imdelete, videokey_),
  };
  im_imdelete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      im_imdelete_descriptor_,
      im_imdelete::default_instance_,
      im_imdelete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imdelete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imdelete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(im_imdelete));
  im_imblacklist_descriptor_ = im_descriptor_->nested_type(19);
  static const int im_imblacklist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imblacklist, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imblacklist, blackid_),
  };
  im_imblacklist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      im_imblacklist_descriptor_,
      im_imblacklist::default_instance_,
      im_imblacklist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imblacklist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(im_imblacklist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(im_imblacklist));
  im_Type_descriptor_ = im_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_im_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    im_descriptor_, &im::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    im_imack_descriptor_, &im_imack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    im_imchat_descriptor_, &im_imchat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    im_imclose_descriptor_, &im_imclose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    im_imlogin_descriptor_, &im_imlogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    im_imlogout_descriptor_, &im_imlogout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    im_imupstream_descriptor_, &im_imupstream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    im_imkeepalive_descriptor_, &im_imkeepalive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    im_impgcreate_descriptor_, &im_impgcreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    im_impginvite_descriptor_, &im_impginvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    im_impgquit_descriptor_, &im_impgquit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    im_impgmodify_descriptor_, &im_impgmodify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    im_impgcard_descriptor_, &im_impgcard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    im_imsns_descriptor_, &im_imsns::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    im_imfansmodify_descriptor_, &im_imfansmodify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    im_imfansappend_descriptor_, &im_imfansappend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    im_imfansdelete_descriptor_, &im_imfansdelete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    im_immessage_descriptor_, &im_immessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    im_immappoint_descriptor_, &im_immappoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    im_imdelete_descriptor_, &im_imdelete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    im_imblacklist_descriptor_, &im_imblacklist::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_im_2eproto() {
  delete im::default_instance_;
  delete im_reflection_;
  delete im_imack::default_instance_;
  delete im_imack_reflection_;
  delete im_imchat::default_instance_;
  delete im_imchat_reflection_;
  delete im_imclose::default_instance_;
  delete im_imclose_reflection_;
  delete im_imlogin::default_instance_;
  delete im_imlogin_reflection_;
  delete im_imlogout::default_instance_;
  delete im_imlogout_reflection_;
  delete im_imupstream::default_instance_;
  delete im_imupstream_reflection_;
  delete im_imkeepalive::default_instance_;
  delete im_imkeepalive_reflection_;
  delete im_impgcreate::default_instance_;
  delete im_impgcreate_reflection_;
  delete im_impginvite::default_instance_;
  delete im_impginvite_reflection_;
  delete im_impgquit::default_instance_;
  delete im_impgquit_reflection_;
  delete im_impgmodify::default_instance_;
  delete im_impgmodify_reflection_;
  delete im_impgcard::default_instance_;
  delete im_impgcard_reflection_;
  delete im_imsns::default_instance_;
  delete im_imsns_reflection_;
  delete im_imfansmodify::default_instance_;
  delete im_imfansmodify_reflection_;
  delete im_imfansappend::default_instance_;
  delete im_imfansappend_reflection_;
  delete im_imfansdelete::default_instance_;
  delete im_imfansdelete_reflection_;
  delete im_immessage::default_instance_;
  delete im_immessage_reflection_;
  delete im_immappoint::default_instance_;
  delete im_immappoint_reflection_;
  delete im_imdelete::default_instance_;
  delete im_imdelete_reflection_;
  delete im_imblacklist::default_instance_;
  delete im_imblacklist_reflection_;
}

void protobuf_AddDesc_im_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010im.proto\022\002im\"\263\025\n\002im\022%\n\007msgtype\030\001 \002(\0162\013"
    ".im.im.Type:\007IM_ROOT\022\031\n\003ack\030\002 \001(\0132\014.im.i"
    "m.imack\022\033\n\004chat\030\003 \001(\0132\r.im.im.imchat\022\035\n\005"
    "close\030\004 \001(\0132\016.im.im.imclose\022\035\n\005login\030\005 \001"
    "(\0132\016.im.im.imlogin\022\037\n\006logout\030\006 \001(\0132\017.im."
    "im.imlogout\022#\n\010upstream\030\007 \001(\0132\021.im.im.im"
    "upstream\022%\n\tkeepalive\030\010 \001(\0132\022.im.im.imke"
    "epalive\022#\n\010pgcreate\030\t \001(\0132\021.im.im.impgcr"
    "eate\022#\n\010pginvite\030\n \001(\0132\021.im.im.impginvit"
    "e\022\037\n\006pgquit\030\013 \001(\0132\017.im.im.impgquit\022#\n\010pg"
    "modify\030\014 \001(\0132\021.im.im.impgmodify\022\037\n\006pgcar"
    "d\030\r \001(\0132\017.im.im.impgcard\022\031\n\003sns\030\016 \001(\0132\014."
    "im.im.imsns\022\'\n\nfansmodify\030\017 \001(\0132\023.im.im."
    "imfansmodify\022\'\n\nfansappend\030\020 \001(\0132\023.im.im"
    ".imfansappend\022\'\n\nfansdelete\030\021 \001(\0132\023.im.i"
    "m.imfansdelete\022!\n\007message\030\022 \001(\0132\020.im.im."
    "immessage\022#\n\010mappoint\030\023 \001(\0132\021.im.im.imma"
    "ppoint\022 \n\007delete_\030\024 \001(\0132\017.im.im.imdelete"
    "\022&\n\nblacklist_\030\025 \001(\0132\022.im.im.imblacklist"
    "\032=\n\005imack\022\n\n\002id\030\001 \002(\t\022\014\n\004addr\030\002 \001(\t\022\014\n\004t"
    "ime\030\003 \001(\t\022\014\n\004name\030\004 \001(\t\032\231\001\n\006imchat\022\n\n\002id"
    "\030\001 \002(\t\022\n\n\002to\030\002 \001(\t\022\014\n\004addr\030\003 \001(\t\022\014\n\004body"
    "\030\004 \001(\t\022\014\n\004from\030\005 \001(\t\022\014\n\004type\030\006 \001(\t\022\020\n\010ca"
    "tegory\030\007 \001(\t\022\014\n\004time\030\010 \001(\t\022\016\n\006issave\030\t \001"
    "(\005\022\017\n\007isshare\030\n \001(\005\032%\n\007imclose\022\014\n\004user\030\001"
    " \002(\t\022\014\n\004addr\030\002 \002(\t\032[\n\007imlogin\022\014\n\004from\030\001 "
    "\001(\t\022\016\n\006domain\030\002 \001(\t\022\020\n\010platform\030\003 \001(\t\022\020\n"
    "\010resource\030\004 \001(\t\022\016\n\006status\030\005 \001(\005\032\032\n\010imlog"
    "out\022\016\n\006status\030\001 \001(\005\032N\n\nimupstream\022\014\n\004fro"
    "m\030\001 \002(\t\022\016\n\006domain\030\002 \002(\t\022\020\n\010platform\030\003 \002("
    "\t\022\020\n\010resource\030\004 \002(\t\032\031\n\013imkeepalive\022\n\n\002id"
    "\030\001 \002(\t\032O\n\nimpgcreate\022\n\n\002id\030\001 \002(\t\022\013\n\003gid\030"
    "\002 \002(\t\022\014\n\004name\030\003 \002(\t\022\014\n\004time\030\004 \002(\t\022\014\n\004typ"
    "e\030\005 \002(\005\032`\n\nimpginvite\022\n\n\002id\030\001 \002(\t\022\013\n\003gid"
    "\030\002 \002(\t\022\014\n\004name\030\003 \002(\t\022\014\n\004time\030\004 \002(\t\022\017\n\007in"
    "vites\030\005 \002(\t\022\014\n\004type\030\006 \002(\005\032h\n\010impgquit\022\n\n"
    "\002id\030\001 \002(\t\022\013\n\003gid\030\002 \002(\t\022\014\n\004gkey\030\003 \002(\t\022\014\n\004"
    "name\030\004 \002(\t\022\014\n\004time\030\005 \002(\t\022\014\n\004type\030\006 \002(\005\022\013"
    "\n\003uid\030\007 \002(\t\032^\n\nimpgmodify\022\n\n\002id\030\001 \002(\t\022\013\n"
    "\003gid\030\002 \002(\t\022\r\n\005gname\030\003 \002(\t\022\014\n\004name\030\004 \002(\t\022"
    "\014\n\004time\030\005 \002(\t\022\014\n\004type\030\006 \002(\005\032P\n\010impgcard\022"
    "\n\n\002id\030\001 \002(\t\022\013\n\003gid\030\002 \002(\t\022\013\n\003uid\030\003 \002(\t\022\020\n"
    "\010cardname\030\004 \002(\t\022\014\n\004time\030\005 \002(\t\032$\n\005imsns\022\n"
    "\n\002id\030\001 \002(\t\022\017\n\007subtype\030\002 \002(\t\032P\n\014imfansmod"
    "ify\022\n\n\002id\030\001 \002(\t\022\013\n\003uid\030\002 \002(\t\022\014\n\004name\030\003 \002"
    "(\t\022\013\n\003key\030\004 \002(\t\022\014\n\004info\030\005 \002(\t\032~\n\014imfansa"
    "ppend\022\n\n\002id\030\001 \002(\t\022\013\n\003uid\030\002 \002(\t\022\013\n\003key\030\003 "
    "\002(\t\022\014\n\004time\030\004 \002(\t\022\017\n\007subtype\030\005 \002(\t\022\014\n\004na"
    "me\030\006 \002(\t\022\014\n\004info\030\007 \002(\t\022\r\n\005cmsid\030\010 \002(\t\0325\n"
    "\014imfansdelete\022\n\n\002id\030\001 \002(\t\022\013\n\003uid\030\002 \002(\t\022\014"
    "\n\004time\030\003 \002(\t\032\345\001\n\timmessage\022\n\n\002id\030\001 \002(\t\022\016"
    "\n\006touser\030\002 \002(\t\022\017\n\007msgtype\030\003 \002(\t\022\020\n\010fromu"
    "ser\030\004 \002(\t\022\020\n\010category\030\005 \002(\t\022\020\n\010imagekey\030"
    "\006 \002(\t\022\021\n\ttxtbuffer\030\007 \002(\t\022\022\n\nimagewidth\030\010"
    " \001(\t\022\023\n\013imageheight\030\t \001(\t\022\023\n\013videolength"
    "\030\n \001(\t\022\020\n\010videokey\030\013 \001(\t\022\022\n\nvideotitle\030\014"
    " \001(\t\032,\n\nimmappoint\022\016\n\006xpoint\030\001 \002(\t\022\016\n\006yp"
    "oint\030\002 \002(\t\032=\n\010imdelete\022\r\n\005msgid\030\001 \002(\t\022\020\n"
    "\010imagekey\030\002 \002(\t\022\020\n\010videokey\030\003 \002(\t\032,\n\013imb"
    "lacklist\022\014\n\004type\030\001 \002(\005\022\017\n\007blackid\030\002 \002(\t\""
    "\342\002\n\004Type\022\013\n\007IM_ROOT\020\000\022\n\n\006IM_ACK\020\001\022\013\n\007IM_"
    "CHAT\020\002\022\014\n\010IM_CLOSE\020\003\022\014\n\010IM_LOGIN\020\004\022\r\n\tIM"
    "_LOGOUT\020\005\022\016\n\nIM_KICKOUT\020\006\022\017\n\013IM_UPSTREAM"
    "\020\007\022\020\n\014IM_KEEPALIVE\020\010\022\017\n\013IM_PGCREATE\020\t\022\017\n"
    "\013IM_PGINVITE\020\n\022\r\n\tIM_PGQUIT\020\013\022\017\n\013IM_PGMO"
    "DIFY\020\014\022\r\n\tIM_PGCARD\020\r\022\n\n\006IM_SNS\020\016\022\021\n\rIM_"
    "FANSMODIFY\020\017\022\021\n\rIM_FANSAPPEND\020\020\022\021\n\rIM_FA"
    "NSDELETE\020\021\022\016\n\nIM_MESSAGE\020\022\022\017\n\013IM_MAPPOIN"
    "T\020\023\022\r\n\tIM_DELETE\020\024\022\020\n\014IM_BLACKLIST\020\025", 2756);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "im.proto", &protobuf_RegisterTypes);
  im::default_instance_ = new im();
  im_imack::default_instance_ = new im_imack();
  im_imchat::default_instance_ = new im_imchat();
  im_imclose::default_instance_ = new im_imclose();
  im_imlogin::default_instance_ = new im_imlogin();
  im_imlogout::default_instance_ = new im_imlogout();
  im_imupstream::default_instance_ = new im_imupstream();
  im_imkeepalive::default_instance_ = new im_imkeepalive();
  im_impgcreate::default_instance_ = new im_impgcreate();
  im_impginvite::default_instance_ = new im_impginvite();
  im_impgquit::default_instance_ = new im_impgquit();
  im_impgmodify::default_instance_ = new im_impgmodify();
  im_impgcard::default_instance_ = new im_impgcard();
  im_imsns::default_instance_ = new im_imsns();
  im_imfansmodify::default_instance_ = new im_imfansmodify();
  im_imfansappend::default_instance_ = new im_imfansappend();
  im_imfansdelete::default_instance_ = new im_imfansdelete();
  im_immessage::default_instance_ = new im_immessage();
  im_immappoint::default_instance_ = new im_immappoint();
  im_imdelete::default_instance_ = new im_imdelete();
  im_imblacklist::default_instance_ = new im_imblacklist();
  im::default_instance_->InitAsDefaultInstance();
  im_imack::default_instance_->InitAsDefaultInstance();
  im_imchat::default_instance_->InitAsDefaultInstance();
  im_imclose::default_instance_->InitAsDefaultInstance();
  im_imlogin::default_instance_->InitAsDefaultInstance();
  im_imlogout::default_instance_->InitAsDefaultInstance();
  im_imupstream::default_instance_->InitAsDefaultInstance();
  im_imkeepalive::default_instance_->InitAsDefaultInstance();
  im_impgcreate::default_instance_->InitAsDefaultInstance();
  im_impginvite::default_instance_->InitAsDefaultInstance();
  im_impgquit::default_instance_->InitAsDefaultInstance();
  im_impgmodify::default_instance_->InitAsDefaultInstance();
  im_impgcard::default_instance_->InitAsDefaultInstance();
  im_imsns::default_instance_->InitAsDefaultInstance();
  im_imfansmodify::default_instance_->InitAsDefaultInstance();
  im_imfansappend::default_instance_->InitAsDefaultInstance();
  im_imfansdelete::default_instance_->InitAsDefaultInstance();
  im_immessage::default_instance_->InitAsDefaultInstance();
  im_immappoint::default_instance_->InitAsDefaultInstance();
  im_imdelete::default_instance_->InitAsDefaultInstance();
  im_imblacklist::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_im_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_im_2eproto {
  StaticDescriptorInitializer_im_2eproto() {
    protobuf_AddDesc_im_2eproto();
  }
} static_descriptor_initializer_im_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* im_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_Type_descriptor_;
}
bool im_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const im_Type im::IM_ROOT;
const im_Type im::IM_ACK;
const im_Type im::IM_CHAT;
const im_Type im::IM_CLOSE;
const im_Type im::IM_LOGIN;
const im_Type im::IM_LOGOUT;
const im_Type im::IM_KICKOUT;
const im_Type im::IM_UPSTREAM;
const im_Type im::IM_KEEPALIVE;
const im_Type im::IM_PGCREATE;
const im_Type im::IM_PGINVITE;
const im_Type im::IM_PGQUIT;
const im_Type im::IM_PGMODIFY;
const im_Type im::IM_PGCARD;
const im_Type im::IM_SNS;
const im_Type im::IM_FANSMODIFY;
const im_Type im::IM_FANSAPPEND;
const im_Type im::IM_FANSDELETE;
const im_Type im::IM_MESSAGE;
const im_Type im::IM_MAPPOINT;
const im_Type im::IM_DELETE;
const im_Type im::IM_BLACKLIST;
const im_Type im::Type_MIN;
const im_Type im::Type_MAX;
const int im::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int im_imack::kIdFieldNumber;
const int im_imack::kAddrFieldNumber;
const int im_imack::kTimeFieldNumber;
const int im_imack::kNameFieldNumber;
#endif  // !_MSC_VER

im_imack::im_imack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void im_imack::InitAsDefaultInstance() {
}

im_imack::im_imack(const im_imack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void im_imack::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

im_imack::~im_imack() {
  SharedDtor();
}

void im_imack::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    delete addr_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void im_imack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* im_imack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_imack_descriptor_;
}

const im_imack& im_imack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

im_imack* im_imack::default_instance_ = NULL;

im_imack* im_imack::New() const {
  return new im_imack;
}

void im_imack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_addr()) {
      if (addr_ != &::google::protobuf::internal::kEmptyString) {
        addr_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool im_imack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_addr;
        break;
      }

      // optional string addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_time;
        break;
      }

      // optional string time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void im_imack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string addr = 2;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->addr(), output);
  }

  // optional string time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->time(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* im_imack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string addr = 2;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addr(), target);
  }

  // optional string time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->time(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int im_imack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string addr = 2;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr());
    }

    // optional string time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void im_imack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const im_imack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const im_imack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void im_imack::MergeFrom(const im_imack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void im_imack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void im_imack::CopyFrom(const im_imack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool im_imack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void im_imack::Swap(im_imack* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(addr_, other->addr_);
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata im_imack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = im_imack_descriptor_;
  metadata.reflection = im_imack_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int im_imchat::kIdFieldNumber;
const int im_imchat::kToFieldNumber;
const int im_imchat::kAddrFieldNumber;
const int im_imchat::kBodyFieldNumber;
const int im_imchat::kFromFieldNumber;
const int im_imchat::kTypeFieldNumber;
const int im_imchat::kCategoryFieldNumber;
const int im_imchat::kTimeFieldNumber;
const int im_imchat::kIssaveFieldNumber;
const int im_imchat::kIsshareFieldNumber;
#endif  // !_MSC_VER

im_imchat::im_imchat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void im_imchat::InitAsDefaultInstance() {
}

im_imchat::im_imchat(const im_imchat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void im_imchat::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  category_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  issave_ = 0;
  isshare_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

im_imchat::~im_imchat() {
  SharedDtor();
}

void im_imchat::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    delete addr_;
  }
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (category_ != &::google::protobuf::internal::kEmptyString) {
    delete category_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void im_imchat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* im_imchat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_imchat_descriptor_;
}

const im_imchat& im_imchat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

im_imchat* im_imchat::default_instance_ = NULL;

im_imchat* im_imchat::New() const {
  return new im_imchat;
}

void im_imchat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
    if (has_addr()) {
      if (addr_ != &::google::protobuf::internal::kEmptyString) {
        addr_->clear();
      }
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_category()) {
      if (category_ != &::google::protobuf::internal::kEmptyString) {
        category_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    issave_ = 0;
    isshare_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool im_imchat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }

      // optional string to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_addr;
        break;
      }

      // optional string addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_body;
        break;
      }

      // optional string body = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->body().data(), this->body().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_from;
        break;
      }

      // optional string from = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_type;
        break;
      }

      // optional string type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_category;
        break;
      }

      // optional string category = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->category().data(), this->category().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_time;
        break;
      }

      // optional string time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_issave;
        break;
      }

      // optional int32 issave = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_issave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issave_)));
          set_has_issave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isshare;
        break;
      }

      // optional int32 isshare = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isshare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isshare_)));
          set_has_isshare();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void im_imchat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->to(), output);
  }

  // optional string addr = 3;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->addr(), output);
  }

  // optional string body = 4;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->body(), output);
  }

  // optional string from = 5;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->from(), output);
  }

  // optional string type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->type(), output);
  }

  // optional string category = 7;
  if (has_category()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->category(), output);
  }

  // optional string time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->time(), output);
  }

  // optional int32 issave = 9;
  if (has_issave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->issave(), output);
  }

  // optional int32 isshare = 10;
  if (has_isshare()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->isshare(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* im_imchat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->to(), target);
  }

  // optional string addr = 3;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->addr(), target);
  }

  // optional string body = 4;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->body(), target);
  }

  // optional string from = 5;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->from(), target);
  }

  // optional string type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->type(), target);
  }

  // optional string category = 7;
  if (has_category()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->category(), target);
  }

  // optional string time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->time(), target);
  }

  // optional int32 issave = 9;
  if (has_issave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->issave(), target);
  }

  // optional int32 isshare = 10;
  if (has_isshare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->isshare(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int im_imchat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }

    // optional string addr = 3;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr());
    }

    // optional string body = 4;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body());
    }

    // optional string from = 5;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

    // optional string type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string category = 7;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category());
    }

    // optional string time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 issave = 9;
    if (has_issave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issave());
    }

    // optional int32 isshare = 10;
    if (has_isshare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isshare());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void im_imchat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const im_imchat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const im_imchat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void im_imchat::MergeFrom(const im_imchat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_issave()) {
      set_issave(from.issave());
    }
    if (from.has_isshare()) {
      set_isshare(from.isshare());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void im_imchat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void im_imchat::CopyFrom(const im_imchat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool im_imchat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void im_imchat::Swap(im_imchat* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(to_, other->to_);
    std::swap(addr_, other->addr_);
    std::swap(body_, other->body_);
    std::swap(from_, other->from_);
    std::swap(type_, other->type_);
    std::swap(category_, other->category_);
    std::swap(time_, other->time_);
    std::swap(issave_, other->issave_);
    std::swap(isshare_, other->isshare_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata im_imchat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = im_imchat_descriptor_;
  metadata.reflection = im_imchat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int im_imclose::kUserFieldNumber;
const int im_imclose::kAddrFieldNumber;
#endif  // !_MSC_VER

im_imclose::im_imclose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void im_imclose::InitAsDefaultInstance() {
}

im_imclose::im_imclose(const im_imclose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void im_imclose::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

im_imclose::~im_imclose() {
  SharedDtor();
}

void im_imclose::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    delete addr_;
  }
  if (this != default_instance_) {
  }
}

void im_imclose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* im_imclose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_imclose_descriptor_;
}

const im_imclose& im_imclose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

im_imclose* im_imclose::default_instance_ = NULL;

im_imclose* im_imclose::New() const {
  return new im_imclose;
}

void im_imclose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_addr()) {
      if (addr_ != &::google::protobuf::internal::kEmptyString) {
        addr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool im_imclose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_addr;
        break;
      }

      // required string addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void im_imclose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user(), output);
  }

  // required string addr = 2;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->addr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* im_imclose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // required string addr = 2;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int im_imclose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string addr = 2;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void im_imclose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const im_imclose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const im_imclose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void im_imclose::MergeFrom(const im_imclose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_addr()) {
      set_addr(from.addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void im_imclose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void im_imclose::CopyFrom(const im_imclose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool im_imclose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void im_imclose::Swap(im_imclose* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(addr_, other->addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata im_imclose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = im_imclose_descriptor_;
  metadata.reflection = im_imclose_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int im_imlogin::kFromFieldNumber;
const int im_imlogin::kDomainFieldNumber;
const int im_imlogin::kPlatformFieldNumber;
const int im_imlogin::kResourceFieldNumber;
const int im_imlogin::kStatusFieldNumber;
#endif  // !_MSC_VER

im_imlogin::im_imlogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void im_imlogin::InitAsDefaultInstance() {
}

im_imlogin::im_imlogin(const im_imlogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void im_imlogin::SharedCtor() {
  _cached_size_ = 0;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

im_imlogin::~im_imlogin() {
  SharedDtor();
}

void im_imlogin::SharedDtor() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (this != default_instance_) {
  }
}

void im_imlogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* im_imlogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_imlogin_descriptor_;
}

const im_imlogin& im_imlogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

im_imlogin* im_imlogin::default_instance_ = NULL;

im_imlogin* im_imlogin::New() const {
  return new im_imlogin;
}

void im_imlogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool im_imlogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_domain;
        break;
      }

      // optional string domain = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_platform;
        break;
      }

      // optional string platform = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resource;
        break;
      }

      // optional string resource = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional int32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void im_imlogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->from(), output);
  }

  // optional string domain = 2;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->domain(), output);
  }

  // optional string platform = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->platform(), output);
  }

  // optional string resource = 4;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->resource(), output);
  }

  // optional int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* im_imlogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from(), target);
  }

  // optional string domain = 2;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain(), target);
  }

  // optional string platform = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->platform(), target);
  }

  // optional string resource = 4;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->resource(), target);
  }

  // optional int32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int im_imlogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

    // optional string domain = 2;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string platform = 3;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string resource = 4;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // optional int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void im_imlogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const im_imlogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const im_imlogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void im_imlogin::MergeFrom(const im_imlogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void im_imlogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void im_imlogin::CopyFrom(const im_imlogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool im_imlogin::IsInitialized() const {

  return true;
}

void im_imlogin::Swap(im_imlogin* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(domain_, other->domain_);
    std::swap(platform_, other->platform_);
    std::swap(resource_, other->resource_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata im_imlogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = im_imlogin_descriptor_;
  metadata.reflection = im_imlogin_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int im_imlogout::kStatusFieldNumber;
#endif  // !_MSC_VER

im_imlogout::im_imlogout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void im_imlogout::InitAsDefaultInstance() {
}

im_imlogout::im_imlogout(const im_imlogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void im_imlogout::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

im_imlogout::~im_imlogout() {
  SharedDtor();
}

void im_imlogout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void im_imlogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* im_imlogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_imlogout_descriptor_;
}

const im_imlogout& im_imlogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

im_imlogout* im_imlogout::default_instance_ = NULL;

im_imlogout* im_imlogout::New() const {
  return new im_imlogout;
}

void im_imlogout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool im_imlogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void im_imlogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* im_imlogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int im_imlogout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void im_imlogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const im_imlogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const im_imlogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void im_imlogout::MergeFrom(const im_imlogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void im_imlogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void im_imlogout::CopyFrom(const im_imlogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool im_imlogout::IsInitialized() const {

  return true;
}

void im_imlogout::Swap(im_imlogout* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata im_imlogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = im_imlogout_descriptor_;
  metadata.reflection = im_imlogout_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int im_imupstream::kFromFieldNumber;
const int im_imupstream::kDomainFieldNumber;
const int im_imupstream::kPlatformFieldNumber;
const int im_imupstream::kResourceFieldNumber;
#endif  // !_MSC_VER

im_imupstream::im_imupstream()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void im_imupstream::InitAsDefaultInstance() {
}

im_imupstream::im_imupstream(const im_imupstream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void im_imupstream::SharedCtor() {
  _cached_size_ = 0;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

im_imupstream::~im_imupstream() {
  SharedDtor();
}

void im_imupstream::SharedDtor() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (this != default_instance_) {
  }
}

void im_imupstream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* im_imupstream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_imupstream_descriptor_;
}

const im_imupstream& im_imupstream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

im_imupstream* im_imupstream::default_instance_ = NULL;

im_imupstream* im_imupstream::New() const {
  return new im_imupstream;
}

void im_imupstream::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool im_imupstream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_domain;
        break;
      }

      // required string domain = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_platform;
        break;
      }

      // required string platform = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resource;
        break;
      }

      // required string resource = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void im_imupstream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->from(), output);
  }

  // required string domain = 2;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->domain(), output);
  }

  // required string platform = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->platform(), output);
  }

  // required string resource = 4;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->resource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* im_imupstream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from(), target);
  }

  // required string domain = 2;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain(), target);
  }

  // required string platform = 3;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->platform(), target);
  }

  // required string resource = 4;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->resource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int im_imupstream::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }

    // required string domain = 2;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // required string platform = 3;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // required string resource = 4;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void im_imupstream::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const im_imupstream* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const im_imupstream*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void im_imupstream::MergeFrom(const im_imupstream& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void im_imupstream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void im_imupstream::CopyFrom(const im_imupstream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool im_imupstream::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void im_imupstream::Swap(im_imupstream* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(domain_, other->domain_);
    std::swap(platform_, other->platform_);
    std::swap(resource_, other->resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata im_imupstream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = im_imupstream_descriptor_;
  metadata.reflection = im_imupstream_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int im_imkeepalive::kIdFieldNumber;
#endif  // !_MSC_VER

im_imkeepalive::im_imkeepalive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void im_imkeepalive::InitAsDefaultInstance() {
}

im_imkeepalive::im_imkeepalive(const im_imkeepalive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void im_imkeepalive::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

im_imkeepalive::~im_imkeepalive() {
  SharedDtor();
}

void im_imkeepalive::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void im_imkeepalive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* im_imkeepalive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_imkeepalive_descriptor_;
}

const im_imkeepalive& im_imkeepalive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

im_imkeepalive* im_imkeepalive::default_instance_ = NULL;

im_imkeepalive* im_imkeepalive::New() const {
  return new im_imkeepalive;
}

void im_imkeepalive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool im_imkeepalive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void im_imkeepalive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* im_imkeepalive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int im_imkeepalive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void im_imkeepalive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const im_imkeepalive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const im_imkeepalive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void im_imkeepalive::MergeFrom(const im_imkeepalive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void im_imkeepalive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void im_imkeepalive::CopyFrom(const im_imkeepalive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool im_imkeepalive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void im_imkeepalive::Swap(im_imkeepalive* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata im_imkeepalive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = im_imkeepalive_descriptor_;
  metadata.reflection = im_imkeepalive_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int im_impgcreate::kIdFieldNumber;
const int im_impgcreate::kGidFieldNumber;
const int im_impgcreate::kNameFieldNumber;
const int im_impgcreate::kTimeFieldNumber;
const int im_impgcreate::kTypeFieldNumber;
#endif  // !_MSC_VER

im_impgcreate::im_impgcreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void im_impgcreate::InitAsDefaultInstance() {
}

im_impgcreate::im_impgcreate(const im_impgcreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void im_impgcreate::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

im_impgcreate::~im_impgcreate() {
  SharedDtor();
}

void im_impgcreate::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    delete gid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void im_impgcreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* im_impgcreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_impgcreate_descriptor_;
}

const im_impgcreate& im_impgcreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

im_impgcreate* im_impgcreate::default_instance_ = NULL;

im_impgcreate* im_impgcreate::New() const {
  return new im_impgcreate;
}

void im_impgcreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_gid()) {
      if (gid_ != &::google::protobuf::internal::kEmptyString) {
        gid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool im_impgcreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gid;
        break;
      }

      // required string gid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gid().data(), this->gid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_time;
        break;
      }

      // required string time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void im_impgcreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gid(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required string time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->time(), output);
  }

  // required int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* im_impgcreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gid(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required string time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->time(), target);
  }

  // required int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int im_impgcreate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string gid = 2;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gid());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // required int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void im_impgcreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const im_impgcreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const im_impgcreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void im_impgcreate::MergeFrom(const im_impgcreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void im_impgcreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void im_impgcreate::CopyFrom(const im_impgcreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool im_impgcreate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void im_impgcreate::Swap(im_impgcreate* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gid_, other->gid_);
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata im_impgcreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = im_impgcreate_descriptor_;
  metadata.reflection = im_impgcreate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int im_impginvite::kIdFieldNumber;
const int im_impginvite::kGidFieldNumber;
const int im_impginvite::kNameFieldNumber;
const int im_impginvite::kTimeFieldNumber;
const int im_impginvite::kInvitesFieldNumber;
const int im_impginvite::kTypeFieldNumber;
#endif  // !_MSC_VER

im_impginvite::im_impginvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void im_impginvite::InitAsDefaultInstance() {
}

im_impginvite::im_impginvite(const im_impginvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void im_impginvite::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  invites_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

im_impginvite::~im_impginvite() {
  SharedDtor();
}

void im_impginvite::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    delete gid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (invites_ != &::google::protobuf::internal::kEmptyString) {
    delete invites_;
  }
  if (this != default_instance_) {
  }
}

void im_impginvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* im_impginvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_impginvite_descriptor_;
}

const im_impginvite& im_impginvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

im_impginvite* im_impginvite::default_instance_ = NULL;

im_impginvite* im_impginvite::New() const {
  return new im_impginvite;
}

void im_impginvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_gid()) {
      if (gid_ != &::google::protobuf::internal::kEmptyString) {
        gid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    if (has_invites()) {
      if (invites_ != &::google::protobuf::internal::kEmptyString) {
        invites_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool im_impginvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gid;
        break;
      }

      // required string gid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gid().data(), this->gid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_time;
        break;
      }

      // required string time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_invites;
        break;
      }

      // required string invites = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invites:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invites()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->invites().data(), this->invites().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // required int32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void im_impginvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gid(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required string time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->time(), output);
  }

  // required string invites = 5;
  if (has_invites()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invites().data(), this->invites().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->invites(), output);
  }

  // required int32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* im_impginvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gid(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required string time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->time(), target);
  }

  // required string invites = 5;
  if (has_invites()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invites().data(), this->invites().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->invites(), target);
  }

  // required int32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int im_impginvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string gid = 2;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gid());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // required string invites = 5;
    if (has_invites()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invites());
    }

    // required int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void im_impginvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const im_impginvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const im_impginvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void im_impginvite::MergeFrom(const im_impginvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_invites()) {
      set_invites(from.invites());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void im_impginvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void im_impginvite::CopyFrom(const im_impginvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool im_impginvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void im_impginvite::Swap(im_impginvite* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gid_, other->gid_);
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(invites_, other->invites_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata im_impginvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = im_impginvite_descriptor_;
  metadata.reflection = im_impginvite_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int im_impgquit::kIdFieldNumber;
const int im_impgquit::kGidFieldNumber;
const int im_impgquit::kGkeyFieldNumber;
const int im_impgquit::kNameFieldNumber;
const int im_impgquit::kTimeFieldNumber;
const int im_impgquit::kTypeFieldNumber;
const int im_impgquit::kUidFieldNumber;
#endif  // !_MSC_VER

im_impgquit::im_impgquit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void im_impgquit::InitAsDefaultInstance() {
}

im_impgquit::im_impgquit(const im_impgquit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void im_impgquit::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

im_impgquit::~im_impgquit() {
  SharedDtor();
}

void im_impgquit::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    delete gid_;
  }
  if (gkey_ != &::google::protobuf::internal::kEmptyString) {
    delete gkey_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void im_impgquit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* im_impgquit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_impgquit_descriptor_;
}

const im_impgquit& im_impgquit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

im_impgquit* im_impgquit::default_instance_ = NULL;

im_impgquit* im_impgquit::New() const {
  return new im_impgquit;
}

void im_impgquit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_gid()) {
      if (gid_ != &::google::protobuf::internal::kEmptyString) {
        gid_->clear();
      }
    }
    if (has_gkey()) {
      if (gkey_ != &::google::protobuf::internal::kEmptyString) {
        gkey_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    type_ = 0;
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool im_impgquit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gid;
        break;
      }

      // required string gid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gid().data(), this->gid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gkey;
        break;
      }

      // required string gkey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gkey().data(), this->gkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_time;
        break;
      }

      // required string time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // required int32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_uid;
        break;
      }

      // required string uid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void im_impgquit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gid(), output);
  }

  // required string gkey = 3;
  if (has_gkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gkey().data(), this->gkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gkey(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // required string time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->time(), output);
  }

  // required int32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }

  // required string uid = 7;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* im_impgquit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gid(), target);
  }

  // required string gkey = 3;
  if (has_gkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gkey().data(), this->gkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gkey(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required string time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->time(), target);
  }

  // required int32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }

  // required string uid = 7;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int im_impgquit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string gid = 2;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gid());
    }

    // required string gkey = 3;
    if (has_gkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gkey());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // required int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string uid = 7;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void im_impgquit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const im_impgquit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const im_impgquit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void im_impgquit::MergeFrom(const im_impgquit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_gkey()) {
      set_gkey(from.gkey());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void im_impgquit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void im_impgquit::CopyFrom(const im_impgquit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool im_impgquit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void im_impgquit::Swap(im_impgquit* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gid_, other->gid_);
    std::swap(gkey_, other->gkey_);
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata im_impgquit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = im_impgquit_descriptor_;
  metadata.reflection = im_impgquit_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int im_impgmodify::kIdFieldNumber;
const int im_impgmodify::kGidFieldNumber;
const int im_impgmodify::kGnameFieldNumber;
const int im_impgmodify::kNameFieldNumber;
const int im_impgmodify::kTimeFieldNumber;
const int im_impgmodify::kTypeFieldNumber;
#endif  // !_MSC_VER

im_impgmodify::im_impgmodify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void im_impgmodify::InitAsDefaultInstance() {
}

im_impgmodify::im_impgmodify(const im_impgmodify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void im_impgmodify::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

im_impgmodify::~im_impgmodify() {
  SharedDtor();
}

void im_impgmodify::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    delete gid_;
  }
  if (gname_ != &::google::protobuf::internal::kEmptyString) {
    delete gname_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void im_impgmodify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* im_impgmodify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_impgmodify_descriptor_;
}

const im_impgmodify& im_impgmodify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

im_impgmodify* im_impgmodify::default_instance_ = NULL;

im_impgmodify* im_impgmodify::New() const {
  return new im_impgmodify;
}

void im_impgmodify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_gid()) {
      if (gid_ != &::google::protobuf::internal::kEmptyString) {
        gid_->clear();
      }
    }
    if (has_gname()) {
      if (gname_ != &::google::protobuf::internal::kEmptyString) {
        gname_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool im_impgmodify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gid;
        break;
      }

      // required string gid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gid().data(), this->gid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gname;
        break;
      }

      // required string gname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gname().data(), this->gname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_time;
        break;
      }

      // required string time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // required int32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void im_impgmodify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gid(), output);
  }

  // required string gname = 3;
  if (has_gname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gname().data(), this->gname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gname(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // required string time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->time(), output);
  }

  // required int32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* im_impgmodify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gid(), target);
  }

  // required string gname = 3;
  if (has_gname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gname().data(), this->gname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gname(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required string time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->time(), target);
  }

  // required int32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int im_impgmodify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string gid = 2;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gid());
    }

    // required string gname = 3;
    if (has_gname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gname());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // required int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void im_impgmodify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const im_impgmodify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const im_impgmodify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void im_impgmodify::MergeFrom(const im_impgmodify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_gname()) {
      set_gname(from.gname());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void im_impgmodify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void im_impgmodify::CopyFrom(const im_impgmodify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool im_impgmodify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void im_impgmodify::Swap(im_impgmodify* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gid_, other->gid_);
    std::swap(gname_, other->gname_);
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata im_impgmodify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = im_impgmodify_descriptor_;
  metadata.reflection = im_impgmodify_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int im_impgcard::kIdFieldNumber;
const int im_impgcard::kGidFieldNumber;
const int im_impgcard::kUidFieldNumber;
const int im_impgcard::kCardnameFieldNumber;
const int im_impgcard::kTimeFieldNumber;
#endif  // !_MSC_VER

im_impgcard::im_impgcard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void im_impgcard::InitAsDefaultInstance() {
}

im_impgcard::im_impgcard(const im_impgcard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void im_impgcard::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

im_impgcard::~im_impgcard() {
  SharedDtor();
}

void im_impgcard::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (gid_ != &::google::protobuf::internal::kEmptyString) {
    delete gid_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (cardname_ != &::google::protobuf::internal::kEmptyString) {
    delete cardname_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void im_impgcard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* im_impgcard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_impgcard_descriptor_;
}

const im_impgcard& im_impgcard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

im_impgcard* im_impgcard::default_instance_ = NULL;

im_impgcard* im_impgcard::New() const {
  return new im_impgcard;
}

void im_impgcard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_gid()) {
      if (gid_ != &::google::protobuf::internal::kEmptyString) {
        gid_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_cardname()) {
      if (cardname_ != &::google::protobuf::internal::kEmptyString) {
        cardname_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool im_impgcard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gid;
        break;
      }

      // required string gid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gid().data(), this->gid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uid;
        break;
      }

      // required string uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cardname;
        break;
      }

      // required string cardname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardname().data(), this->cardname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_time;
        break;
      }

      // required string time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void im_impgcard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gid(), output);
  }

  // required string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uid(), output);
  }

  // required string cardname = 4;
  if (has_cardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardname().data(), this->cardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cardname(), output);
  }

  // required string time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* im_impgcard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gid().data(), this->gid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gid(), target);
  }

  // required string uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uid(), target);
  }

  // required string cardname = 4;
  if (has_cardname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardname().data(), this->cardname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cardname(), target);
  }

  // required string time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int im_impgcard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string gid = 2;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gid());
    }

    // required string uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // required string cardname = 4;
    if (has_cardname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardname());
    }

    // required string time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void im_impgcard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const im_impgcard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const im_impgcard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void im_impgcard::MergeFrom(const im_impgcard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_cardname()) {
      set_cardname(from.cardname());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void im_impgcard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void im_impgcard::CopyFrom(const im_impgcard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool im_impgcard::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void im_impgcard::Swap(im_impgcard* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gid_, other->gid_);
    std::swap(uid_, other->uid_);
    std::swap(cardname_, other->cardname_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata im_impgcard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = im_impgcard_descriptor_;
  metadata.reflection = im_impgcard_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int im_imsns::kIdFieldNumber;
const int im_imsns::kSubtypeFieldNumber;
#endif  // !_MSC_VER

im_imsns::im_imsns()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void im_imsns::InitAsDefaultInstance() {
}

im_imsns::im_imsns(const im_imsns& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void im_imsns::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

im_imsns::~im_imsns() {
  SharedDtor();
}

void im_imsns::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (subtype_ != &::google::protobuf::internal::kEmptyString) {
    delete subtype_;
  }
  if (this != default_instance_) {
  }
}

void im_imsns::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* im_imsns::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_imsns_descriptor_;
}

const im_imsns& im_imsns::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

im_imsns* im_imsns::default_instance_ = NULL;

im_imsns* im_imsns::New() const {
  return new im_imsns;
}

void im_imsns::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_subtype()) {
      if (subtype_ != &::google::protobuf::internal::kEmptyString) {
        subtype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool im_imsns::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subtype;
        break;
      }

      // required string subtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subtype().data(), this->subtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void im_imsns::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string subtype = 2;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtype().data(), this->subtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->subtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* im_imsns::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string subtype = 2;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtype().data(), this->subtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->subtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int im_imsns::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string subtype = 2;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void im_imsns::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const im_imsns* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const im_imsns*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void im_imsns::MergeFrom(const im_imsns& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void im_imsns::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void im_imsns::CopyFrom(const im_imsns& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool im_imsns::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void im_imsns::Swap(im_imsns* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(subtype_, other->subtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata im_imsns::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = im_imsns_descriptor_;
  metadata.reflection = im_imsns_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int im_imfansmodify::kIdFieldNumber;
const int im_imfansmodify::kUidFieldNumber;
const int im_imfansmodify::kNameFieldNumber;
const int im_imfansmodify::kKeyFieldNumber;
const int im_imfansmodify::kInfoFieldNumber;
#endif  // !_MSC_VER

im_imfansmodify::im_imfansmodify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void im_imfansmodify::InitAsDefaultInstance() {
}

im_imfansmodify::im_imfansmodify(const im_imfansmodify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void im_imfansmodify::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

im_imfansmodify::~im_imfansmodify() {
  SharedDtor();
}

void im_imfansmodify::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void im_imfansmodify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* im_imfansmodify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_imfansmodify_descriptor_;
}

const im_imfansmodify& im_imfansmodify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

im_imfansmodify* im_imfansmodify::default_instance_ = NULL;

im_imfansmodify* im_imfansmodify::New() const {
  return new im_imfansmodify;
}

void im_imfansmodify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool im_imfansmodify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required string uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // required string key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // required string info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void im_imfansmodify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uid(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required string key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->key(), output);
  }

  // required string info = 5;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* im_imfansmodify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uid(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required string key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->key(), target);
  }

  // required string info = 5;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int im_imfansmodify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string info = 5;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void im_imfansmodify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const im_imfansmodify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const im_imfansmodify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void im_imfansmodify::MergeFrom(const im_imfansmodify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void im_imfansmodify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void im_imfansmodify::CopyFrom(const im_imfansmodify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool im_imfansmodify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void im_imfansmodify::Swap(im_imfansmodify* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(key_, other->key_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata im_imfansmodify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = im_imfansmodify_descriptor_;
  metadata.reflection = im_imfansmodify_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int im_imfansappend::kIdFieldNumber;
const int im_imfansappend::kUidFieldNumber;
const int im_imfansappend::kKeyFieldNumber;
const int im_imfansappend::kTimeFieldNumber;
const int im_imfansappend::kSubtypeFieldNumber;
const int im_imfansappend::kNameFieldNumber;
const int im_imfansappend::kInfoFieldNumber;
const int im_imfansappend::kCmsidFieldNumber;
#endif  // !_MSC_VER

im_imfansappend::im_imfansappend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void im_imfansappend::InitAsDefaultInstance() {
}

im_imfansappend::im_imfansappend(const im_imfansappend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void im_imfansappend::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cmsid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

im_imfansappend::~im_imfansappend() {
  SharedDtor();
}

void im_imfansappend::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (subtype_ != &::google::protobuf::internal::kEmptyString) {
    delete subtype_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (cmsid_ != &::google::protobuf::internal::kEmptyString) {
    delete cmsid_;
  }
  if (this != default_instance_) {
  }
}

void im_imfansappend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* im_imfansappend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_imfansappend_descriptor_;
}

const im_imfansappend& im_imfansappend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

im_imfansappend* im_imfansappend::default_instance_ = NULL;

im_imfansappend* im_imfansappend::New() const {
  return new im_imfansappend;
}

void im_imfansappend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    if (has_subtype()) {
      if (subtype_ != &::google::protobuf::internal::kEmptyString) {
        subtype_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
    if (has_cmsid()) {
      if (cmsid_ != &::google::protobuf::internal::kEmptyString) {
        cmsid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool im_imfansappend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required string uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // required string key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_time;
        break;
      }

      // required string time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_subtype;
        break;
      }

      // required string subtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subtype().data(), this->subtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // required string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_info;
        break;
      }

      // required string info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_cmsid;
        break;
      }

      // required string cmsid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmsid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmsid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmsid().data(), this->cmsid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void im_imfansappend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uid(), output);
  }

  // required string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->key(), output);
  }

  // required string time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->time(), output);
  }

  // required string subtype = 5;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtype().data(), this->subtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->subtype(), output);
  }

  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }

  // required string info = 7;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->info(), output);
  }

  // required string cmsid = 8;
  if (has_cmsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmsid().data(), this->cmsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->cmsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* im_imfansappend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uid(), target);
  }

  // required string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key(), target);
  }

  // required string time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->time(), target);
  }

  // required string subtype = 5;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtype().data(), this->subtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->subtype(), target);
  }

  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // required string info = 7;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->info(), target);
  }

  // required string cmsid = 8;
  if (has_cmsid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmsid().data(), this->cmsid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->cmsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int im_imfansappend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // required string key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // required string subtype = 5;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtype());
    }

    // required string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string info = 7;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // required string cmsid = 8;
    if (has_cmsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void im_imfansappend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const im_imfansappend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const im_imfansappend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void im_imfansappend::MergeFrom(const im_imfansappend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_cmsid()) {
      set_cmsid(from.cmsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void im_imfansappend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void im_imfansappend::CopyFrom(const im_imfansappend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool im_imfansappend::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void im_imfansappend::Swap(im_imfansappend* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(uid_, other->uid_);
    std::swap(key_, other->key_);
    std::swap(time_, other->time_);
    std::swap(subtype_, other->subtype_);
    std::swap(name_, other->name_);
    std::swap(info_, other->info_);
    std::swap(cmsid_, other->cmsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata im_imfansappend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = im_imfansappend_descriptor_;
  metadata.reflection = im_imfansappend_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int im_imfansdelete::kIdFieldNumber;
const int im_imfansdelete::kUidFieldNumber;
const int im_imfansdelete::kTimeFieldNumber;
#endif  // !_MSC_VER

im_imfansdelete::im_imfansdelete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void im_imfansdelete::InitAsDefaultInstance() {
}

im_imfansdelete::im_imfansdelete(const im_imfansdelete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void im_imfansdelete::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

im_imfansdelete::~im_imfansdelete() {
  SharedDtor();
}

void im_imfansdelete::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void im_imfansdelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* im_imfansdelete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_imfansdelete_descriptor_;
}

const im_imfansdelete& im_imfansdelete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

im_imfansdelete* im_imfansdelete::default_instance_ = NULL;

im_imfansdelete* im_imfansdelete::New() const {
  return new im_imfansdelete;
}

void im_imfansdelete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool im_imfansdelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }

      // required string uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_time;
        break;
      }

      // required string time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void im_imfansdelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uid(), output);
  }

  // required string time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* im_imfansdelete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uid(), target);
  }

  // required string time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int im_imfansdelete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // required string time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void im_imfansdelete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const im_imfansdelete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const im_imfansdelete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void im_imfansdelete::MergeFrom(const im_imfansdelete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void im_imfansdelete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void im_imfansdelete::CopyFrom(const im_imfansdelete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool im_imfansdelete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void im_imfansdelete::Swap(im_imfansdelete* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(uid_, other->uid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata im_imfansdelete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = im_imfansdelete_descriptor_;
  metadata.reflection = im_imfansdelete_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int im_immessage::kIdFieldNumber;
const int im_immessage::kTouserFieldNumber;
const int im_immessage::kMsgtypeFieldNumber;
const int im_immessage::kFromuserFieldNumber;
const int im_immessage::kCategoryFieldNumber;
const int im_immessage::kImagekeyFieldNumber;
const int im_immessage::kTxtbufferFieldNumber;
const int im_immessage::kImagewidthFieldNumber;
const int im_immessage::kImageheightFieldNumber;
const int im_immessage::kVideolengthFieldNumber;
const int im_immessage::kVideokeyFieldNumber;
const int im_immessage::kVideotitleFieldNumber;
#endif  // !_MSC_VER

im_immessage::im_immessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void im_immessage::InitAsDefaultInstance() {
}

im_immessage::im_immessage(const im_immessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void im_immessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  touser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msgtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fromuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  category_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imagekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  txtbuffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imagewidth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imageheight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  videolength_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  videokey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  videotitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

im_immessage::~im_immessage() {
  SharedDtor();
}

void im_immessage::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (touser_ != &::google::protobuf::internal::kEmptyString) {
    delete touser_;
  }
  if (msgtype_ != &::google::protobuf::internal::kEmptyString) {
    delete msgtype_;
  }
  if (fromuser_ != &::google::protobuf::internal::kEmptyString) {
    delete fromuser_;
  }
  if (category_ != &::google::protobuf::internal::kEmptyString) {
    delete category_;
  }
  if (imagekey_ != &::google::protobuf::internal::kEmptyString) {
    delete imagekey_;
  }
  if (txtbuffer_ != &::google::protobuf::internal::kEmptyString) {
    delete txtbuffer_;
  }
  if (imagewidth_ != &::google::protobuf::internal::kEmptyString) {
    delete imagewidth_;
  }
  if (imageheight_ != &::google::protobuf::internal::kEmptyString) {
    delete imageheight_;
  }
  if (videolength_ != &::google::protobuf::internal::kEmptyString) {
    delete videolength_;
  }
  if (videokey_ != &::google::protobuf::internal::kEmptyString) {
    delete videokey_;
  }
  if (videotitle_ != &::google::protobuf::internal::kEmptyString) {
    delete videotitle_;
  }
  if (this != default_instance_) {
  }
}

void im_immessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* im_immessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_immessage_descriptor_;
}

const im_immessage& im_immessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

im_immessage* im_immessage::default_instance_ = NULL;

im_immessage* im_immessage::New() const {
  return new im_immessage;
}

void im_immessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_touser()) {
      if (touser_ != &::google::protobuf::internal::kEmptyString) {
        touser_->clear();
      }
    }
    if (has_msgtype()) {
      if (msgtype_ != &::google::protobuf::internal::kEmptyString) {
        msgtype_->clear();
      }
    }
    if (has_fromuser()) {
      if (fromuser_ != &::google::protobuf::internal::kEmptyString) {
        fromuser_->clear();
      }
    }
    if (has_category()) {
      if (category_ != &::google::protobuf::internal::kEmptyString) {
        category_->clear();
      }
    }
    if (has_imagekey()) {
      if (imagekey_ != &::google::protobuf::internal::kEmptyString) {
        imagekey_->clear();
      }
    }
    if (has_txtbuffer()) {
      if (txtbuffer_ != &::google::protobuf::internal::kEmptyString) {
        txtbuffer_->clear();
      }
    }
    if (has_imagewidth()) {
      if (imagewidth_ != &::google::protobuf::internal::kEmptyString) {
        imagewidth_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_imageheight()) {
      if (imageheight_ != &::google::protobuf::internal::kEmptyString) {
        imageheight_->clear();
      }
    }
    if (has_videolength()) {
      if (videolength_ != &::google::protobuf::internal::kEmptyString) {
        videolength_->clear();
      }
    }
    if (has_videokey()) {
      if (videokey_ != &::google::protobuf::internal::kEmptyString) {
        videokey_->clear();
      }
    }
    if (has_videotitle()) {
      if (videotitle_ != &::google::protobuf::internal::kEmptyString) {
        videotitle_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool im_immessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_touser;
        break;
      }

      // required string touser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_touser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_touser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->touser().data(), this->touser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msgtype;
        break;
      }

      // required string msgtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgtype().data(), this->msgtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fromuser;
        break;
      }

      // required string fromuser = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fromuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromuser().data(), this->fromuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_category;
        break;
      }

      // required string category = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->category().data(), this->category().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_imagekey;
        break;
      }

      // required string imagekey = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imagekey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imagekey().data(), this->imagekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_txtbuffer;
        break;
      }

      // required string txtbuffer = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_txtbuffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_txtbuffer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->txtbuffer().data(), this->txtbuffer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_imagewidth;
        break;
      }

      // optional string imagewidth = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imagewidth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagewidth()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imagewidth().data(), this->imagewidth().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_imageheight;
        break;
      }

      // optional string imageheight = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageheight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imageheight()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imageheight().data(), this->imageheight().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_videolength;
        break;
      }

      // optional string videolength = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_videolength:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videolength()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->videolength().data(), this->videolength().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_videokey;
        break;
      }

      // optional string videokey = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_videokey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videokey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->videokey().data(), this->videokey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_videotitle;
        break;
      }

      // optional string videotitle = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_videotitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videotitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->videotitle().data(), this->videotitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void im_immessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string touser = 2;
  if (has_touser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->touser().data(), this->touser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->touser(), output);
  }

  // required string msgtype = 3;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgtype().data(), this->msgtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msgtype(), output);
  }

  // required string fromuser = 4;
  if (has_fromuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromuser().data(), this->fromuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->fromuser(), output);
  }

  // required string category = 5;
  if (has_category()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->category(), output);
  }

  // required string imagekey = 6;
  if (has_imagekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagekey().data(), this->imagekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->imagekey(), output);
  }

  // required string txtbuffer = 7;
  if (has_txtbuffer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->txtbuffer().data(), this->txtbuffer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->txtbuffer(), output);
  }

  // optional string imagewidth = 8;
  if (has_imagewidth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagewidth().data(), this->imagewidth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->imagewidth(), output);
  }

  // optional string imageheight = 9;
  if (has_imageheight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imageheight().data(), this->imageheight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->imageheight(), output);
  }

  // optional string videolength = 10;
  if (has_videolength()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videolength().data(), this->videolength().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->videolength(), output);
  }

  // optional string videokey = 11;
  if (has_videokey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videokey().data(), this->videokey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->videokey(), output);
  }

  // optional string videotitle = 12;
  if (has_videotitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videotitle().data(), this->videotitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->videotitle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* im_immessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string touser = 2;
  if (has_touser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->touser().data(), this->touser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->touser(), target);
  }

  // required string msgtype = 3;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgtype().data(), this->msgtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msgtype(), target);
  }

  // required string fromuser = 4;
  if (has_fromuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromuser().data(), this->fromuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fromuser(), target);
  }

  // required string category = 5;
  if (has_category()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->category(), target);
  }

  // required string imagekey = 6;
  if (has_imagekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagekey().data(), this->imagekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->imagekey(), target);
  }

  // required string txtbuffer = 7;
  if (has_txtbuffer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->txtbuffer().data(), this->txtbuffer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->txtbuffer(), target);
  }

  // optional string imagewidth = 8;
  if (has_imagewidth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagewidth().data(), this->imagewidth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->imagewidth(), target);
  }

  // optional string imageheight = 9;
  if (has_imageheight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imageheight().data(), this->imageheight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->imageheight(), target);
  }

  // optional string videolength = 10;
  if (has_videolength()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videolength().data(), this->videolength().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->videolength(), target);
  }

  // optional string videokey = 11;
  if (has_videokey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videokey().data(), this->videokey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->videokey(), target);
  }

  // optional string videotitle = 12;
  if (has_videotitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videotitle().data(), this->videotitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->videotitle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int im_immessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string touser = 2;
    if (has_touser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->touser());
    }

    // required string msgtype = 3;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgtype());
    }

    // required string fromuser = 4;
    if (has_fromuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromuser());
    }

    // required string category = 5;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category());
    }

    // required string imagekey = 6;
    if (has_imagekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imagekey());
    }

    // required string txtbuffer = 7;
    if (has_txtbuffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->txtbuffer());
    }

    // optional string imagewidth = 8;
    if (has_imagewidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imagewidth());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string imageheight = 9;
    if (has_imageheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imageheight());
    }

    // optional string videolength = 10;
    if (has_videolength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->videolength());
    }

    // optional string videokey = 11;
    if (has_videokey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->videokey());
    }

    // optional string videotitle = 12;
    if (has_videotitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->videotitle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void im_immessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const im_immessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const im_immessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void im_immessage::MergeFrom(const im_immessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_touser()) {
      set_touser(from.touser());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_fromuser()) {
      set_fromuser(from.fromuser());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_imagekey()) {
      set_imagekey(from.imagekey());
    }
    if (from.has_txtbuffer()) {
      set_txtbuffer(from.txtbuffer());
    }
    if (from.has_imagewidth()) {
      set_imagewidth(from.imagewidth());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_imageheight()) {
      set_imageheight(from.imageheight());
    }
    if (from.has_videolength()) {
      set_videolength(from.videolength());
    }
    if (from.has_videokey()) {
      set_videokey(from.videokey());
    }
    if (from.has_videotitle()) {
      set_videotitle(from.videotitle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void im_immessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void im_immessage::CopyFrom(const im_immessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool im_immessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void im_immessage::Swap(im_immessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(touser_, other->touser_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(fromuser_, other->fromuser_);
    std::swap(category_, other->category_);
    std::swap(imagekey_, other->imagekey_);
    std::swap(txtbuffer_, other->txtbuffer_);
    std::swap(imagewidth_, other->imagewidth_);
    std::swap(imageheight_, other->imageheight_);
    std::swap(videolength_, other->videolength_);
    std::swap(videokey_, other->videokey_);
    std::swap(videotitle_, other->videotitle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata im_immessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = im_immessage_descriptor_;
  metadata.reflection = im_immessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int im_immappoint::kXpointFieldNumber;
const int im_immappoint::kYpointFieldNumber;
#endif  // !_MSC_VER

im_immappoint::im_immappoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void im_immappoint::InitAsDefaultInstance() {
}

im_immappoint::im_immappoint(const im_immappoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void im_immappoint::SharedCtor() {
  _cached_size_ = 0;
  xpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ypoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

im_immappoint::~im_immappoint() {
  SharedDtor();
}

void im_immappoint::SharedDtor() {
  if (xpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete xpoint_;
  }
  if (ypoint_ != &::google::protobuf::internal::kEmptyString) {
    delete ypoint_;
  }
  if (this != default_instance_) {
  }
}

void im_immappoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* im_immappoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_immappoint_descriptor_;
}

const im_immappoint& im_immappoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

im_immappoint* im_immappoint::default_instance_ = NULL;

im_immappoint* im_immappoint::New() const {
  return new im_immappoint;
}

void im_immappoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_xpoint()) {
      if (xpoint_ != &::google::protobuf::internal::kEmptyString) {
        xpoint_->clear();
      }
    }
    if (has_ypoint()) {
      if (ypoint_ != &::google::protobuf::internal::kEmptyString) {
        ypoint_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool im_immappoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string xpoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->xpoint().data(), this->xpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ypoint;
        break;
      }

      // required string ypoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ypoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ypoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ypoint().data(), this->ypoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void im_immappoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string xpoint = 1;
  if (has_xpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xpoint().data(), this->xpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->xpoint(), output);
  }

  // required string ypoint = 2;
  if (has_ypoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ypoint().data(), this->ypoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ypoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* im_immappoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string xpoint = 1;
  if (has_xpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->xpoint().data(), this->xpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->xpoint(), target);
  }

  // required string ypoint = 2;
  if (has_ypoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ypoint().data(), this->ypoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ypoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int im_immappoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string xpoint = 1;
    if (has_xpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xpoint());
    }

    // required string ypoint = 2;
    if (has_ypoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ypoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void im_immappoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const im_immappoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const im_immappoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void im_immappoint::MergeFrom(const im_immappoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xpoint()) {
      set_xpoint(from.xpoint());
    }
    if (from.has_ypoint()) {
      set_ypoint(from.ypoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void im_immappoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void im_immappoint::CopyFrom(const im_immappoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool im_immappoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void im_immappoint::Swap(im_immappoint* other) {
  if (other != this) {
    std::swap(xpoint_, other->xpoint_);
    std::swap(ypoint_, other->ypoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata im_immappoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = im_immappoint_descriptor_;
  metadata.reflection = im_immappoint_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int im_imdelete::kMsgidFieldNumber;
const int im_imdelete::kImagekeyFieldNumber;
const int im_imdelete::kVideokeyFieldNumber;
#endif  // !_MSC_VER

im_imdelete::im_imdelete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void im_imdelete::InitAsDefaultInstance() {
}

im_imdelete::im_imdelete(const im_imdelete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void im_imdelete::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imagekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  videokey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

im_imdelete::~im_imdelete() {
  SharedDtor();
}

void im_imdelete::SharedDtor() {
  if (msgid_ != &::google::protobuf::internal::kEmptyString) {
    delete msgid_;
  }
  if (imagekey_ != &::google::protobuf::internal::kEmptyString) {
    delete imagekey_;
  }
  if (videokey_ != &::google::protobuf::internal::kEmptyString) {
    delete videokey_;
  }
  if (this != default_instance_) {
  }
}

void im_imdelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* im_imdelete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_imdelete_descriptor_;
}

const im_imdelete& im_imdelete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

im_imdelete* im_imdelete::default_instance_ = NULL;

im_imdelete* im_imdelete::New() const {
  return new im_imdelete;
}

void im_imdelete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msgid()) {
      if (msgid_ != &::google::protobuf::internal::kEmptyString) {
        msgid_->clear();
      }
    }
    if (has_imagekey()) {
      if (imagekey_ != &::google::protobuf::internal::kEmptyString) {
        imagekey_->clear();
      }
    }
    if (has_videokey()) {
      if (videokey_ != &::google::protobuf::internal::kEmptyString) {
        videokey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool im_imdelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string msgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgid().data(), this->msgid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_imagekey;
        break;
      }

      // required string imagekey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imagekey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imagekey().data(), this->imagekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_videokey;
        break;
      }

      // required string videokey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_videokey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_videokey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->videokey().data(), this->videokey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void im_imdelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msgid(), output);
  }

  // required string imagekey = 2;
  if (has_imagekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagekey().data(), this->imagekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->imagekey(), output);
  }

  // required string videokey = 3;
  if (has_videokey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videokey().data(), this->videokey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->videokey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* im_imdelete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgid().data(), this->msgid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msgid(), target);
  }

  // required string imagekey = 2;
  if (has_imagekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagekey().data(), this->imagekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->imagekey(), target);
  }

  // required string videokey = 3;
  if (has_videokey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->videokey().data(), this->videokey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->videokey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int im_imdelete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgid());
    }

    // required string imagekey = 2;
    if (has_imagekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imagekey());
    }

    // required string videokey = 3;
    if (has_videokey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->videokey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void im_imdelete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const im_imdelete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const im_imdelete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void im_imdelete::MergeFrom(const im_imdelete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_imagekey()) {
      set_imagekey(from.imagekey());
    }
    if (from.has_videokey()) {
      set_videokey(from.videokey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void im_imdelete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void im_imdelete::CopyFrom(const im_imdelete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool im_imdelete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void im_imdelete::Swap(im_imdelete* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(imagekey_, other->imagekey_);
    std::swap(videokey_, other->videokey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata im_imdelete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = im_imdelete_descriptor_;
  metadata.reflection = im_imdelete_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int im_imblacklist::kTypeFieldNumber;
const int im_imblacklist::kBlackidFieldNumber;
#endif  // !_MSC_VER

im_imblacklist::im_imblacklist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void im_imblacklist::InitAsDefaultInstance() {
}

im_imblacklist::im_imblacklist(const im_imblacklist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void im_imblacklist::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  blackid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

im_imblacklist::~im_imblacklist() {
  SharedDtor();
}

void im_imblacklist::SharedDtor() {
  if (blackid_ != &::google::protobuf::internal::kEmptyString) {
    delete blackid_;
  }
  if (this != default_instance_) {
  }
}

void im_imblacklist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* im_imblacklist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_imblacklist_descriptor_;
}

const im_imblacklist& im_imblacklist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

im_imblacklist* im_imblacklist::default_instance_ = NULL;

im_imblacklist* im_imblacklist::New() const {
  return new im_imblacklist;
}

void im_imblacklist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_blackid()) {
      if (blackid_ != &::google::protobuf::internal::kEmptyString) {
        blackid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool im_imblacklist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blackid;
        break;
      }

      // required string blackid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blackid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blackid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->blackid().data(), this->blackid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void im_imblacklist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required string blackid = 2;
  if (has_blackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->blackid().data(), this->blackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->blackid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* im_imblacklist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required string blackid = 2;
  if (has_blackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->blackid().data(), this->blackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->blackid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int im_imblacklist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string blackid = 2;
    if (has_blackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blackid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void im_imblacklist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const im_imblacklist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const im_imblacklist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void im_imblacklist::MergeFrom(const im_imblacklist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_blackid()) {
      set_blackid(from.blackid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void im_imblacklist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void im_imblacklist::CopyFrom(const im_imblacklist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool im_imblacklist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void im_imblacklist::Swap(im_imblacklist* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(blackid_, other->blackid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata im_imblacklist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = im_imblacklist_descriptor_;
  metadata.reflection = im_imblacklist_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int im::kMsgtypeFieldNumber;
const int im::kAckFieldNumber;
const int im::kChatFieldNumber;
const int im::kCloseFieldNumber;
const int im::kLoginFieldNumber;
const int im::kLogoutFieldNumber;
const int im::kUpstreamFieldNumber;
const int im::kKeepaliveFieldNumber;
const int im::kPgcreateFieldNumber;
const int im::kPginviteFieldNumber;
const int im::kPgquitFieldNumber;
const int im::kPgmodifyFieldNumber;
const int im::kPgcardFieldNumber;
const int im::kSnsFieldNumber;
const int im::kFansmodifyFieldNumber;
const int im::kFansappendFieldNumber;
const int im::kFansdeleteFieldNumber;
const int im::kMessageFieldNumber;
const int im::kMappointFieldNumber;
const int im::kDeleteFieldNumber;
const int im::kBlacklistFieldNumber;
#endif  // !_MSC_VER

im::im()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void im::InitAsDefaultInstance() {
  ack_ = const_cast< ::im::im_imack*>(&::im::im_imack::default_instance());
  chat_ = const_cast< ::im::im_imchat*>(&::im::im_imchat::default_instance());
  close_ = const_cast< ::im::im_imclose*>(&::im::im_imclose::default_instance());
  login_ = const_cast< ::im::im_imlogin*>(&::im::im_imlogin::default_instance());
  logout_ = const_cast< ::im::im_imlogout*>(&::im::im_imlogout::default_instance());
  upstream_ = const_cast< ::im::im_imupstream*>(&::im::im_imupstream::default_instance());
  keepalive_ = const_cast< ::im::im_imkeepalive*>(&::im::im_imkeepalive::default_instance());
  pgcreate_ = const_cast< ::im::im_impgcreate*>(&::im::im_impgcreate::default_instance());
  pginvite_ = const_cast< ::im::im_impginvite*>(&::im::im_impginvite::default_instance());
  pgquit_ = const_cast< ::im::im_impgquit*>(&::im::im_impgquit::default_instance());
  pgmodify_ = const_cast< ::im::im_impgmodify*>(&::im::im_impgmodify::default_instance());
  pgcard_ = const_cast< ::im::im_impgcard*>(&::im::im_impgcard::default_instance());
  sns_ = const_cast< ::im::im_imsns*>(&::im::im_imsns::default_instance());
  fansmodify_ = const_cast< ::im::im_imfansmodify*>(&::im::im_imfansmodify::default_instance());
  fansappend_ = const_cast< ::im::im_imfansappend*>(&::im::im_imfansappend::default_instance());
  fansdelete_ = const_cast< ::im::im_imfansdelete*>(&::im::im_imfansdelete::default_instance());
  message_ = const_cast< ::im::im_immessage*>(&::im::im_immessage::default_instance());
  mappoint_ = const_cast< ::im::im_immappoint*>(&::im::im_immappoint::default_instance());
  delete__ = const_cast< ::im::im_imdelete*>(&::im::im_imdelete::default_instance());
  blacklist__ = const_cast< ::im::im_imblacklist*>(&::im::im_imblacklist::default_instance());
}

im::im(const im& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void im::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 0;
  ack_ = NULL;
  chat_ = NULL;
  close_ = NULL;
  login_ = NULL;
  logout_ = NULL;
  upstream_ = NULL;
  keepalive_ = NULL;
  pgcreate_ = NULL;
  pginvite_ = NULL;
  pgquit_ = NULL;
  pgmodify_ = NULL;
  pgcard_ = NULL;
  sns_ = NULL;
  fansmodify_ = NULL;
  fansappend_ = NULL;
  fansdelete_ = NULL;
  message_ = NULL;
  mappoint_ = NULL;
  delete__ = NULL;
  blacklist__ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

im::~im() {
  SharedDtor();
}

void im::SharedDtor() {
  if (this != default_instance_) {
    delete ack_;
    delete chat_;
    delete close_;
    delete login_;
    delete logout_;
    delete upstream_;
    delete keepalive_;
    delete pgcreate_;
    delete pginvite_;
    delete pgquit_;
    delete pgmodify_;
    delete pgcard_;
    delete sns_;
    delete fansmodify_;
    delete fansappend_;
    delete fansdelete_;
    delete message_;
    delete mappoint_;
    delete delete__;
    delete blacklist__;
  }
}

void im::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* im::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return im_descriptor_;
}

const im& im::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_im_2eproto();
  return *default_instance_;
}

im* im::default_instance_ = NULL;

im* im::New() const {
  return new im;
}

void im::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgtype_ = 0;
    if (has_ack()) {
      if (ack_ != NULL) ack_->::im::im_imack::Clear();
    }
    if (has_chat()) {
      if (chat_ != NULL) chat_->::im::im_imchat::Clear();
    }
    if (has_close()) {
      if (close_ != NULL) close_->::im::im_imclose::Clear();
    }
    if (has_login()) {
      if (login_ != NULL) login_->::im::im_imlogin::Clear();
    }
    if (has_logout()) {
      if (logout_ != NULL) logout_->::im::im_imlogout::Clear();
    }
    if (has_upstream()) {
      if (upstream_ != NULL) upstream_->::im::im_imupstream::Clear();
    }
    if (has_keepalive()) {
      if (keepalive_ != NULL) keepalive_->::im::im_imkeepalive::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_pgcreate()) {
      if (pgcreate_ != NULL) pgcreate_->::im::im_impgcreate::Clear();
    }
    if (has_pginvite()) {
      if (pginvite_ != NULL) pginvite_->::im::im_impginvite::Clear();
    }
    if (has_pgquit()) {
      if (pgquit_ != NULL) pgquit_->::im::im_impgquit::Clear();
    }
    if (has_pgmodify()) {
      if (pgmodify_ != NULL) pgmodify_->::im::im_impgmodify::Clear();
    }
    if (has_pgcard()) {
      if (pgcard_ != NULL) pgcard_->::im::im_impgcard::Clear();
    }
    if (has_sns()) {
      if (sns_ != NULL) sns_->::im::im_imsns::Clear();
    }
    if (has_fansmodify()) {
      if (fansmodify_ != NULL) fansmodify_->::im::im_imfansmodify::Clear();
    }
    if (has_fansappend()) {
      if (fansappend_ != NULL) fansappend_->::im::im_imfansappend::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_fansdelete()) {
      if (fansdelete_ != NULL) fansdelete_->::im::im_imfansdelete::Clear();
    }
    if (has_message()) {
      if (message_ != NULL) message_->::im::im_immessage::Clear();
    }
    if (has_mappoint()) {
      if (mappoint_ != NULL) mappoint_->::im::im_immappoint::Clear();
    }
    if (has_delete_()) {
      if (delete__ != NULL) delete__->::im::im_imdelete::Clear();
    }
    if (has_blacklist_()) {
      if (blacklist__ != NULL) blacklist__->::im::im_imblacklist::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool im::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .im.im.Type msgtype = 1 [default = IM_ROOT];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::im::im_Type_IsValid(value)) {
            set_msgtype(static_cast< ::im::im_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ack;
        break;
      }

      // optional .im.im.imack ack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chat;
        break;
      }

      // optional .im.im.imchat chat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_close;
        break;
      }

      // optional .im.im.imclose close = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_close:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_close()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_login;
        break;
      }

      // optional .im.im.imlogin login = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_logout;
        break;
      }

      // optional .im.im.imlogout logout = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_upstream;
        break;
      }

      // optional .im.im.imupstream upstream = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upstream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upstream()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_keepalive;
        break;
      }

      // optional .im.im.imkeepalive keepalive = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keepalive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keepalive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pgcreate;
        break;
      }

      // optional .im.im.impgcreate pgcreate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pgcreate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pgcreate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_pginvite;
        break;
      }

      // optional .im.im.impginvite pginvite = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pginvite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pginvite()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_pgquit;
        break;
      }

      // optional .im.im.impgquit pgquit = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pgquit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pgquit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_pgmodify;
        break;
      }

      // optional .im.im.impgmodify pgmodify = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pgmodify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pgmodify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_pgcard;
        break;
      }

      // optional .im.im.impgcard pgcard = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pgcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pgcard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_sns;
        break;
      }

      // optional .im.im.imsns sns = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_fansmodify;
        break;
      }

      // optional .im.im.imfansmodify fansmodify = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fansmodify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fansmodify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_fansappend;
        break;
      }

      // optional .im.im.imfansappend fansappend = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fansappend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fansappend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_fansdelete;
        break;
      }

      // optional .im.im.imfansdelete fansdelete = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fansdelete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fansdelete()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_message;
        break;
      }

      // optional .im.im.immessage message = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_mappoint;
        break;
      }

      // optional .im.im.immappoint mappoint = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mappoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mappoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_delete_;
        break;
      }

      // optional .im.im.imdelete delete_ = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delete_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_blacklist_;
        break;
      }

      // optional .im.im.imblacklist blacklist_ = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blacklist_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blacklist_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void im::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .im.im.Type msgtype = 1 [default = IM_ROOT];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional .im.im.imack ack = 2;
  if (has_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ack(), output);
  }

  // optional .im.im.imchat chat = 3;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chat(), output);
  }

  // optional .im.im.imclose close = 4;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->close(), output);
  }

  // optional .im.im.imlogin login = 5;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->login(), output);
  }

  // optional .im.im.imlogout logout = 6;
  if (has_logout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->logout(), output);
  }

  // optional .im.im.imupstream upstream = 7;
  if (has_upstream()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->upstream(), output);
  }

  // optional .im.im.imkeepalive keepalive = 8;
  if (has_keepalive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->keepalive(), output);
  }

  // optional .im.im.impgcreate pgcreate = 9;
  if (has_pgcreate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->pgcreate(), output);
  }

  // optional .im.im.impginvite pginvite = 10;
  if (has_pginvite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->pginvite(), output);
  }

  // optional .im.im.impgquit pgquit = 11;
  if (has_pgquit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->pgquit(), output);
  }

  // optional .im.im.impgmodify pgmodify = 12;
  if (has_pgmodify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->pgmodify(), output);
  }

  // optional .im.im.impgcard pgcard = 13;
  if (has_pgcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->pgcard(), output);
  }

  // optional .im.im.imsns sns = 14;
  if (has_sns()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->sns(), output);
  }

  // optional .im.im.imfansmodify fansmodify = 15;
  if (has_fansmodify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->fansmodify(), output);
  }

  // optional .im.im.imfansappend fansappend = 16;
  if (has_fansappend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->fansappend(), output);
  }

  // optional .im.im.imfansdelete fansdelete = 17;
  if (has_fansdelete()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->fansdelete(), output);
  }

  // optional .im.im.immessage message = 18;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->message(), output);
  }

  // optional .im.im.immappoint mappoint = 19;
  if (has_mappoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->mappoint(), output);
  }

  // optional .im.im.imdelete delete_ = 20;
  if (has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->delete_(), output);
  }

  // optional .im.im.imblacklist blacklist_ = 21;
  if (has_blacklist_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->blacklist_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* im::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .im.im.Type msgtype = 1 [default = IM_ROOT];
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional .im.im.imack ack = 2;
  if (has_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ack(), target);
  }

  // optional .im.im.imchat chat = 3;
  if (has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chat(), target);
  }

  // optional .im.im.imclose close = 4;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->close(), target);
  }

  // optional .im.im.imlogin login = 5;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->login(), target);
  }

  // optional .im.im.imlogout logout = 6;
  if (has_logout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->logout(), target);
  }

  // optional .im.im.imupstream upstream = 7;
  if (has_upstream()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->upstream(), target);
  }

  // optional .im.im.imkeepalive keepalive = 8;
  if (has_keepalive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->keepalive(), target);
  }

  // optional .im.im.impgcreate pgcreate = 9;
  if (has_pgcreate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->pgcreate(), target);
  }

  // optional .im.im.impginvite pginvite = 10;
  if (has_pginvite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->pginvite(), target);
  }

  // optional .im.im.impgquit pgquit = 11;
  if (has_pgquit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->pgquit(), target);
  }

  // optional .im.im.impgmodify pgmodify = 12;
  if (has_pgmodify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->pgmodify(), target);
  }

  // optional .im.im.impgcard pgcard = 13;
  if (has_pgcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->pgcard(), target);
  }

  // optional .im.im.imsns sns = 14;
  if (has_sns()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->sns(), target);
  }

  // optional .im.im.imfansmodify fansmodify = 15;
  if (has_fansmodify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->fansmodify(), target);
  }

  // optional .im.im.imfansappend fansappend = 16;
  if (has_fansappend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->fansappend(), target);
  }

  // optional .im.im.imfansdelete fansdelete = 17;
  if (has_fansdelete()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->fansdelete(), target);
  }

  // optional .im.im.immessage message = 18;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->message(), target);
  }

  // optional .im.im.immappoint mappoint = 19;
  if (has_mappoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->mappoint(), target);
  }

  // optional .im.im.imdelete delete_ = 20;
  if (has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->delete_(), target);
  }

  // optional .im.im.imblacklist blacklist_ = 21;
  if (has_blacklist_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->blacklist_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int im::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .im.im.Type msgtype = 1 [default = IM_ROOT];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional .im.im.imack ack = 2;
    if (has_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ack());
    }

    // optional .im.im.imchat chat = 3;
    if (has_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chat());
    }

    // optional .im.im.imclose close = 4;
    if (has_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->close());
    }

    // optional .im.im.imlogin login = 5;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login());
    }

    // optional .im.im.imlogout logout = 6;
    if (has_logout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logout());
    }

    // optional .im.im.imupstream upstream = 7;
    if (has_upstream()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upstream());
    }

    // optional .im.im.imkeepalive keepalive = 8;
    if (has_keepalive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keepalive());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .im.im.impgcreate pgcreate = 9;
    if (has_pgcreate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pgcreate());
    }

    // optional .im.im.impginvite pginvite = 10;
    if (has_pginvite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pginvite());
    }

    // optional .im.im.impgquit pgquit = 11;
    if (has_pgquit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pgquit());
    }

    // optional .im.im.impgmodify pgmodify = 12;
    if (has_pgmodify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pgmodify());
    }

    // optional .im.im.impgcard pgcard = 13;
    if (has_pgcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pgcard());
    }

    // optional .im.im.imsns sns = 14;
    if (has_sns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sns());
    }

    // optional .im.im.imfansmodify fansmodify = 15;
    if (has_fansmodify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fansmodify());
    }

    // optional .im.im.imfansappend fansappend = 16;
    if (has_fansappend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fansappend());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .im.im.imfansdelete fansdelete = 17;
    if (has_fansdelete()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fansdelete());
    }

    // optional .im.im.immessage message = 18;
    if (has_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }

    // optional .im.im.immappoint mappoint = 19;
    if (has_mappoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mappoint());
    }

    // optional .im.im.imdelete delete_ = 20;
    if (has_delete_()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delete_());
    }

    // optional .im.im.imblacklist blacklist_ = 21;
    if (has_blacklist_()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blacklist_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void im::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const im* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const im*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void im::MergeFrom(const im& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_ack()) {
      mutable_ack()->::im::im_imack::MergeFrom(from.ack());
    }
    if (from.has_chat()) {
      mutable_chat()->::im::im_imchat::MergeFrom(from.chat());
    }
    if (from.has_close()) {
      mutable_close()->::im::im_imclose::MergeFrom(from.close());
    }
    if (from.has_login()) {
      mutable_login()->::im::im_imlogin::MergeFrom(from.login());
    }
    if (from.has_logout()) {
      mutable_logout()->::im::im_imlogout::MergeFrom(from.logout());
    }
    if (from.has_upstream()) {
      mutable_upstream()->::im::im_imupstream::MergeFrom(from.upstream());
    }
    if (from.has_keepalive()) {
      mutable_keepalive()->::im::im_imkeepalive::MergeFrom(from.keepalive());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pgcreate()) {
      mutable_pgcreate()->::im::im_impgcreate::MergeFrom(from.pgcreate());
    }
    if (from.has_pginvite()) {
      mutable_pginvite()->::im::im_impginvite::MergeFrom(from.pginvite());
    }
    if (from.has_pgquit()) {
      mutable_pgquit()->::im::im_impgquit::MergeFrom(from.pgquit());
    }
    if (from.has_pgmodify()) {
      mutable_pgmodify()->::im::im_impgmodify::MergeFrom(from.pgmodify());
    }
    if (from.has_pgcard()) {
      mutable_pgcard()->::im::im_impgcard::MergeFrom(from.pgcard());
    }
    if (from.has_sns()) {
      mutable_sns()->::im::im_imsns::MergeFrom(from.sns());
    }
    if (from.has_fansmodify()) {
      mutable_fansmodify()->::im::im_imfansmodify::MergeFrom(from.fansmodify());
    }
    if (from.has_fansappend()) {
      mutable_fansappend()->::im::im_imfansappend::MergeFrom(from.fansappend());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fansdelete()) {
      mutable_fansdelete()->::im::im_imfansdelete::MergeFrom(from.fansdelete());
    }
    if (from.has_message()) {
      mutable_message()->::im::im_immessage::MergeFrom(from.message());
    }
    if (from.has_mappoint()) {
      mutable_mappoint()->::im::im_immappoint::MergeFrom(from.mappoint());
    }
    if (from.has_delete_()) {
      mutable_delete_()->::im::im_imdelete::MergeFrom(from.delete_());
    }
    if (from.has_blacklist_()) {
      mutable_blacklist_()->::im::im_imblacklist::MergeFrom(from.blacklist_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void im::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void im::CopyFrom(const im& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool im::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ack()) {
    if (!this->ack().IsInitialized()) return false;
  }
  if (has_chat()) {
    if (!this->chat().IsInitialized()) return false;
  }
  if (has_close()) {
    if (!this->close().IsInitialized()) return false;
  }
  if (has_upstream()) {
    if (!this->upstream().IsInitialized()) return false;
  }
  if (has_keepalive()) {
    if (!this->keepalive().IsInitialized()) return false;
  }
  if (has_pgcreate()) {
    if (!this->pgcreate().IsInitialized()) return false;
  }
  if (has_pginvite()) {
    if (!this->pginvite().IsInitialized()) return false;
  }
  if (has_pgquit()) {
    if (!this->pgquit().IsInitialized()) return false;
  }
  if (has_pgmodify()) {
    if (!this->pgmodify().IsInitialized()) return false;
  }
  if (has_pgcard()) {
    if (!this->pgcard().IsInitialized()) return false;
  }
  if (has_sns()) {
    if (!this->sns().IsInitialized()) return false;
  }
  if (has_fansmodify()) {
    if (!this->fansmodify().IsInitialized()) return false;
  }
  if (has_fansappend()) {
    if (!this->fansappend().IsInitialized()) return false;
  }
  if (has_fansdelete()) {
    if (!this->fansdelete().IsInitialized()) return false;
  }
  if (has_message()) {
    if (!this->message().IsInitialized()) return false;
  }
  if (has_mappoint()) {
    if (!this->mappoint().IsInitialized()) return false;
  }
  if (has_delete_()) {
    if (!this->delete_().IsInitialized()) return false;
  }
  if (has_blacklist_()) {
    if (!this->blacklist_().IsInitialized()) return false;
  }
  return true;
}

void im::Swap(im* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(ack_, other->ack_);
    std::swap(chat_, other->chat_);
    std::swap(close_, other->close_);
    std::swap(login_, other->login_);
    std::swap(logout_, other->logout_);
    std::swap(upstream_, other->upstream_);
    std::swap(keepalive_, other->keepalive_);
    std::swap(pgcreate_, other->pgcreate_);
    std::swap(pginvite_, other->pginvite_);
    std::swap(pgquit_, other->pgquit_);
    std::swap(pgmodify_, other->pgmodify_);
    std::swap(pgcard_, other->pgcard_);
    std::swap(sns_, other->sns_);
    std::swap(fansmodify_, other->fansmodify_);
    std::swap(fansappend_, other->fansappend_);
    std::swap(fansdelete_, other->fansdelete_);
    std::swap(message_, other->message_);
    std::swap(mappoint_, other->mappoint_);
    std::swap(delete__, other->delete__);
    std::swap(blacklist__, other->blacklist__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata im::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = im_descriptor_;
  metadata.reflection = im_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace im

// @@protoc_insertion_point(global_scope)
