//============================================================================
// Name        : libim.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C, Ansi-style
//============================================================================

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "Defines.h"
#include "CIMI.h"


void BuddyTest_GetBuddy(const string& pUserId);
void BuddyTest_GetContact(const string& pUserId, BOOL bLoadFromServer);
void MessageTest_GetSession(string pSessionId);
void MessageTest_GetMessage(string pSessionId, string pMsgId);

string GetRootDirectory ()
{
	string root;
	char *buffer;
	if((buffer = getcwd(NULL, 0)) == NULL)
	{
		printf ("getcwd error");
		return "";
	}
	else
	{
		printf ("%s\n", buffer);
		root = buffer;
		free(buffer);
	}
	return root;
}

class UILoginObserver : public IObserver
{
	virtual HRESULT OnNotify (VOID* pNotify)
	{
		RspParams* rspParams = (RspParams*)pNotify;
		enum RspType eRspType = rspParams->eRspType;
		switch (eRspType)
		{
		case ST_NETWORK_FAILURE:
			printf ("UI: Network failure\n");
			break;

		case ST_LOGIN_SUCCESS:
			printf ("UI: Login success\n");
			break;

		case ST_LOGIN_FAILURE:
			printf ("UI: Login failure\n");
			break;

		case ST_LOGIN_PROCESS:
			printf ("UI: Login process\n");
			break;

		case ST_LOGIN_ELSEWHERE:
		{
			printf ("UI: Login elsewhere\n");

			//CIMI* pimi = CIMI::GetInstance();

//			pimi->Init();
//			pimi->SetRootDir(GetRootDirectory());
//			pimi->SetServerAddr("10.0.247.179", "8000");
//
//			pimi->SetUserId("cuixiaoyu");
//
//			printf("UI: pUserId=%s\r\n", pimi->GetUserId().c_str());
//			pimi->OpenLog(TRUE);
//
//			UILoginObserver* pUILoginObserver = new UILoginObserver();
//			pimi->SetObserver(OT_LOGIN, pUILoginObserver);
//
//
//			// login to server
//			ReqParams reqParams = {};
//			reqParams.eReqType = RT_LOGIN;
//			pimi->Login(&reqParams);
		}

			break;

		case ST_LOGOUT_SUCCESS:
			printf ("UI: Logout success\n");
			break;

		case ST_LOGOUT_FAILURE:
			printf ("UI: Logout failure\n");
			break;

		case ST_LOGIN_VERSIONLOW:
			printf ("UI: Login version low\n");
			break;

		default:
			break;
		}

		return S_OK;
	}
};

class UIMessageObserver : public IObserver
{
	virtual HRESULT OnNotify (VOID* pNotify)
	{
		RspParams* pRspParams = (RspParams*)pNotify;
		enum RspType eRspType = pRspParams->eRspType;
		switch (eRspType)
		{
		case ST_SEND_MESSAGE_SUCCESS:
			{
				MessageParams * pMessageParams = (MessageParams*)pRspParams->pMessageParams;
				printf ("UI: Send message success, pMsgId=%s, pSessionId=%s\n",
						pMessageParams->pMsgId.c_str(),
						pMessageParams->pSessionId.c_str());
			}
			break;

		case ST_SEND_MESSAGE_FAILURE:
			{
				MessageParams * pMessageParams = (MessageParams*)pRspParams->pMessageParams;
				printf ("UI: Send message failure, pMsgId=%s, pSessionId=%s\n",
						pMessageParams->pMsgId.c_str(),
						pMessageParams->pSessionId.c_str());
			}
			break;

		case ST_SEND_MESSAGE_PROCESS:
			{
				MessageParams * pMessageParams = (MessageParams*)pRspParams->pMessageParams;
				printf ("UI: Send message process, pMsgId=%s, pSessionId=%s\n",
						pMessageParams->pMsgId.c_str(),
						pMessageParams->pSessionId.c_str());
				MessageTest_GetSession(pMessageParams->pSessionId);
				MessageTest_GetMessage(pMessageParams->pSessionId, pMessageParams->pMsgId);
			}
			break;

		case ST_RECV_MESSAGE:
			{
				MessageParams * pMessageParams = (MessageParams*)pRspParams->pMessageParams;
				printf ("UI: Recv message, pMsgId=%s, pSessionId=%s, pSender=%s, pSenderName=%s, pReceiver=%s, "
						"pContent=%s, pTime=%s, eMessageType=%d, eKindType=%d, eCategoryType=%d, eOnlineStatus=%d\n",
						pMessageParams->pMsgId.c_str(),
						pMessageParams->pSessionId.c_str(),
						pMessageParams->pSender.c_str(),
						pMessageParams->pSenderName.c_str(),
						pMessageParams->pReceiver.c_str(),
						pMessageParams->pContent.c_str(),
						pMessageParams->pTime.c_str(),
						pMessageParams->eType,
						pMessageParams->eKind,
						pMessageParams->eCategory,
						pMessageParams->eOnline);

				CIMI* pimi = CIMI::GetInstance();
				SessionList  list = pimi->GetSessionList();
				vector<SessionParams> sessionlist = list.ppSessionParams;
				for(int i = 0; i < sessionlist.size(); i++)
				{
					printf("Session id:%s,unread count:%d.\r\n",sessionlist[i].pSessionId.c_str(),sessionlist[i].nUnreadNum);
				}

			}
			break;

		case ST_RECV_OFFLINE_MESSAGE:
			{
				OfflineMessageParams* pOfflineMessageParams = (OfflineMessageParams*)pRspParams->pOfflineMessageParams;
				printf ("UI: Recv offline messages, nOfflineTotal=%d, nSessionCount=%d\n",
						pOfflineMessageParams->nOfflineTotal, pOfflineMessageParams->nSessionCount);
				for (int i=0; i<pOfflineMessageParams->nSessionCount; i++)
				{
					const string pSessionId = pOfflineMessageParams->ppSessionId[i];
					printf ("UI: [%d]: SessionId=[%s]\n", i + 1, pSessionId.c_str());

					CIMI* pimi = CIMI::GetInstance();
					MessageList pMessageList = pimi->GetOfflineMessageList(pSessionId);
					for (int j=0; j<pMessageList.nCount; j++)
					{
						MessageParams pMessageParams = pMessageList.ppMessageParams[j];
						printf ("UI: [%d]: pMsgId=%s, pSessionId=%s, pSender=%s, pSenderName=%s, pSenderKey=%s, pReceiver=%s, pContent=%s, pTime=%s, "
								"eMessageType=%d, eKindType=%d, eCategoryType=%d, eDirection=%d, eUnread=%d, "
								"ePlayed=%d, eSend=%d, eOnline=%d\n",
								j + 1,
								pMessageParams.pMsgId.c_str(),
								pMessageParams.pSessionId.c_str(),
								pMessageParams.pSender.c_str(),
								pMessageParams.pSenderName.c_str(),
								pMessageParams.pSenderKey.c_str(),
								pMessageParams.pReceiver.c_str(),
								pMessageParams.pContent.c_str(),
								pMessageParams.pTime.c_str(),
								pMessageParams.eType,
								pMessageParams.eKind,
								pMessageParams.eCategory,
								pMessageParams.eDirection,
								pMessageParams.eUnread,
								pMessageParams.ePlayed,
								pMessageParams.eSend,
								pMessageParams.eOnline);
					}
				}
			}
			break;

		case ST_RECV_CUSTOM_SMALLNUM:
			{
				IqParams * pIqParams = (IqParams*)pRspParams->pIqParams;
				printf ("UI: Recv custom smallnum, eType=%d, pTalkId=%s, pSmallNum=%s\n",
						pIqParams->eType,
						pIqParams->pTalkId.c_str(),
						pIqParams->pSmallNum.c_str());
			}
			break;

		default:
			break;
		}

		return S_OK;
	}
};

string g_groupid;
string g_groupname;

class UIGroupObserver : public IObserver
{
	virtual HRESULT OnNotify (VOID* pNotify)
	{
		RspParams* pRspParams = (RspParams*)pNotify;
		enum RspType eRspType = pRspParams->eRspType;
		switch (eRspType)
		{
			case ST_ADD_GROUP_SUCCESS:
			{
				GroupParams groupparams;
				groupparams.GroupID = pRspParams->pGroupParams->GroupID;
				groupparams.GroupName = pRspParams->pGroupParams->GroupName;

				printf ("UI: AddGroup success: GroupID:%s,GroupName:%s\n",groupparams.GroupID.c_str(),groupparams.GroupName.c_str());


//				vector<MemberParams> memberlist;
//				vector<GroupParams> grouplist;
//				CIMI* pimi = CIMI::GetInstance();
//				memberlist = pimi->GetGroupMemberList(groupparams.GroupID);
//
//				for(int i = 0; i < memberlist.size(); i++)
//				{
//					printf ("UI: GroupMemberInfo: MemberID:%s,MemberName:%s\n",memberlist[i].MemberID.c_str(),memberlist[i].MemberName.c_str());
////					MemberParams memberinfo;
////					memberinfo = pimi->GetGroupMemberInfo(memberlist[i].MemberID);
////					printf ("UI: GroupMemberInfo: MemberID:%s,MemberName:%s\n",memberinfo.MemberID.c_str(),memberinfo.MemberName.c_str());
//				}
//
//				grouplist = pimi->GetGroupList();
//				for(int i = 0; i < grouplist.size(); i++)
//				{
//					printf ("UI: GroupInfo: GroupID:%s,GroupName:%s,GroupPortraitKey:%s,OwnerID:%s,MemberCount:%s,MemberMaxCount:%s\n",grouplist[i].GroupID.c_str(),grouplist[i].GroupName.c_str(),grouplist[i].GroupPortraitKey.c_str(),grouplist[i].OwnerID.c_str(),grouplist[i].GroupMemberCount.c_str(),grouplist[i].GroupMaxMember.c_str());
////					GroupParams groupinfo;
////					groupinfo = pimi->GetGroupInfo(grouplist[i].GroupID);
////					printf ("UI: GroupInfo: GroupID:%s,GroupName:%s,GroupPortraitKey:%s,OwnerID:%s,MemberCount:%s,MemberMaxCount:%s\n",groupinfo.GroupID.c_str(),groupinfo.GroupName.c_str(),groupinfo.GroupPortraitKey.c_str(),groupinfo.OwnerID.c_str(),groupinfo.GroupMemberCount.c_str(),groupinfo.GroupMaxMember.c_str());
//				}


				g_groupid = groupparams.GroupID;
				g_groupname = groupparams.GroupName;

				break;
			}
			case ST_JOINGRUOP_SUCCESS:
			{
				GroupParams groupparams;

				groupparams.GroupID  = pRspParams->pGroupParams->GroupID;
				groupparams.GroupName  = pRspParams->pGroupParams->GroupName;

				printf ("UI: InviteGroup success: GroupID:%s,GroupName:%s\n",groupparams.GroupID.c_str(),groupparams.GroupName.c_str());

				break;
			}
			case ST_MODIFY_GROUPNAME_SUCCESS:
			{
				GroupParams groupparams;

				groupparams.GroupID  = pRspParams->pGroupParams->GroupID;
				groupparams.GroupName  = pRspParams->pGroupParams->GroupName;

				printf ("UI: ModifyGroup success: GroupID:%s,ModifyName:%s\n",groupparams.GroupID.c_str(),groupparams.GroupName.c_str());

				break;
			}
			case ST_QUIT_GROUP_SUCCESS:
			{
				printf ("UI: QuitGroup successÔºÅ");
				break;
			}
			case ST_GETGROUPLIST_SUCCESS:
			{
//				CIMI* pimi = CIMI::GetInstance();
//				vector<GroupParams> grouplist = pimi->GetGroupList();
//				for(int i = 0; i < (int)grouplist.size(); i++)
//				{
//					printf ("UI: GroupInfo: GroupID:%s,GroupName:%s,GroupPortraitKey:%s,OwnerID:%s,MemberCount:%s,MemberMaxCount:%s\n",grouplist[i].GroupID.c_str(),grouplist[i].GroupName.c_str(),grouplist[i].GroupPortraitKey.c_str(),grouplist[i].OwnerID.c_str(),grouplist[i].GroupMemberCount.c_str(),grouplist[i].GroupMaxMember.c_str());
//				}
				break;
			}
			case ST_NOTIFY_CREATE_GROUP:
			{
				GroupParams createparams;
				createparams.GroupID  = pRspParams->pGroupParams->GroupID;
				createparams.GroupName = pRspParams->pGroupParams->GroupName;

				printf ("UI:%sÈñ≠?ÁíáËúÇÁ∂òÈçîÁä≤ÂèÜÁºá?%s\r\n",createparams.MemberInfo.MemberName.c_str(),createparams.GroupID.c_str());

//				CIMI* pimi = CIMI::GetInstance();

				break;
			}
			case ST_NOTIFY_REFRESH_GROUP:
			{
				GroupParams inviteparams;
				inviteparams.GroupID  = pRspParams->pGroupParams->GroupID;
				inviteparams.GroupName = pRspParams->pGroupParams->GroupName;

				inviteparams.Userlist = pRspParams->pGroupParams->Userlist;

//				CIMI* pimi = CIMI::GetInstance();

				break;
			}
			case ST_NOTIFY_MODIFY_GROUP:
			{
				GroupParams modifyparams;
				modifyparams.GroupID  = pRspParams->pGroupParams->GroupID;
				modifyparams.GroupName = pRspParams->pGroupParams->GroupName;

				printf ("UI:Received Modify Group Name Notify,GroupName:%s",modifyparams.GroupName.c_str());

//				CIMI* pimi = CIMI::GetInstance();

				break;
			}
			case ST_NOTIFY_QUIT_GROUP:
			{
				GroupParams quitparams;
				quitparams.GroupID  = pRspParams->pGroupParams->GroupID;
				quitparams.GroupName = pRspParams->pGroupParams->GroupName;

				printf ("UI:Received Quit Group Notify,GroupName:%s",quitparams.GroupName.c_str());

//				CIMI* pimi = CIMI::GetInstance();

				break;
			}
			default:
				break;
		}
		return S_OK;
	}
};

class UIBuddyObserver : public IObserver
{
	virtual HRESULT OnNotify (VOID* pNotify)
	{
		RspParams* rspParams = (RspParams*)pNotify;
		enum RspType eRspType = rspParams->eRspType;
		switch (eRspType)
		{
		case ST_LOAD_BUDDY_LIST:
			{
			}
			break;
		case ST_LOAD_BUDDY:
			{
				BuddyTest_GetContact("clytze5", FALSE);
			}
			break;
		case ST_SEARCH_BUDDY_SUCCESS:
		{
			CIMI* pimi = CIMI::GetInstance();
			BuddyList buddylist = pimi->GetSearchContact();
			vector<BuddyParams> list = buddylist.ppBuddyParams;
			for(int i = 0; i < list.size(); i++)
			{
				printf ("pUserId=%s, pUserName=%s, pPortraitKey=%s\r\n",
						list[i].pUserId.c_str(),
						list[i].pUserName.c_str(),
						list[i].pPortraitKey.c_str()
				);
			}

		}
		break;

		default:
			break;
		}

		return S_OK;
	}
};

class UIFansObserver : public IObserver
{
	virtual HRESULT OnNotify (VOID* pNotify)
	{
		RspParams* rspParams = (RspParams*)pNotify;
		enum RspType eRspType = rspParams->eRspType;
		switch (eRspType)
		{
		case ST_LOAD_FANS_LIST:
			{
			}
			break;

		default:
			break;
		}

		return S_OK;
	}
};

int GroupTest(void)
{
	CIMI* pimi = CIMI::GetInstance();

	UIGroupObserver* pUIGroupObserver = new UIGroupObserver();

	ReqParams reqParams = {};
	//test getgrouplist

	//pimi->SetObserver(OT_GROUP, pUIGroupObserver);
	//pimi->GetGroupList();



    //test add group
//	reqParams.eReqType = RT_ADD_GROUP;
//	GroupParams pGroupCreateParams;
//	pGroupCreateParams.GroupName ="helloworld";
//	pGroupCreateParams.GroupPortraitKey = "1234567890";
//	pGroupCreateParams.MemberInfo.MemberID = "chenxi";
//	pGroupCreateParams.MemberInfo.MemberName = "chenxi";
//	pGroupCreateParams.MemberInfo.PortraitKey = "1234567890";
//
//	vector<MemberParams>members;
//
//	MemberParams member;
//	member.MemberID = "cuixiaoyu";
//	member.MemberName = "cuixiaoyu";
//	member.PortraitKey = "123";
//
//	MemberParams member1;
//	member1.MemberID = "liuqianguo";
//	member1.MemberName = "liuqianguo";
//	member1.PortraitKey = "456";
//
//	members.push_back(member);
//	members.push_back(member1);
//
//	pGroupCreateParams.Userlist = members;
//	reqParams.pGroupParams = &pGroupCreateParams;
//
//	pimi->SetObserver(OT_GROUP, pUIGroupObserver);
//	pimi->OperateGroup(&reqParams);


//	usleep(5000*1000);

	 //test invite group
//	reqParams.eReqType = RT_INVITE_GROUP;
//	GroupParams pGroupInviteParams;
//	pGroupInviteParams.GroupID = "chenxiF1B739D51";
//	pGroupInviteParams.GroupName = "HelloWorld";
//	pGroupInviteParams.GroupPortraitKey = "1234567890";
//
//	pGroupInviteParams.MemberInfo.MemberID = "chenxi";
//	pGroupInviteParams.MemberInfo.MemberName = "chenxi";
//	pGroupInviteParams.MemberInfo.PortraitKey = "1234567890";
//
//	vector<MemberParams>invitemembers;

//	MemberParams member3;
//	member3.MemberID = "chixueli";
//	member3.MemberName = "chixueli";
//	member3.PortraitKey = "1234567890";
//
//	MemberParams member4;
//	member4.MemberID = "yangfan";
//	member4.MemberName = "yangfan";
//	member4.PortraitKey = "1234567890";
//
//	invitemembers.push_back(member3);
//	invitemembers.push_back(member4);

//	MemberParams member4;
//	member4.MemberID = "wangguoying";
//	member4.MemberName = "wangguoying";
//	member4.PortraitKey = "1234567890";
//	invitemembers.push_back(member4);

//	pGroupInviteParams.Userlist = invitemembers;
//	reqParams.pGroupParams = &pGroupInviteParams;
//
//	pimi->SetObserver(OT_GROUP, pUIGroupObserver);
//	pimi->OperateGroup(&reqParams);
//
//	usleep(3000*1000);
//	// test modify group
//	reqParams.eReqType = RT_MODIFY_GROUP;
//	GroupParams pGroupModifyParams;
//	pGroupModifyParams.GroupID = "chenxiF1B739D51";
//	pGroupModifyParams.GroupName = "‰∏≠ÂõΩÈòüÂä†Ê≤π";
//	pGroupModifyParams.MemberInfo.MemberID = "chenxi";
//
//	reqParams.pGroupParams = &pGroupModifyParams;
//
//	pimi->SetObserver(OT_GROUP, pUIGroupObserver);
//	pimi->OperateGroup(&reqParams);

//	reqParams.eReqType = RT_MODIFY_GROUPMEMBER_NAME;
//	GroupParams pGroupModifyParams;
//	pGroupModifyParams.GroupID = "chenxiF1B739D51";
//	pGroupModifyParams.MemberInfo.MemberID = "chenxi";
//	pGroupModifyParams.MemberInfo.MemberCardName = "ÈôàÂ∏å123";
//
//	reqParams.pGroupParams = &pGroupModifyParams;
//
//	pimi->SetObserver(OT_GROUP, pUIGroupObserver);
//	pimi->OperateGroup(&reqParams);

//
//	usleep(3000*1000);
	// test delete group
	reqParams.eReqType = RT_REMOVE_GROUP;
	GroupParams pGroupDeleteParams;
    pGroupDeleteParams.GroupID = "wangqiang2FBDD79939";
	pGroupDeleteParams.MemberInfo.MemberID = "wangqiang2";
	pGroupDeleteParams.MemberInfo.MemberName = "wangqiang2";
	pGroupDeleteParams.MemberInfo.PortraitKey = "1234567890";

	reqParams.pGroupParams = &pGroupDeleteParams;

	pimi->SetObserver(OT_GROUP, pUIGroupObserver);
	pimi->OperateGroup(&reqParams);



	return EXIT_SUCCESS;
}

int LoginTest_Logout()
{
	CIMI* pimi = CIMI::GetInstance();

	// logout to server
	ReqParams reqParams = {};
	reqParams.eReqType = RT_LOGOUT;
	pimi->Logout(&reqParams);
	return S_OK;
}

int MessageTest_SendMessage(string pUserId)
{
	CIMI* pimi = CIMI::GetInstance();

	printf ("UI: Send personal message\n");
	ReqParams reqParams = {};
	reqParams.eReqType = RT_SEND_MESSAGE;
	MessageParams messageParams = {};
	messageParams.pSender   = "chenxi";
	messageParams.pReceiver = pUserId;
	messageParams.pContent  = "hello world!";
	messageParams.eType     = MT_PERSONAL;
	messageParams.eKind     = KT_ORDINARY;
	messageParams.eCategory = CT_PLAIN_TEXT;
	reqParams.pMessageParams = &messageParams;
	pimi->SendMessage(&reqParams);
}

int MessageTest_SendGroupMessage(string pGroupId)
{
	CIMI* pimi = CIMI::GetInstance();

	// send group message
	printf ("UI: Send group message\r\n");
	ReqParams reqParams = {};
	reqParams.eReqType = RT_SEND_MESSAGE;
	MessageParams messageParams = {};
	messageParams.pSender   = "chenxi";
	messageParams.pReceiver = pGroupId;
	messageParams.pContent  = "hello world!";
	messageParams.eType     = MT_GROUP;
	messageParams.eKind     = KT_ORDINARY;
	messageParams.eCategory = CT_PLAIN_TEXT;
	reqParams.pMessageParams = &messageParams;
	pimi->SendMessage(&reqParams);
}

void MessageTest_SendMessage_LongBody()
{
	CIMI* pimi = CIMI::GetInstance();

	const char* p =
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			"1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
			;

	// send person message
	printf ("UI: Send long body message\n");
	ReqParams reqParams = {};
	reqParams.eReqType = RT_SEND_MESSAGE;
	MessageParams messageParams = {};
	messageParams.pSender   = (CHAR*)"chenxi";
	messageParams.pReceiver = (CHAR*)"chenxi";
	messageParams.pContent  = (CHAR*)p;
	messageParams.eType     = MT_PERSONAL;
	messageParams.eKind     = KT_ORDINARY;
	messageParams.eCategory = CT_PLAIN_TEXT;
	reqParams.pMessageParams = &messageParams;
	pimi->SendMessage(&reqParams);
}

void MessageTest_GetSession(string pSessionId)
{
	CIMI* pimi = CIMI::GetInstance();

	// get session
	printf ("UI: Get session\n");
	SessionParams pSessionParams = pimi->GetSession(pSessionId);
	printf ("pSessionId=%s, pSessionName=%s, pPortraitKey=%s, pMsgId=%s, eType=%d, nUnreadNum=%d, eTop=%d, eRemind=%d\n",
			pSessionParams.pSessionId.c_str(),
			pSessionParams.pSessionName.c_str(),
			pSessionParams.pPortraitKey.c_str(),
			pSessionParams.pMsgId.c_str(),
			pSessionParams.eType,
			pSessionParams.nUnreadNum,
			pSessionParams.eTop,
			pSessionParams.eRemind);
}

void MessageTest_GetSessionList()
{
	CIMI* pimi = CIMI::GetInstance();

	// get session list
	printf ("UI: Get session list\n");
	SessionList pSessionList = pimi->GetSessionList();
	printf ("UI: Session count=%d\n", pSessionList.nCount);
	for (int i=0; i<pSessionList.nCount; i++)
	{
		SessionParams pSessionParams = pSessionList.ppSessionParams[i];
		printf ("UI: [%d]: pSessionId=%s, pSessionName=%s, pPortraitKey=%s, pMsgId=%s, "
				"eType=%d, eKind=%d, nUnreadNum=%d, eTop=%d, eRemind=%d, pDraftContent=%s, eDraftChanged=%d\r\n",
				i + 1,
				pSessionParams.pSessionId.c_str(),
				pSessionParams.pSessionName.c_str(),
				pSessionParams.pPortraitKey.c_str(),
				pSessionParams.pMsgId.c_str(),
				pSessionParams.eType,
				pSessionParams.eKind,
				pSessionParams.nUnreadNum,
				pSessionParams.eTop,
				pSessionParams.eRemind,
				pSessionParams.pDraftContent.c_str(),
				pSessionParams.eDraftChanged);

//		MessageTest_GetMessage(pSessionParams.pSessionId, pSessionParams.pMsgId);
	}
}

void MessageTest_GetMessageList(string pSessionId, string pLastMsgId, int nPageSize)
{
	CIMI* pimi = CIMI::GetInstance();

	// get first page message list
	printf ("UI: Get first page message list\n");
	MessageList pMessageList = pimi->GetMessageList(pSessionId, pLastMsgId, nPageSize);
	printf ("UI: Real message count=%d\n", pMessageList.nCount);
	for (int i=0; i<pMessageList.nCount; i++)
	{
		MessageParams pMessageParams = pMessageList.ppMessageParams[i];
		printf ("UI: [%d]: pMsgId=%s, pSessionId=%s, pSender=%s, pSenderName=%s, pSenderKey=%s, pReceiver=%s, pContent=%s, pTime=%s, "
				"eMessageType=%d, eKindType=%d, eCategoryType=%d, eDirection=%d, eUnread=%d, "
				"ePlayed=%d, eSend=%d, eOnline=%d\n",
				i + 1,
				pMessageParams.pMsgId.c_str(),
				pMessageParams.pSessionId.c_str(),
				pMessageParams.pSender.c_str(),
				pMessageParams.pSenderName.c_str(),
				pMessageParams.pSenderKey.c_str(),
				pMessageParams.pReceiver.c_str(),
				pMessageParams.pContent.c_str(),
				pMessageParams.pTime.c_str(),
				pMessageParams.eType,
				pMessageParams.eKind,
				pMessageParams.eCategory,
				pMessageParams.eDirection,
				pMessageParams.eUnread,
				pMessageParams.ePlayed,
				pMessageParams.eSend,
				pMessageParams.eOnline);
	}
}

void MessageTest_GetMessage(string pSessionId, string pMsgId)
{
	CIMI* pimi = CIMI::GetInstance();

	// get message
	printf ("UI: get message\r\n");
	MessageParams pMessageParams = pimi->GetMessage(pSessionId, pMsgId, TRUE);
	printf ("UI: pMsgId=%s, pSessionId=%s, pSender=%s, pSenderName=%s, pSenderKey=%s, pReceiver=%s, pContent=%s, pTime=%s, "
			"eMessageType=%d, eKindType=%d, eCategoryType=%d, eDirection=%d, eUnread=%d, "
			"ePlayed=%d, eSend=%d, eOnline=%d\n",
			pMessageParams.pMsgId.c_str(),
			pMessageParams.pSessionId.c_str(),
			pMessageParams.pSender.c_str(),
			pMessageParams.pSenderName.c_str(),
			pMessageParams.pSenderKey.c_str(),
			pMessageParams.pReceiver.c_str(),
			pMessageParams.pContent.c_str(),
			pMessageParams.pTime.c_str(),
			pMessageParams.eType,
			pMessageParams.eKind,
			pMessageParams.eCategory,
			pMessageParams.eDirection,
			pMessageParams.eUnread,
			pMessageParams.ePlayed,
			pMessageParams.eSend,
			pMessageParams.eOnline);
}

void MessageTest_UpdateDraft()
{
	CIMI* pimi = CIMI::GetInstance();

	// update draft
	printf ("UI: Update Craft Content\r\n");
	const string pSessionId    = "chenxi";
	const string pDraftContent = "abcdefg";
	pimi->UpdateDraft(pSessionId, pDraftContent);
}

void MessageTest_DeleteSessionList()
{
	CIMI* pimi = CIMI::GetInstance();

	// delete session list
	printf ("UI: Delete Session List\r\n");
	SessionList pSessionList = {};
	pSessionList.nCount = 2;

	SessionParams pSessionParams = {};
	pSessionParams.pSessionId = "chenxi";
	pSessionList.ppSessionParams.push_back(pSessionParams);

	SessionParams pSessionParams2 = {};
	pSessionParams2.pSessionId = "cuixiaoyu";
	pSessionList.ppSessionParams.push_back(pSessionParams2);

	pimi->DeleteSessionList(pSessionList, TRUE);
}

void MessageTest_SetSessionListReaded()
{
	CIMI* pimi = CIMI::GetInstance();

	// delete session list
	printf ("UI: Set Session List Readed\r\n");
	SessionList pSessionList = {};
	pSessionList.nCount = 1;

	SessionParams pSessionParams = {};
	pSessionParams.pSessionId = "liuqianguo";
	pSessionList.ppSessionParams.push_back(pSessionParams);

	pimi->SetSessionListReaded(pSessionList);
}
/*
void GroupTest_AddGroup()
{
	CIMI* pimi = CIMI::GetInstance();

	//test add group
	ReqParams reqParams = {};
	reqParams.eReqType = RT_ADD_GROUP;
	GroupParams pGroupCreateParams;
	pGroupCreateParams.GroupName ="hello world";
	pGroupCreateParams.GroupPortraitKey = "1234567890";
	pGroupCreateParams.MemberInfo.MemberID = "chenxi";
	pGroupCreateParams.MemberInfo.MemberName = "ncx";
	pGroupCreateParams.MemberInfo.PortraitKey = "1234567890";

	vector<MemberParams>members;

	MemberParams member;
	member.MemberID = "cuixiaoyu";
	member.MemberName = "cuixiaoyu";
	member.PortraitKey = "123";

	MemberParams member1;
	member1.MemberID = "liuqianguo";
	member1.MemberName = "liuqianguo";
	member1.PortraitKey = "456";

	MemberParams member2;
	member2.MemberID = "chixueli";
	member2.MemberName = "chixueli";
	member2.PortraitKey = "789";

	members.push_back(member);
	members.push_back(member1);
	members.push_back(member2);

	pGroupCreateParams.Userlist = members;
	reqParams.pGroupParams = &pGroupCreateParams;

	pimi->OperateGroup(&reqParams);
}
*/
int MessageTest()
{
	CIMI* pimi = CIMI::GetInstance();
/*
	{
		// Resend person message
		printf ("UI: Resend personal message\n");
		ReqParams reqParams = {};
		reqParams.eReqType = RT_RESEND_MESSAGE;
		MessageParams messageParams = {};
		messageParams.pSessionId = (CHAR*)"8008";
		messageParams.pMsgId     = (CHAR*)"543B8D8D16";
		reqParams.pMessageParams = &messageParams;
		pimi->ResendMessage(&reqParams);
	}
*/

//	{
//		// write message
//		printf ("UI: Write one message to local\n");
//		MessageParams messageParams = {};
////		messageParams.pSender   = (CHAR*)"";
//		messageParams.pReceiver = (CHAR*)"20427";
//		messageParams.pContent  = (CHAR*)"hello world!";
//		messageParams.eType     = MT_CUSTOM;
//		messageParams.eKind     = KT_NOTIFICATION;
//		messageParams.eCategory = CT_PLAIN_TEXT;
//		HRESULT hResult = pimi->WriteMessage(messageParams);
//		if (hResult == S_OK)
//		{
//			printf ("UI: Write message success\n");
//		}
//		else
//		{
//			printf ("UI: Write message failed\n");
//		}
//	}


//	{
//		// send custom message
//		printf ("UI: Send custom message\n");
//		ReqParams reqParams = {};
//		reqParams.eReqType = RT_SEND_MESSAGE;
//		MessageParams messageParams = {};
//		messageParams.pSender   = (CHAR*)"wangguoying";
//		messageParams.pReceiver = (CHAR*)"wangguoyingF98963317";
//		messageParams.pContent  = (CHAR*)"hello world!";
//		messageParams.eType     = MT_CUSTOM;
//		messageParams.eKind     = KT_ORDINARY;
//		messageParams.eCategory = CT_PLAIN_TEXT;
//		reqParams.pMessageParams = &messageParams;
//		pimi->SendMessage(&reqParams);
//	}


//	{
//		// send maishou message
//		printf ("UI: Send maishou message\n");
//		ReqParams reqParams = {};
//		reqParams.eReqType = RT_SEND_MESSAGE;
//		MessageParams messageParams = {};
//		messageParams.pSender   = (CHAR*)"maishou3";
//		messageParams.pReceiver = (CHAR*)"maishou1";
//		messageParams.pContent  = (CHAR*)"hello world!";
//		messageParams.eType     = MT_MAISHOU;
//		messageParams.eKind     = KT_ORDINARY;
//		messageParams.eCategory = CT_PLAIN_TEXT;
//		reqParams.pMessageParams = &messageParams;
//		pimi->SendMessage(&reqParams);
//	}

/*
	{
		// set session top
		printf ("UI: Set session chenxi's top\n");
		SessionParams sessionParams;
		sessionParams.pSessionId = "chenxi";
		sessionParams.eTop = TS_TOPPED;
		HRESULT hResult = pimi->SetSessionOption(SOT_TOP, sessionParams);
		if (hResult == S_OK)
		{
			printf ("UI: Set session top success\n");
		}
		else
		{
			printf ("UI: Set session top failed\n");
		}
	}


	{
		// set session remind
		printf ("UI: Set session chenxi's remind\n");
		SessionParams sessionParams;
		sessionParams.pSessionId = "chenxi";
		sessionParams.eRemind = RS_OPEN;
		HRESULT hResult = pimi->SetSessionOption(SOT_REMIND, sessionParams);
		if (hResult == S_OK)
		{
			printf ("UI: Set session remind success\n");
		}
		else
		{
			printf ("UI: Set session remind failed\n");
		}
	}
*/
/*
*/
/*
	{
		// get other pages message list
		const string pSessionId = "53F832E327383991AE75";
		const string pLastMsgId = "53F9177E27242072D5820E";
		int nPageSize = 300;
		printf ("UI: get chenxi's other page message list\n");
		MessageList pMessageList = pimi->GetMessageList(pSessionId, pLastMsgId, nPageSize);
		printf ("UI: real message count=%d\n", pMessageList.nCount);
		for (int i=0; i<pMessageList.nCount; i++)
		{
			MessageParams pMessageParams = pMessageList.ppMessageParams[i];
			printf ("UI: [%d]: pMsgId=%s, pSessionId=%s, pSender=%s, pSenderName=%s, pSenderKey=%s, pReceiver=%s, pContent=%s, pTime=%s, "
					"eMessageType=%d, eKindType=%d, eCategoryType=%d, eDirection=%d, eUnread=%d, "
					"ePlayed=%d, eSend=%d, eOnline=%d\n",
					i + 1,
					pMessageParams.pMsgId.c_str(),
					pMessageParams.pSessionId.c_str(),
					pMessageParams.pSender.c_str(),
					pMessageParams.pSenderName.c_str(),
					pMessageParams.pSenderKey.c_str(),
					pMessageParams.pReceiver.c_str(),
					pMessageParams.pContent.c_str(),
					pMessageParams.pTime.c_str(),
					pMessageParams.eType,
					pMessageParams.eKind,
					pMessageParams.eCategory,
					pMessageParams.eDirection,
					pMessageParams.eUnread,
					pMessageParams.ePlayed,
					pMessageParams.eSend,
					pMessageParams.eOnline);
		}
	}


	{
		// Delete message
		const string pSessionId = "chenxi";
		const string pMsgId = "14081675362541271916105658";
		printf ("UI: Delete message by pSessionId=%s, pMsgId=%s\n", pSessionId.c_str(), pMsgId.c_str());
		HRESULT hResult = pimi->DeleteMessage(pSessionId, pMsgId);
		if (hResult == S_OK)
		{
			printf ("UI: Delete message success\n");
		}
		else
		{
			printf ("UI: Delete message failed\n");
		}
	}


	{
		// Set audio play
		const string pSessionId = "chenxi";
		const string pMsgId = "14081675362541271916105658";
		printf ("UI: Set audio play by pSessionId=%s, pMsgId=%s\n", pSessionId.c_str(), pMsgId.c_str());
		HRESULT hResult = pimi->SetAudioPlayed(pSessionId, pMsgId);
		if (hResult == S_OK)
		{
			printf ("UI: Set audio play success\n");
		}
		else
		{
			printf ("UI: Set audio play failed\n");
		}
	}
*/
/*
	{
		// delete session
		printf ("UI: Delete session\n");
		const string pSessionId = "chenxi";
		HRESULT hResult = pimi->DeleteSession(pSessionId, FALSE);
		if (hResult == S_OK)
		{
			printf ("UI: Delete session success\n");
		}
		else
		{
			printf ("UI: Delete session failed\n");
		}
	}
*/
/*
	{
		// delete session and message logs
		printf ("UI: Delete session and message logs\n");
		const CHAR* pSessionId = "chenxi";
		HRESULT hResult = pimi->DeleteSession(pSessionId, TRUE);
		if (hResult == S_OK)
		{
			printf ("UI: Delete session and message logs success\n");
		}
		else
		{
			printf ("UI: Delete session and message logs failed\n");
		}
	}
*/
/*
	{
		// clear session
		printf ("UI: Clear session chenxi\n");
		const CHAR* pSessionId = "chenxi";
		HRESULT hResult = pimi->ClearSession(pSessionId);
		if (hResult == S_OK)
		{
			printf ("UI: Clear session success\n");
		}
		else
		{
			printf ("UI: Clear session failed\n");
		}
	}
*/
/*
	{
		// get the given field list
		printf ("UI: get the given message field list\n");
		const string pSessionId = "chenxi";
		MessageList pMessageList = pimi->GetGivenFieldList(pSessionId, GFT_CONTENT, GCT_IMAGE);
		printf ("UI: real message field count=%d\n", pMessageList.nCount);
		for (int i=0; i<pMessageList.nCount; i++)
		{
			MessageParams pMessageParams = pMessageList.ppMessageParams[i];
			printf ("UI: [%d]: pContent=%s\n",
					i + 1,
					pMessageParams.pContent.c_str());
		}
	}
*/
	return EXIT_SUCCESS;
}

void BuddyTest_AddBuddy(string pUserId)
{
	CIMI* pimi = CIMI::GetInstance();

	// add buddy
	printf ("UI: Add buddy\n");
	pimi->AddBuddy(pUserId);
}

void BuddyTest_DeleteBuddy(const string& pUserId)
{
	CIMI* pimi = CIMI::GetInstance();

	// add buddy
	printf ("UI: Delete buddy\n");
	pimi->DeleteBuddy(pUserId);
}

void BuddyTest_GetBuddy(const string& pUserId)
{
	CIMI* pimi = CIMI::GetInstance();

	BuddyParams pBuddyParams = pimi->GetBuddy(pUserId, FALSE);
	printf ("UI: Get one buddy\r\n");
	printf ("pUserId=%s, pUserName=%s, pPortraitKey=%s, pEmotionMood=%s, "
			"pCmsId=%s, pQrerUrl=%s, pCommunityUrl=%s, eIsBuddy=%d\n",
			pBuddyParams.pUserId.c_str(),
			pBuddyParams.pUserName.c_str(),
			pBuddyParams.pPortraitKey.c_str(),
			pBuddyParams.pEmotionMood.c_str(),
			pBuddyParams.pCmsId.c_str(),
			pBuddyParams.pQrerUrl.c_str(),
			pBuddyParams.pCommunityUrl.c_str(),
			pBuddyParams.eIsBuddy);
}

void BuddyTest_GetContact(const string& pUserId, BOOL bLoadFromServer)
{
	CIMI* pimi = CIMI::GetInstance();

	BuddyParams pBuddyParams = pimi->GetContact(pUserId, bLoadFromServer);
	printf ("UI: Get Contact\r\n");
	printf ("UI: pUserId=%s, pUserName=%s, pPortraitKey=%s, pEmotionMood=%s, "
			"pCmsId=%s, pQrerUrl=%s, pCommunityUrl=%s, eIsBuddy=%d\n",
			pBuddyParams.pUserId.c_str(),
			pBuddyParams.pUserName.c_str(),
			pBuddyParams.pPortraitKey.c_str(),
			pBuddyParams.pEmotionMood.c_str(),
			pBuddyParams.pCmsId.c_str(),
			pBuddyParams.pQrerUrl.c_str(),
			pBuddyParams.pCommunityUrl.c_str(),
			pBuddyParams.eIsBuddy);
}

int BuddyTest()
{
	CIMI* pimi = CIMI::GetInstance();


//	{
//		// add buddy
//		printf ("UI: add 1 buddy\n");
//		BuddyParams buddyParams = {};
//		buddyParams.pUserId       = "chenxi";
//		buddyParams.pUserName     = "name_chenxi";
//		buddyParams.pPortraitKey  = "1234567890";
//		buddyParams.pEmotionMood  = "Hello World!";
//		buddyParams.pCmsId        = "12345";
//		buddyParams.pQrerUrl      = "http://www.haixuan.com/";
//		buddyParams.pCommunityUrl = "http://www.haixuan.com/";
//		buddyParams.eIsBuddy = IBT_BUDDY;
//		pimi->AddBuddy(buddyParams);
//	}

/*
	// add buddy
	printf ("UI: add 10 buddy includes buddy or not buddy\n");
	for (int i=0; i<10; i++)
	{
		CHAR user_id[128] = {};
		CHAR name[128] = {};
		CHAR cms_id[128] = {};
		snprintf (user_id, 127, "800%d", i);
		snprintf (name, 127, "n%s", user_id);
		snprintf (cms_id, 127, "%d", i);
		BuddyParams buddyParams = {};
		buddyParams.pUserId       = user_id;
		buddyParams.pUserName     = name;
		buddyParams.pPortraitKey  = "1234567890";
		buddyParams.pEmotionMood  = "Hello World!";
		buddyParams.pCmsId        = cms_id;
		buddyParams.pQrerUrl      = "http://www.haixuan.com/";
		buddyParams.pCommunityUrl = "http://www.haixuan.com/";
//		if (i % 2 == 0)
		{
			buddyParams.eIsBuddy = IBT_BUDDY;
		}
//		else
//		{
//			buddyParams.eIsBuddy = IBT_NOTBUDDY;
//		}
		pimi->AddBuddy(buddyParams);
	}
*/

	{
		// get buddy list
		BuddyList pBuddyList = pimi->GetBuddyList();
		printf ("UI: buddy count=%d\n", pBuddyList.nCount);
		for (int i=0; i<pBuddyList.nCount; i++)
		{
			BuddyParams pBuddyParams = pBuddyList.ppBuddyParams[i];
			printf ("UI: [%d]: pUserId=%s, pUserName=%s, pPortraitKey=%s, pEmotionMood=%s, "
					"pCmsId=%s, pQrerUrl=%s, pCommunityUrl=%s, eIsBuddy=%d\n",
					i + 1,
					pBuddyParams.pUserId.c_str(),
					pBuddyParams.pUserName.c_str(),
					pBuddyParams.pPortraitKey.c_str(),
					pBuddyParams.pEmotionMood.c_str(),
					pBuddyParams.pCmsId.c_str(),
					pBuddyParams.pQrerUrl.c_str(),
					pBuddyParams.pCommunityUrl.c_str(),
					pBuddyParams.eIsBuddy);
		}
	}

/*
	{
		// modify buddy
		printf ("UI: modify buddy\n");
		BuddyParams buddyParams = {};
		buddyParams.pUserId = "8006";
		buddyParams.pUserName = "ÂàòÂæ∑ÂçéÂ•Ω";
		printf ("UI: [1] pUserId=%s, pUserName=%s\n",
				buddyParams.pUserId.c_str(),
				buddyParams.pUserName.c_str());
		pimi->ModifyBuddy(buddyParams);
		buddyParams.pUserId = "8005";
		buddyParams.pUserName = "ÈôàÂ•ïËøÖÂî±";
		printf ("UI: [2] pUserId=%s, pUserName=%s\n",
				buddyParams.pUserId.c_str(),
				buddyParams.pUserName.c_str());
		pimi->ModifyBuddy(buddyParams);
		buddyParams.pUserId = "8002";
		buddyParams.pUserName = "Â∑¥ÂõΩÂ∏ÉË°£";
		printf ("UI: [3] pUserId=%s, pUserName=%s\n",
				buddyParams.pUserId.c_str(),
				buddyParams.pUserName.c_str());
		pimi->ModifyBuddy(buddyParams);
	}


	{
		// get buddy list
		BuddyList pBuddyList = pimi->GetBuddyList();
		printf ("UI: buddy count=%d\n", pBuddyList.nCount);
		for (int i=0; i<pBuddyList.nCount; i++)
		{
			BuddyParams pBuddyParams = pBuddyList.ppBuddyParams[i];
			printf ("UI: [%d]: pUserId=%s, pUserName=%s, pPortraitKey=%s, pEmotionMood=%s, "
					"pCmsId=%s, pQrerUrl=%s, pCommunityUrl=%s, eIsBuddy=%d\n",
					i + 1,
					pBuddyParams.pUserId.c_str(),
					pBuddyParams.pUserName.c_str(),
					pBuddyParams.pPortraitKey.c_str(),
					pBuddyParams.pEmotionMood.c_str(),
					pBuddyParams.pCmsId.c_str(),
					pBuddyParams.pQrerUrl.c_str(),
					pBuddyParams.pCommunityUrl.c_str(),
					pBuddyParams.eIsBuddy);
		}
	}


	{
		// delete buddy
		printf ("UI: Delete buddy 8006\n");
		const string pUserId = "8006";
		HRESULT hResult = pimi->DeleteBuddy(pUserId);
		if (hResult == S_OK)
		{
			printf ("UI: Delete buddy success\n");
		}
		else
		{
			printf ("UI: Delete buddy failed\n");
		}
	}

*/

	return EXIT_SUCCESS;
}

pthread_t m_pthread;	///< Á∫øÁ®ãÂè•ÊüÑ

void* RunEntry (void* pv)
{
	pthread_detach(pthread_self());

//	MessageTest_SendMessage ();

	pthread_exit (NULL);
	return NULL;
}

void* RunEntry2 (void* pv)
{
	pthread_detach(pthread_self());

//	sleep (2);

	CIMI* pimi = CIMI::GetInstance();
	pimi->Release();

	pthread_exit (NULL);
	return NULL;
}

#include "stdio.h"
#include "sqlite3.h"

int main(int argc, char** argv)
{
	setbuf(stdout,NULL);

	puts("libim test program\n");

	CIMI* pimi = CIMI::GetInstance();

	pimi->Init();

	pimi->SetRootDir(GetRootDirectory());

	//pimi->SetServerAddr("10.0.247.179", "8000");
	//pimi->SetServerAddr("111.47.240.46", "8000");
	pimi->SetServerAddr("223.202.100.242", "8000");
	pimi->SetUserId("wonderful");
	printf("UI: pUserId=%s\r\n", pimi->GetUserId().c_str());
	pimi->OpenLog(TRUE);

	UILoginObserver* pUILoginObserver = new UILoginObserver();
	UIMessageObserver * pUIMessageObserver = new UIMessageObserver();
	UIBuddyObserver * pUIBuddyObserver = new UIBuddyObserver();
	UIFansObserver * pUIFansObserver = new UIFansObserver();
	pimi->SetObserver(OT_LOGIN, pUILoginObserver);
	pimi->SetObserver(OT_MESSAGE, pUIMessageObserver);
	pimi->SetObserver(OT_BUDDY, pUIBuddyObserver);
	pimi->SetObserver(OT_FANS, pUIFansObserver);


	{
		// login to server
		ReqParams reqParams = {};
		reqParams.eReqType = RT_LOGIN;
		pimi->Login(&reqParams);
	}

	sleep(10);
	//pimi->GetFansList();
	//pimi->SetReceiveMessageOption(1);
	//int count = pimi->GetSnsCount(IT_RECOMMEND);
	//int count = pimi->ClearSnsCount(IT_RECOMMEND);

//	LoginTest_Logout();

//	pthread_create (&m_pthread, 0, RunEntry2, NULL);

	//BuddyTest();
	//GroupTest();
	//MessageTest();





	//BuddyTest_AddBuddy ("chixueli");
	//BuddyTest_DeleteBuddy ("chixueli");
//	GroupTest_AddGroup();

//	BuddyTest_GetBuddy("clytze5");
//	BuddyTest_GetContact("clytze5", TRUE);

//	MessageTest_SendMessage ("cuixiaoyu");
//	MessageTest_SendGroupMessage ("54856C4527384E3862EC");
	//MessageTest_SendMessage ();
//	MessageTest_GetSessionList ();
//	MessageTest_GetMessageList ("nide123", "", 100);
//	MessageTest_GetMessage ("cuixiaoyu", "5486B5225");
	sleep (3);
//	MessageTest_GetSessionList ();
//	MessageTest_GetMessageList ("kangyan", "", 100);
//	sleep (3);
//	MessageTest_UpdateDraft();
//	MessageTest_GetSessionList ();
//	MessageTest_SendMessage ();
//	sleep (3);
//	MessageTest_GetSessionList ();

//	MessageTest_DeleteSessionList();
//	MessageTest_SetSessionListReaded();

//	printf ("UI: Notify network status ERROR\n");
//	pimi->NotifyNetworkStatus(NST_ERROR);
//	sleep (3);
//	sleep (2);

	sleep(1000);

//	pimi->Release();

	printf ("libim test end\n");

	return EXIT_SUCCESS;
}
